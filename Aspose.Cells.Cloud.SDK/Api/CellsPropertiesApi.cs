/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsPropertiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        CellsDocumentPropertiesResponse CellsPropertiesDeleteDocumentProperties (string name, string folder = null, string storage = null);

        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        ApiResponse<CellsDocumentPropertiesResponse> CellsPropertiesDeleteDocumentPropertiesWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        CellsDocumentPropertiesResponse CellsPropertiesDeleteDocumentProperty (string name, string propertyName, string folder = null, string storage = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        ApiResponse<CellsDocumentPropertiesResponse> CellsPropertiesDeleteDocumentPropertyWithHttpInfo (string name, string propertyName, string folder = null, string storage = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        CellsDocumentPropertiesResponse CellsPropertiesGetDocumentProperties (string name, string folder = null, string storage = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        ApiResponse<CellsDocumentPropertiesResponse> CellsPropertiesGetDocumentPropertiesWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertyResponse</returns>
        CellsDocumentPropertyResponse CellsPropertiesGetDocumentProperty (string name, string propertyName, string folder = null, string storage = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertyResponse</returns>
        ApiResponse<CellsDocumentPropertyResponse> CellsPropertiesGetDocumentPropertyWithHttpInfo (string name, string propertyName, string folder = null, string storage = null);
        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertyResponse</returns>
        CellsDocumentPropertyResponse CellsPropertiesPutDocumentProperty (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null);

        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertyResponse</returns>
        ApiResponse<CellsDocumentPropertyResponse> CellsPropertiesPutDocumentPropertyWithHttpInfo (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesDeleteDocumentPropertiesAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesDeleteDocumentPropertyAsync (string name, string propertyName, string folder = null, string storage = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storage = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesGetDocumentPropertiesAsync (string name, string folder = null, string storage = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storage = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertyResponse> CellsPropertiesGetDocumentPropertyAsync (string name, string propertyName, string folder = null, string storage = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertyResponse>> CellsPropertiesGetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storage = null);
        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertyResponse> CellsPropertiesPutDocumentPropertyAsync (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null);

        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertyResponse>> CellsPropertiesPutDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsPropertiesApi : ICellsPropertiesApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPropertiesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsPropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPropertiesApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPropertiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPropertiesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsPropertiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPropertiesApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        public CellsDocumentPropertiesResponse CellsPropertiesDeleteDocumentProperties (string name, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = CellsPropertiesDeleteDocumentPropertiesWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        public ApiResponse< CellsDocumentPropertiesResponse > CellsPropertiesDeleteDocumentPropertiesWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesDeleteDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesDeleteDocumentPropertiesAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = await CellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesDeleteDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        public CellsDocumentPropertiesResponse CellsPropertiesDeleteDocumentProperty (string name, string propertyName, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = CellsPropertiesDeleteDocumentPropertyWithHttpInfo(name, propertyName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        public ApiResponse< CellsDocumentPropertiesResponse > CellsPropertiesDeleteDocumentPropertyWithHttpInfo (string name, string propertyName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesDeleteDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsPropertiesApi->CellsPropertiesDeleteDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesDeleteDocumentPropertyAsync (string name, string propertyName, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = await CellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo(name, propertyName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesDeleteDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsPropertiesApi->CellsPropertiesDeleteDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        public CellsDocumentPropertiesResponse CellsPropertiesGetDocumentProperties (string name, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = CellsPropertiesGetDocumentPropertiesWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        public ApiResponse< CellsDocumentPropertiesResponse > CellsPropertiesGetDocumentPropertiesWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesGetDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesGetDocumentPropertiesAsync (string name, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = await CellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo(name, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesGetDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertyResponse</returns>
        public CellsDocumentPropertyResponse CellsPropertiesGetDocumentProperty (string name, string propertyName, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertyResponse> localVarResponse = CellsPropertiesGetDocumentPropertyWithHttpInfo(name, propertyName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertyResponse</returns>
        public ApiResponse< CellsDocumentPropertyResponse > CellsPropertiesGetDocumentPropertyWithHttpInfo (string name, string propertyName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesGetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsPropertiesApi->CellsPropertiesGetDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertyResponse> CellsPropertiesGetDocumentPropertyAsync (string name, string propertyName, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertyResponse> localVarResponse = await CellsPropertiesGetDocumentPropertyAsyncWithHttpInfo(name, propertyName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertyResponse>> CellsPropertiesGetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesGetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsPropertiesApi->CellsPropertiesGetDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertyResponse)));
        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertyResponse</returns>
        public CellsDocumentPropertyResponse CellsPropertiesPutDocumentProperty (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertyResponse> localVarResponse = CellsPropertiesPutDocumentPropertyWithHttpInfo(name, propertyName, property, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertyResponse</returns>
        public ApiResponse< CellsDocumentPropertyResponse > CellsPropertiesPutDocumentPropertyWithHttpInfo (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesPutDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsPropertiesApi->CellsPropertiesPutDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesPutDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertyResponse)));
        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertyResponse> CellsPropertiesPutDocumentPropertyAsync (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null)
        {
             ApiResponse<CellsDocumentPropertyResponse> localVarResponse = await CellsPropertiesPutDocumentPropertyAsyncWithHttpInfo(name, propertyName, property, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertyResponse>> CellsPropertiesPutDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPropertiesApi->CellsPropertiesPutDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsPropertiesApi->CellsPropertiesPutDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesPutDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertyResponse)));
        }

    }
}
