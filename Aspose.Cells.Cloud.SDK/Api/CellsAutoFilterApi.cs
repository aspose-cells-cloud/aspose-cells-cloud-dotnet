/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsAutoFilterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterDeleteWorksheetDateFilter (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null);

        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null);
        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterDeleteWorksheetFilter (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null);

        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterDeleteWorksheetFilterWithHttpInfo (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null);
        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>AutoFilterResponse</returns>
        AutoFilterResponse CellsAutoFilterGetWorksheetAutoFilter (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of AutoFilterResponse</returns>
        ApiResponse<AutoFilterResponse> CellsAutoFilterGetWorksheetAutoFilterWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPostWorksheetAutoFilterRefresh (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPostWorksheetMatchBlanks (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);

        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);
        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPostWorksheetMatchNonBlanks (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);

        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetColorFilter (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetColorFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetCustomFilter (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetCustomFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetDateFilter (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetDateFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetDynamicFilter (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetFilter (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetFilterTop10 (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetFilterTop10WithHttpInfo (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsAutoFilterPutWorksheetIconFilter (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsAutoFilterPutWorksheetIconFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterDeleteWorksheetDateFilterAsync (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null);

        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null);
        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterDeleteWorksheetFilterAsync (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null);

        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null);
        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of AutoFilterResponse</returns>
        System.Threading.Tasks.Task<AutoFilterResponse> CellsAutoFilterGetWorksheetAutoFilterAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (AutoFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoFilterResponse>> CellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPostWorksheetAutoFilterRefreshAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPostWorksheetMatchBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);

        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);
        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPostWorksheetMatchNonBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);

        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetColorFilterAsync (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetCustomFilterAsync (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetDateFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetDynamicFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetFilterAsync (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetFilterTop10Async (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetIconFilterAsync (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);

        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsAutoFilterApi : ICellsAutoFilterApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsAutoFilterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsAutoFilterApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsAutoFilterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsAutoFilterApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsAutoFilterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsAutoFilterApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsAutoFilterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsAutoFilterApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterDeleteWorksheetDateFilter (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterDeleteWorksheetDateFilterAsync (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterDeleteWorksheetFilter (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterDeleteWorksheetFilterWithHttpInfo(name, sheetName, fieldIndex, criteria, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterDeleteWorksheetFilterWithHttpInfo (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterDeleteWorksheetFilterAsync (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo(name, sheetName, fieldIndex, criteria, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterDeleteWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>AutoFilterResponse</returns>
        public AutoFilterResponse CellsAutoFilterGetWorksheetAutoFilter (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<AutoFilterResponse> localVarResponse = CellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of AutoFilterResponse</returns>
        public ApiResponse< AutoFilterResponse > CellsAutoFilterGetWorksheetAutoFilterWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterGetWorksheetAutoFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterGetWorksheetAutoFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterGetWorksheetAutoFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoFilterResponse)));
        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of AutoFilterResponse</returns>
        public async System.Threading.Tasks.Task<AutoFilterResponse> CellsAutoFilterGetWorksheetAutoFilterAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<AutoFilterResponse> localVarResponse = await CellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (AutoFilterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoFilterResponse>> CellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterGetWorksheetAutoFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterGetWorksheetAutoFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterGetWorksheetAutoFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoFilterResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPostWorksheetAutoFilterRefresh (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetAutoFilterRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPostWorksheetAutoFilterRefreshAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetAutoFilterRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPostWorksheetMatchBlanks (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPostWorksheetMatchBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo(name, sheetName, fieldIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPostWorksheetMatchNonBlanks (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchNonBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchNonBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPostWorksheetMatchNonBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo(name, sheetName, fieldIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPostWorksheetMatchNonBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchNonBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetColorFilter (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetColorFilterWithHttpInfo(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetColorFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (colorFilter != null && colorFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colorFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colorFilter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetColorFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetColorFilterAsync (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetColorFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (colorFilter != null && colorFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colorFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colorFilter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetColorFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetCustomFilter (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetCustomFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'operatorType1' is set
            if (operatorType1 == null)
                throw new ApiException(400, "Missing required parameter 'operatorType1' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'criteria1' is set
            if (criteria1 == null)
                throw new ApiException(400, "Missing required parameter 'criteria1' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (operatorType1 != null) localVarQueryParams.Add("operatorType1", Configuration.ApiClient.ParameterToString(operatorType1)); // query parameter
            if (criteria1 != null) localVarQueryParams.Add("criteria1", Configuration.ApiClient.ParameterToString(criteria1)); // query parameter
            if (isAnd != null) localVarQueryParams.Add("isAnd", Configuration.ApiClient.ParameterToString(isAnd)); // query parameter
            if (operatorType2 != null) localVarQueryParams.Add("operatorType2", Configuration.ApiClient.ParameterToString(operatorType2)); // query parameter
            if (criteria2 != null) localVarQueryParams.Add("criteria2", Configuration.ApiClient.ParameterToString(criteria2)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetCustomFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetCustomFilterAsync (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'operatorType1' is set
            if (operatorType1 == null)
                throw new ApiException(400, "Missing required parameter 'operatorType1' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'criteria1' is set
            if (criteria1 == null)
                throw new ApiException(400, "Missing required parameter 'criteria1' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetCustomFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (operatorType1 != null) localVarQueryParams.Add("operatorType1", Configuration.ApiClient.ParameterToString(operatorType1)); // query parameter
            if (criteria1 != null) localVarQueryParams.Add("criteria1", Configuration.ApiClient.ParameterToString(criteria1)); // query parameter
            if (isAnd != null) localVarQueryParams.Add("isAnd", Configuration.ApiClient.ParameterToString(isAnd)); // query parameter
            if (operatorType2 != null) localVarQueryParams.Add("operatorType2", Configuration.ApiClient.ParameterToString(operatorType2)); // query parameter
            if (criteria2 != null) localVarQueryParams.Add("criteria2", Configuration.ApiClient.ParameterToString(criteria2)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetCustomFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetDateFilter (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetDateFilterWithHttpInfo(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetDateFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetDateFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetDynamicFilter (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'dynamicFilterType' is set
            if (dynamicFilterType == null)
                throw new ApiException(400, "Missing required parameter 'dynamicFilterType' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dynamicFilterType != null) localVarQueryParams.Add("dynamicFilterType", Configuration.ApiClient.ParameterToString(dynamicFilterType)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDynamicFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetDynamicFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'dynamicFilterType' is set
            if (dynamicFilterType == null)
                throw new ApiException(400, "Missing required parameter 'dynamicFilterType' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetDynamicFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dynamicFilterType != null) localVarQueryParams.Add("dynamicFilterType", Configuration.ApiClient.ParameterToString(dynamicFilterType)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDynamicFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetFilter (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetFilterWithHttpInfo(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetFilterAsync (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetFilterTop10 (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetFilterTop10WithHttpInfo (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isTop' is set
            if (isTop == null)
                throw new ApiException(400, "Missing required parameter 'isTop' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isPercent' is set
            if (isPercent == null)
                throw new ApiException(400, "Missing required parameter 'isPercent' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'itemCount' is set
            if (itemCount == null)
                throw new ApiException(400, "Missing required parameter 'itemCount' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (isTop != null) localVarQueryParams.Add("isTop", Configuration.ApiClient.ParameterToString(isTop)); // query parameter
            if (isPercent != null) localVarQueryParams.Add("isPercent", Configuration.ApiClient.ParameterToString(isPercent)); // query parameter
            if (itemCount != null) localVarQueryParams.Add("itemCount", Configuration.ApiClient.ParameterToString(itemCount)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilterTop10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetFilterTop10Async (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isTop' is set
            if (isTop == null)
                throw new ApiException(400, "Missing required parameter 'isTop' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isPercent' is set
            if (isPercent == null)
                throw new ApiException(400, "Missing required parameter 'isPercent' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'itemCount' is set
            if (itemCount == null)
                throw new ApiException(400, "Missing required parameter 'itemCount' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetFilterTop10");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (isTop != null) localVarQueryParams.Add("isTop", Configuration.ApiClient.ParameterToString(isTop)); // query parameter
            if (isPercent != null) localVarQueryParams.Add("isPercent", Configuration.ApiClient.ParameterToString(isPercent)); // query parameter
            if (itemCount != null) localVarQueryParams.Add("itemCount", Configuration.ApiClient.ParameterToString(itemCount)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilterTop10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsAutoFilterPutWorksheetIconFilter (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsAutoFilterPutWorksheetIconFilterWithHttpInfo(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsAutoFilterPutWorksheetIconFilterWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconSetType' is set
            if (iconSetType == null)
                throw new ApiException(400, "Missing required parameter 'iconSetType' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconId' is set
            if (iconId == null)
                throw new ApiException(400, "Missing required parameter 'iconId' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (iconSetType != null) localVarQueryParams.Add("iconSetType", Configuration.ApiClient.ParameterToString(iconSetType)); // query parameter
            if (iconId != null) localVarQueryParams.Add("iconId", Configuration.ApiClient.ParameterToString(iconId)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetIconFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsAutoFilterPutWorksheetIconFilterAsync (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconSetType' is set
            if (iconSetType == null)
                throw new ApiException(400, "Missing required parameter 'iconSetType' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconId' is set
            if (iconId == null)
                throw new ApiException(400, "Missing required parameter 'iconId' when calling CellsAutoFilterApi->CellsAutoFilterPutWorksheetIconFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (iconSetType != null) localVarQueryParams.Add("iconSetType", Configuration.ApiClient.ParameterToString(iconSetType)); // query parameter
            if (iconId != null) localVarQueryParams.Add("iconId", Configuration.ApiClient.ParameterToString(iconId)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetIconFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
