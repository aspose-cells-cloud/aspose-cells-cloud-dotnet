/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsOleObjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsOleObjectsDeleteWorksheetOleObject (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null);

        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null);
        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsOleObjectsDeleteWorksheetOleObjects (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsOleObjectsGetWorksheetOleObject (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null);

        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsOleObjectsGetWorksheetOleObjectWithHttpInfo (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null);
        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>OleObjectsResponse</returns>
        OleObjectsResponse CellsOleObjectsGetWorksheetOleObjects (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of OleObjectsResponse</returns>
        ApiResponse<OleObjectsResponse> CellsOleObjectsGetWorksheetOleObjectsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsOleObjectsPostUpdateWorksheetOleObject (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null);

        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null);
        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>OleObjectResponse</returns>
        OleObjectResponse CellsOleObjectsPutWorksheetOleObject (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null);

        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of OleObjectResponse</returns>
        ApiResponse<OleObjectResponse> CellsOleObjectsPutWorksheetOleObjectWithHttpInfo (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsOleObjectsDeleteWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null);

        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null);
        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsOleObjectsDeleteWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsOleObjectsGetWorksheetOleObjectAsync (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null);

        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null);
        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of OleObjectsResponse</returns>
        System.Threading.Tasks.Task<OleObjectsResponse> CellsOleObjectsGetWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (OleObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OleObjectsResponse>> CellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsOleObjectsPostUpdateWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null);

        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null);
        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of OleObjectResponse</returns>
        System.Threading.Tasks.Task<OleObjectResponse> CellsOleObjectsPutWorksheetOleObjectAsync (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null);

        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (OleObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OleObjectResponse>> CellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsOleObjectsApi : ICellsOleObjectsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsOleObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsOleObjectsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsOleObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsOleObjectsApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsOleObjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsOleObjectsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsOleObjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsOleObjectsApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsOleObjectsDeleteWorksheetOleObject (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsOleObjectsDeleteWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, oleObjectIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsOleObjectsDeleteWorksheetOleObjects (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsOleObjectsDeleteWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsDeleteWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsOleObjectsGetWorksheetOleObject (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsOleObjectsGetWorksheetOleObjectWithHttpInfo(name, sheetName, objectNumber, format, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsOleObjectsGetWorksheetOleObjectWithHttpInfo (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'objectNumber' is set
            if (objectNumber == null)
                throw new ApiException(400, "Missing required parameter 'objectNumber' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (objectNumber != null) localVarPathParams.Add("objectNumber", Configuration.ApiClient.ParameterToString(objectNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsOleObjectsGetWorksheetOleObjectAsync (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, objectNumber, format, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'objectNumber' is set
            if (objectNumber == null)
                throw new ApiException(400, "Missing required parameter 'objectNumber' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (objectNumber != null) localVarPathParams.Add("objectNumber", Configuration.ApiClient.ParameterToString(objectNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>OleObjectsResponse</returns>
        public OleObjectsResponse CellsOleObjectsGetWorksheetOleObjects (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<OleObjectsResponse> localVarResponse = CellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of OleObjectsResponse</returns>
        public ApiResponse< OleObjectsResponse > CellsOleObjectsGetWorksheetOleObjectsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OleObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OleObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OleObjectsResponse)));
        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of OleObjectsResponse</returns>
        public async System.Threading.Tasks.Task<OleObjectsResponse> CellsOleObjectsGetWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<OleObjectsResponse> localVarResponse = await CellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (OleObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OleObjectsResponse>> CellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsGetWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OleObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OleObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OleObjectsResponse)));
        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsOleObjectsPostUpdateWorksheetOleObject (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, ole, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsOleObjectsApi->CellsOleObjectsPostUpdateWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (ole != null && ole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ole; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPostUpdateWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsOleObjectsPostUpdateWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, oleObjectIndex, ole, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsOleObjectsApi->CellsOleObjectsPostUpdateWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (ole != null && ole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ole; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPostUpdateWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>OleObjectResponse</returns>
        public OleObjectResponse CellsOleObjectsPutWorksheetOleObject (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null)
        {
             ApiResponse<OleObjectResponse> localVarResponse = CellsOleObjectsPutWorksheetOleObjectWithHttpInfo(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of OleObjectResponse</returns>
        public ApiResponse< OleObjectResponse > CellsOleObjectsPutWorksheetOleObjectWithHttpInfo (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsPutWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsPutWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (oleFile != null) localVarQueryParams.Add("oleFile", Configuration.ApiClient.ParameterToString(oleFile)); // query parameter
            if (imageFile != null) localVarQueryParams.Add("imageFile", Configuration.ApiClient.ParameterToString(imageFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (oleObject != null && oleObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(oleObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oleObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPutWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OleObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OleObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OleObjectResponse)));
        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of OleObjectResponse</returns>
        public async System.Threading.Tasks.Task<OleObjectResponse> CellsOleObjectsPutWorksheetOleObjectAsync (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null)
        {
             ApiResponse<OleObjectResponse> localVarResponse = await CellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (OleObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OleObjectResponse>> CellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsOleObjectsApi->CellsOleObjectsPutWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsOleObjectsApi->CellsOleObjectsPutWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (oleFile != null) localVarQueryParams.Add("oleFile", Configuration.ApiClient.ParameterToString(oleFile)); // query parameter
            if (imageFile != null) localVarQueryParams.Add("imageFile", Configuration.ApiClient.ParameterToString(imageFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (oleObject != null && oleObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(oleObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oleObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPutWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OleObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OleObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OleObjectResponse)));
        }

    }
}
