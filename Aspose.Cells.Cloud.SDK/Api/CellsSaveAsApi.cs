/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsSaveAsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaveResponse</returns>
        SaveResponse CellsSaveAsPostDocumentSaveAs (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaveResponse</returns>
        ApiResponse<SaveResponse> CellsSaveAsPostDocumentSaveAsWithHttpInfo (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaveResponse</returns>
        System.Threading.Tasks.Task<SaveResponse> CellsSaveAsPostDocumentSaveAsAsync (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null);

        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveResponse>> CellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsSaveAsApi : ICellsSaveAsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsSaveAsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsSaveAsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsSaveAsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsSaveAsApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsSaveAsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsSaveAsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsSaveAsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsSaveAsApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaveResponse</returns>
        public SaveResponse CellsSaveAsPostDocumentSaveAs (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null)
        {
             ApiResponse<SaveResponse> localVarResponse = CellsSaveAsPostDocumentSaveAsWithHttpInfo(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaveResponse</returns>
        public ApiResponse< SaveResponse > CellsSaveAsPostDocumentSaveAsWithHttpInfo (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsSaveAsApi->CellsSaveAsPostDocumentSaveAs");

            var localVarPath = "/cells/{name}/SaveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (isAutoFitRows != null) localVarQueryParams.Add("isAutoFitRows", Configuration.ApiClient.ParameterToString(isAutoFitRows)); // query parameter
            if (isAutoFitColumns != null) localVarQueryParams.Add("isAutoFitColumns", Configuration.ApiClient.ParameterToString(isAutoFitColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSaveAsPostDocumentSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaveResponse</returns>
        public async System.Threading.Tasks.Task<SaveResponse> CellsSaveAsPostDocumentSaveAsAsync (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null)
        {
             ApiResponse<SaveResponse> localVarResponse = await CellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveResponse>> CellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsSaveAsApi->CellsSaveAsPostDocumentSaveAs");

            var localVarPath = "/cells/{name}/SaveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (isAutoFitRows != null) localVarQueryParams.Add("isAutoFitRows", Configuration.ApiClient.ParameterToString(isAutoFitRows)); // query parameter
            if (isAutoFitColumns != null) localVarQueryParams.Add("isAutoFitColumns", Configuration.ApiClient.ParameterToString(isAutoFitColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSaveAsPostDocumentSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

    }
}
