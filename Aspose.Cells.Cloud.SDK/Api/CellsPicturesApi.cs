/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsPicturesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPicturesDeleteWorksheetPicture (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null);

        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPicturesDeleteWorksheetPictureWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null);
        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPicturesDeleteWorksheetPictures (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPicturesDeleteWorksheetPicturesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsPicturesGetWorksheetPicture (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null);

        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsPicturesGetWorksheetPictureWithHttpInfo (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null);
        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PicturesResponse</returns>
        PicturesResponse CellsPicturesGetWorksheetPictures (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        ApiResponse<PicturesResponse> CellsPicturesGetWorksheetPicturesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PictureResponse</returns>
        PictureResponse CellsPicturesPostWorksheetPicture (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null);

        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        ApiResponse<PictureResponse> CellsPicturesPostWorksheetPictureWithHttpInfo (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null);
        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PicturesResponse</returns>
        PicturesResponse CellsPicturesPutWorksheetAddPicture (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null);

        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        ApiResponse<PicturesResponse> CellsPicturesPutWorksheetAddPictureWithHttpInfo (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPicturesDeleteWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null);

        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null);
        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPicturesDeleteWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsPicturesGetWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null);

        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsPicturesGetWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null);
        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        System.Threading.Tasks.Task<PicturesResponse> CellsPicturesGetWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> CellsPicturesGetWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PictureResponse</returns>
        System.Threading.Tasks.Task<PictureResponse> CellsPicturesPostWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null);

        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PictureResponse>> CellsPicturesPostWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null);
        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        System.Threading.Tasks.Task<PicturesResponse> CellsPicturesPutWorksheetAddPictureAsync (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null);

        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> CellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsPicturesApi : ICellsPicturesApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPicturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPicturesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsPicturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPicturesApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPicturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPicturesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsPicturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPicturesApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPicturesDeleteWorksheetPicture (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPicturesDeleteWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPicturesDeleteWorksheetPictureWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPicturesDeleteWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo(name, sheetName, pictureIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPicturesDeleteWorksheetPictures (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPicturesDeleteWorksheetPicturesWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPicturesDeleteWorksheetPicturesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPicturesDeleteWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesDeleteWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsPicturesGetWorksheetPicture (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsPicturesGetWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, format, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsPicturesGetWorksheetPictureWithHttpInfo (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsPicturesApi->CellsPicturesGetWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsPicturesGetWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsPicturesGetWorksheetPictureAsyncWithHttpInfo(name, sheetName, pictureIndex, format, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsPicturesGetWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsPicturesApi->CellsPicturesGetWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PicturesResponse</returns>
        public PicturesResponse CellsPicturesGetWorksheetPictures (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = CellsPicturesGetWorksheetPicturesWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        public ApiResponse< PicturesResponse > CellsPicturesGetWorksheetPicturesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesGetWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesGetWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PicturesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        public async System.Threading.Tasks.Task<PicturesResponse> CellsPicturesGetWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = await CellsPicturesGetWorksheetPicturesAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> CellsPicturesGetWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesGetWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesGetWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PicturesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PictureResponse</returns>
        public PictureResponse CellsPicturesPostWorksheetPicture (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null)
        {
             ApiResponse<PictureResponse> localVarResponse = CellsPicturesPostWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, picture, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        public ApiResponse< PictureResponse > CellsPicturesPostWorksheetPictureWithHttpInfo (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsPicturesApi->CellsPicturesPostWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPostWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PictureResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PictureResponse</returns>
        public async System.Threading.Tasks.Task<PictureResponse> CellsPicturesPostWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null)
        {
             ApiResponse<PictureResponse> localVarResponse = await CellsPicturesPostWorksheetPictureAsyncWithHttpInfo(name, sheetName, pictureIndex, picture, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PictureResponse>> CellsPicturesPostWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsPicturesApi->CellsPicturesPostWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPostWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PictureResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PicturesResponse</returns>
        public PicturesResponse CellsPicturesPutWorksheetAddPicture (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = CellsPicturesPutWorksheetAddPictureWithHttpInfo(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        public ApiResponse< PicturesResponse > CellsPicturesPutWorksheetAddPictureWithHttpInfo (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesPutWorksheetAddPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesPutWorksheetAddPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (picturePath != null) localVarQueryParams.Add("picturePath", Configuration.ApiClient.ParameterToString(picturePath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPutWorksheetAddPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PicturesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        public async System.Threading.Tasks.Task<PicturesResponse> CellsPicturesPutWorksheetAddPictureAsync (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = await CellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> CellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPicturesApi->CellsPicturesPutWorksheetAddPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPicturesApi->CellsPicturesPutWorksheetAddPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (picturePath != null) localVarQueryParams.Add("picturePath", Configuration.ApiClient.ParameterToString(picturePath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPutWorksheetAddPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PicturesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

    }
}
