/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsShapesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsShapesDeleteWorksheetShape (string name, string sheetName, int? shapeindex, string folder = null);

        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsShapesDeleteWorksheetShapeWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null);
        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsShapesDeleteWorksheetShapes (string name, string sheetName, string folder = null);

        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsShapesDeleteWorksheetShapesWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ShapeResponse</returns>
        ShapeResponse CellsShapesGetWorksheetShape (string name, string sheetName, int? shapeindex, string folder = null);

        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ShapeResponse</returns>
        ApiResponse<ShapeResponse> CellsShapesGetWorksheetShapeWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null);
        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ShapesResponse</returns>
        ShapesResponse CellsShapesGetWorksheetShapes (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ShapesResponse</returns>
        ApiResponse<ShapesResponse> CellsShapesGetWorksheetShapesWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsShapesPostWorksheetShape (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsShapesPostWorksheetShapeWithHttpInfo (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null);
        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ShapeResponse</returns>
        ShapeResponse CellsShapesPutWorksheetShape (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null);

        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ShapeResponse</returns>
        ApiResponse<ShapeResponse> CellsShapesPutWorksheetShapeWithHttpInfo (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsShapesDeleteWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null);

        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsShapesDeleteWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null);
        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsShapesDeleteWorksheetShapesAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsShapesDeleteWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ShapeResponse</returns>
        System.Threading.Tasks.Task<ShapeResponse> CellsShapesGetWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null);

        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ShapeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShapeResponse>> CellsShapesGetWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null);
        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ShapesResponse</returns>
        System.Threading.Tasks.Task<ShapesResponse> CellsShapesGetWorksheetShapesAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ShapesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShapesResponse>> CellsShapesGetWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsShapesPostWorksheetShapeAsync (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsShapesPostWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null);
        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ShapeResponse</returns>
        System.Threading.Tasks.Task<ShapeResponse> CellsShapesPutWorksheetShapeAsync (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null);

        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ShapeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShapeResponse>> CellsShapesPutWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsShapesApi : ICellsShapesApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsShapesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsShapesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsShapesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsShapesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsShapesDeleteWorksheetShape (string name, string sheetName, int? shapeindex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsShapesDeleteWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsShapesDeleteWorksheetShapeWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsShapesApi->CellsShapesDeleteWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsShapesDeleteWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsShapesDeleteWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeindex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsShapesDeleteWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsShapesApi->CellsShapesDeleteWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsShapesDeleteWorksheetShapes (string name, string sheetName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsShapesDeleteWorksheetShapesWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsShapesDeleteWorksheetShapesWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesDeleteWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesDeleteWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsShapesDeleteWorksheetShapesAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsShapesDeleteWorksheetShapesAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsShapesDeleteWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesDeleteWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesDeleteWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ShapeResponse</returns>
        public ShapeResponse CellsShapesGetWorksheetShape (string name, string sheetName, int? shapeindex, string folder = null)
        {
             ApiResponse<ShapeResponse> localVarResponse = CellsShapesGetWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ShapeResponse</returns>
        public ApiResponse< ShapeResponse > CellsShapesGetWorksheetShapeWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsShapesApi->CellsShapesGetWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapeResponse)));
        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ShapeResponse</returns>
        public async System.Threading.Tasks.Task<ShapeResponse> CellsShapesGetWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null)
        {
             ApiResponse<ShapeResponse> localVarResponse = await CellsShapesGetWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeindex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ShapeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShapeResponse>> CellsShapesGetWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsShapesApi->CellsShapesGetWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapeResponse)));
        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ShapesResponse</returns>
        public ShapesResponse CellsShapesGetWorksheetShapes (string name, string sheetName, string folder = null)
        {
             ApiResponse<ShapesResponse> localVarResponse = CellsShapesGetWorksheetShapesWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ShapesResponse</returns>
        public ApiResponse< ShapesResponse > CellsShapesGetWorksheetShapesWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesGetWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesGetWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapesResponse)));
        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ShapesResponse</returns>
        public async System.Threading.Tasks.Task<ShapesResponse> CellsShapesGetWorksheetShapesAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<ShapesResponse> localVarResponse = await CellsShapesGetWorksheetShapesAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ShapesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShapesResponse>> CellsShapesGetWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesGetWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesGetWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapesResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsShapesPostWorksheetShape (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsShapesPostWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, dto, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsShapesPostWorksheetShapeWithHttpInfo (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsShapesApi->CellsShapesPostWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (dto != null && dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsShapesPostWorksheetShapeAsync (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsShapesPostWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeindex, dto, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsShapesPostWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsShapesApi->CellsShapesPostWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (dto != null && dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ShapeResponse</returns>
        public ShapeResponse CellsShapesPutWorksheetShape (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null)
        {
             ApiResponse<ShapeResponse> localVarResponse = CellsShapesPutWorksheetShapeWithHttpInfo(name, sheetName, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ShapeResponse</returns>
        public ApiResponse< ShapeResponse > CellsShapesPutWorksheetShapeWithHttpInfo (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'drawingType' is set
            if (drawingType == null)
                throw new ApiException(400, "Missing required parameter 'drawingType' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'upperLeftRow' is set
            if (upperLeftRow == null)
                throw new ApiException(400, "Missing required parameter 'upperLeftRow' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'upperLeftColumn' is set
            if (upperLeftColumn == null)
                throw new ApiException(400, "Missing required parameter 'upperLeftColumn' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'left' is set
            if (left == null)
                throw new ApiException(400, "Missing required parameter 'left' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling CellsShapesApi->CellsShapesPutWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (drawingType != null) localVarQueryParams.Add("DrawingType", Configuration.ApiClient.ParameterToString(drawingType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (left != null) localVarQueryParams.Add("left", Configuration.ApiClient.ParameterToString(left)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPutWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapeResponse)));
        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ShapeResponse</returns>
        public async System.Threading.Tasks.Task<ShapeResponse> CellsShapesPutWorksheetShapeAsync (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null)
        {
             ApiResponse<ShapeResponse> localVarResponse = await CellsShapesPutWorksheetShapeAsyncWithHttpInfo(name, sheetName, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="drawingType">shape object type</param>
        /// <param name="upperLeftRow">Upper left row index.</param>
        /// <param name="upperLeftColumn">Upper left column index.</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ShapeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShapeResponse>> CellsShapesPutWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, string drawingType, int? upperLeftRow, int? upperLeftColumn, int? top, int? left, int? width, int? height, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'drawingType' is set
            if (drawingType == null)
                throw new ApiException(400, "Missing required parameter 'drawingType' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'upperLeftRow' is set
            if (upperLeftRow == null)
                throw new ApiException(400, "Missing required parameter 'upperLeftRow' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'upperLeftColumn' is set
            if (upperLeftColumn == null)
                throw new ApiException(400, "Missing required parameter 'upperLeftColumn' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'left' is set
            if (left == null)
                throw new ApiException(400, "Missing required parameter 'left' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling CellsShapesApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling CellsShapesApi->CellsShapesPutWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (drawingType != null) localVarQueryParams.Add("DrawingType", Configuration.ApiClient.ParameterToString(drawingType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (left != null) localVarQueryParams.Add("left", Configuration.ApiClient.ParameterToString(left)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPutWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapeResponse)));
        }

    }
}
