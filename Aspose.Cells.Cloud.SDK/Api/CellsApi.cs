/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        ColumnsResponse CellsDeleteWorksheetColumns (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null);

        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        ApiResponse<ColumnsResponse> CellsDeleteWorksheetColumnsWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null);
        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsDeleteWorksheetRow (string name, string sheetName, int? rowIndex, string folder = null);

        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsDeleteWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null);
        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsDeleteWorksheetRows (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);

        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsDeleteWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);
        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsGetWorksheetCell (string name, string sheetName, string cellOrMethodName, string folder = null);

        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsGetWorksheetCellWithHttpInfo (string name, string sheetName, string cellOrMethodName, string folder = null);
        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>StyleResponse</returns>
        StyleResponse CellsGetWorksheetCellStyle (string name, string sheetName, string cellName, string folder = null);

        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        ApiResponse<StyleResponse> CellsGetWorksheetCellStyleWithHttpInfo (string name, string sheetName, string cellName, string folder = null);
        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>CellsResponse</returns>
        CellsResponse CellsGetWorksheetCells (string name, string sheetName, int? offest = null, int? count = null, string folder = null);

        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>ApiResponse of CellsResponse</returns>
        ApiResponse<CellsResponse> CellsGetWorksheetCellsWithHttpInfo (string name, string sheetName, int? offest = null, int? count = null, string folder = null);
        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnResponse</returns>
        ColumnResponse CellsGetWorksheetColumn (string name, string sheetName, int? columnIndex, string folder = null);

        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnResponse</returns>
        ApiResponse<ColumnResponse> CellsGetWorksheetColumnWithHttpInfo (string name, string sheetName, int? columnIndex, string folder = null);
        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        ColumnsResponse CellsGetWorksheetColumns (string name, string sheetName, string folder = null);

        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        ApiResponse<ColumnsResponse> CellsGetWorksheetColumnsWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>RowResponse</returns>
        RowResponse CellsGetWorksheetRow (string name, string sheetName, int? rowIndex, string folder = null);

        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        ApiResponse<RowResponse> CellsGetWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null);
        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>RowsResponse</returns>
        RowsResponse CellsGetWorksheetRows (string name, string sheetName, string folder = null);

        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>ApiResponse of RowsResponse</returns>
        ApiResponse<RowsResponse> CellsGetWorksheetRowsWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostCellCalculate (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null);

        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostCellCalculateWithHttpInfo (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null);
        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostCellCharacters (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null);

        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostCellCharactersWithHttpInfo (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostClearContents (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostClearContentsWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostClearFormats (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostClearFormatsWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);
        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostColumnStyle (string name, string sheetName, int? columnIndex, Style style = null, string folder = null);

        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostColumnStyleWithHttpInfo (string name, string sheetName, int? columnIndex, Style style = null, string folder = null);
        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostCopyCellIntoCell (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null);

        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostCopyCellIntoCellWithHttpInfo (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null);
        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostCopyWorksheetColumns (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null);

        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostCopyWorksheetColumnsWithHttpInfo (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null);
        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostCopyWorksheetRows (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null);

        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostCopyWorksheetRowsWithHttpInfo (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null);
        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostGroupWorksheetColumns (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);

        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostGroupWorksheetColumnsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);
        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostGroupWorksheetRows (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);

        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostGroupWorksheetRowsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);
        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostHideWorksheetColumns (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null);

        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostHideWorksheetColumnsWithHttpInfo (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null);
        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostHideWorksheetRows (string name, string sheetName, int? startrow, int? totalRows, string folder = null);

        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostHideWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, string folder = null);
        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostRowStyle (string name, string sheetName, int? rowIndex, Style style = null, string folder = null);

        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostRowStyleWithHttpInfo (string name, string sheetName, int? rowIndex, Style style = null, string folder = null);
        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>CellResponse</returns>
        CellResponse CellsPostSetCellHtmlString (string name, string sheetName, string cellName, string folder = null);

        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of CellResponse</returns>
        ApiResponse<CellResponse> CellsPostSetCellHtmlStringWithHttpInfo (string name, string sheetName, string cellName, string folder = null);
        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostSetCellRangeValue (string name, string sheetName, string cellarea, string value, string type, string folder = null);

        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostSetCellRangeValueWithHttpInfo (string name, string sheetName, string cellarea, string value, string type, string folder = null);
        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnResponse</returns>
        ColumnResponse CellsPostSetWorksheetColumnWidth (string name, string sheetName, int? columnIndex, double? width, string folder = null);

        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnResponse</returns>
        ApiResponse<ColumnResponse> CellsPostSetWorksheetColumnWidthWithHttpInfo (string name, string sheetName, int? columnIndex, double? width, string folder = null);
        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostUngroupWorksheetColumns (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null);

        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostUngroupWorksheetColumnsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null);
        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostUngroupWorksheetRows (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null);

        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostUngroupWorksheetRowsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null);
        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostUnhideWorksheetColumns (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null);

        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostUnhideWorksheetColumnsWithHttpInfo (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null);
        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostUnhideWorksheetRows (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null);

        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostUnhideWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null);
        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>StyleResponse</returns>
        StyleResponse CellsPostUpdateWorksheetCellStyle (string name, string sheetName, string cellName, Style style = null, string folder = null);

        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        ApiResponse<StyleResponse> CellsPostUpdateWorksheetCellStyleWithHttpInfo (string name, string sheetName, string cellName, Style style = null, string folder = null);
        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostUpdateWorksheetRangeStyle (string name, string sheetName, string range, Style style = null, string folder = null);

        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostUpdateWorksheetRangeStyleWithHttpInfo (string name, string sheetName, string range, Style style = null, string folder = null);
        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>RowResponse</returns>
        RowResponse CellsPostUpdateWorksheetRow (string name, string sheetName, int? rowIndex, double? height = null, string folder = null);

        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        ApiResponse<RowResponse> CellsPostUpdateWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, double? height = null, string folder = null);
        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CellResponse</returns>
        CellResponse CellsPostWorksheetCellSetValue (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null);

        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CellResponse</returns>
        ApiResponse<CellResponse> CellsPostWorksheetCellSetValueWithHttpInfo (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null);
        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostWorksheetMerge (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);

        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostWorksheetMergeWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);
        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPostWorksheetUnmerge (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);

        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPostWorksheetUnmergeWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);
        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        ColumnsResponse CellsPutInsertWorksheetColumns (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null);

        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        ApiResponse<ColumnsResponse> CellsPutInsertWorksheetColumnsWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null);
        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>RowResponse</returns>
        RowResponse CellsPutInsertWorksheetRow (string name, string sheetName, int? rowIndex, string folder = null);

        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        ApiResponse<RowResponse> CellsPutInsertWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null);
        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPutInsertWorksheetRows (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);

        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPutInsertWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        System.Threading.Tasks.Task<ColumnsResponse> CellsDeleteWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null);

        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsDeleteWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null);
        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsDeleteWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null);

        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsDeleteWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null);
        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsDeleteWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);

        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsDeleteWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);
        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsGetWorksheetCellAsync (string name, string sheetName, string cellOrMethodName, string folder = null);

        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsGetWorksheetCellAsyncWithHttpInfo (string name, string sheetName, string cellOrMethodName, string folder = null);
        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        System.Threading.Tasks.Task<StyleResponse> CellsGetWorksheetCellStyleAsync (string name, string sheetName, string cellName, string folder = null);

        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsGetWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null);
        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>Task of CellsResponse</returns>
        System.Threading.Tasks.Task<CellsResponse> CellsGetWorksheetCellsAsync (string name, string sheetName, int? offest = null, int? count = null, string folder = null);

        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsResponse>> CellsGetWorksheetCellsAsyncWithHttpInfo (string name, string sheetName, int? offest = null, int? count = null, string folder = null);
        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnResponse</returns>
        System.Threading.Tasks.Task<ColumnResponse> CellsGetWorksheetColumnAsync (string name, string sheetName, int? columnIndex, string folder = null);

        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnResponse>> CellsGetWorksheetColumnAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, string folder = null);
        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        System.Threading.Tasks.Task<ColumnsResponse> CellsGetWorksheetColumnsAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsGetWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        System.Threading.Tasks.Task<RowResponse> CellsGetWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null);

        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsGetWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null);
        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of RowsResponse</returns>
        System.Threading.Tasks.Task<RowsResponse> CellsGetWorksheetRowsAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowsResponse>> CellsGetWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCellCalculateAsync (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null);

        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCellCalculateAsyncWithHttpInfo (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null);
        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCellCharactersAsync (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null);

        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCellCharactersAsyncWithHttpInfo (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostClearContentsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostClearContentsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostClearFormatsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostClearFormatsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null);
        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostColumnStyleAsync (string name, string sheetName, int? columnIndex, Style style = null, string folder = null);

        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostColumnStyleAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, Style style = null, string folder = null);
        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCopyCellIntoCellAsync (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null);

        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCopyCellIntoCellAsyncWithHttpInfo (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null);
        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCopyWorksheetColumnsAsync (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null);

        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCopyWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null);
        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCopyWorksheetRowsAsync (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null);

        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCopyWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null);
        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostGroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);

        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostGroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);
        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostGroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);

        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostGroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null);
        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostHideWorksheetColumnsAsync (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null);

        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostHideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null);
        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostHideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, string folder = null);

        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostHideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, string folder = null);
        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostRowStyleAsync (string name, string sheetName, int? rowIndex, Style style = null, string folder = null);

        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostRowStyleAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, Style style = null, string folder = null);
        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of CellResponse</returns>
        System.Threading.Tasks.Task<CellResponse> CellsPostSetCellHtmlStringAsync (string name, string sheetName, string cellName, string folder = null);

        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (CellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellResponse>> CellsPostSetCellHtmlStringAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null);
        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostSetCellRangeValueAsync (string name, string sheetName, string cellarea, string value, string type, string folder = null);

        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostSetCellRangeValueAsyncWithHttpInfo (string name, string sheetName, string cellarea, string value, string type, string folder = null);
        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnResponse</returns>
        System.Threading.Tasks.Task<ColumnResponse> CellsPostSetWorksheetColumnWidthAsync (string name, string sheetName, int? columnIndex, double? width, string folder = null);

        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnResponse>> CellsPostSetWorksheetColumnWidthAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, double? width, string folder = null);
        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUngroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null);

        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUngroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null);
        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUngroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null);

        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUngroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null);
        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUnhideWorksheetColumnsAsync (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null);

        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUnhideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null);
        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUnhideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null);

        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUnhideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null);
        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        System.Threading.Tasks.Task<StyleResponse> CellsPostUpdateWorksheetCellStyleAsync (string name, string sheetName, string cellName, Style style = null, string folder = null);

        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, Style style = null, string folder = null);
        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUpdateWorksheetRangeStyleAsync (string name, string sheetName, string range, Style style = null, string folder = null);

        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo (string name, string sheetName, string range, Style style = null, string folder = null);
        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        System.Threading.Tasks.Task<RowResponse> CellsPostUpdateWorksheetRowAsync (string name, string sheetName, int? rowIndex, double? height = null, string folder = null);

        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsPostUpdateWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, double? height = null, string folder = null);
        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CellResponse</returns>
        System.Threading.Tasks.Task<CellResponse> CellsPostWorksheetCellSetValueAsync (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null);

        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellResponse>> CellsPostWorksheetCellSetValueAsyncWithHttpInfo (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null);
        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostWorksheetMergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);

        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostWorksheetMergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);
        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPostWorksheetUnmergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);

        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostWorksheetUnmergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null);
        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        System.Threading.Tasks.Task<ColumnsResponse> CellsPutInsertWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null);

        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsPutInsertWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null);
        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        System.Threading.Tasks.Task<RowResponse> CellsPutInsertWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null);

        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsPutInsertWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null);
        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPutInsertWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);

        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPutInsertWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsApi : ICellsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        public ColumnsResponse CellsDeleteWorksheetColumns (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = CellsDeleteWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        public ApiResponse< ColumnsResponse > CellsDeleteWorksheetColumnsWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'updateReference' is set
            if (updateReference == null)
                throw new ApiException(400, "Missing required parameter 'updateReference' when calling CellsApi->CellsDeleteWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        public async System.Threading.Tasks.Task<ColumnsResponse> CellsDeleteWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = await CellsDeleteWorksheetColumnsAsyncWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsDeleteWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'updateReference' is set
            if (updateReference == null)
                throw new ApiException(400, "Missing required parameter 'updateReference' when calling CellsApi->CellsDeleteWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsDeleteWorksheetRow (string name, string sheetName, int? rowIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsDeleteWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsDeleteWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsDeleteWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsDeleteWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsDeleteWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsDeleteWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsDeleteWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsDeleteWorksheetRows (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsDeleteWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsDeleteWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsDeleteWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsDeleteWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsDeleteWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsDeleteWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsDeleteWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsGetWorksheetCell (string name, string sheetName, string cellOrMethodName, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsGetWorksheetCellWithHttpInfo(name, sheetName, cellOrMethodName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsGetWorksheetCellWithHttpInfo (string name, string sheetName, string cellOrMethodName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'cellOrMethodName' is set
            if (cellOrMethodName == null)
                throw new ApiException(400, "Missing required parameter 'cellOrMethodName' when calling CellsApi->CellsGetWorksheetCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellOrMethodName != null) localVarPathParams.Add("cellOrMethodName", Configuration.ApiClient.ParameterToString(cellOrMethodName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsGetWorksheetCellAsync (string name, string sheetName, string cellOrMethodName, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsGetWorksheetCellAsyncWithHttpInfo(name, sheetName, cellOrMethodName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsGetWorksheetCellAsyncWithHttpInfo (string name, string sheetName, string cellOrMethodName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'cellOrMethodName' is set
            if (cellOrMethodName == null)
                throw new ApiException(400, "Missing required parameter 'cellOrMethodName' when calling CellsApi->CellsGetWorksheetCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellOrMethodName != null) localVarPathParams.Add("cellOrMethodName", Configuration.ApiClient.ParameterToString(cellOrMethodName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>StyleResponse</returns>
        public StyleResponse CellsGetWorksheetCellStyle (string name, string sheetName, string cellName, string folder = null)
        {
             ApiResponse<StyleResponse> localVarResponse = CellsGetWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        public ApiResponse< StyleResponse > CellsGetWorksheetCellStyleWithHttpInfo (string name, string sheetName, string cellName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsGetWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        public async System.Threading.Tasks.Task<StyleResponse> CellsGetWorksheetCellStyleAsync (string name, string sheetName, string cellName, string folder = null)
        {
             ApiResponse<StyleResponse> localVarResponse = await CellsGetWorksheetCellStyleAsyncWithHttpInfo(name, sheetName, cellName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsGetWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsGetWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>CellsResponse</returns>
        public CellsResponse CellsGetWorksheetCells (string name, string sheetName, int? offest = null, int? count = null, string folder = null)
        {
             ApiResponse<CellsResponse> localVarResponse = CellsGetWorksheetCellsWithHttpInfo(name, sheetName, offest, count, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>ApiResponse of CellsResponse</returns>
        public ApiResponse< CellsResponse > CellsGetWorksheetCellsWithHttpInfo (string name, string sheetName, int? offest = null, int? count = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCells");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCells");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (offest != null) localVarQueryParams.Add("offest", Configuration.ApiClient.ParameterToString(offest)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsResponse)));
        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>Task of CellsResponse</returns>
        public async System.Threading.Tasks.Task<CellsResponse> CellsGetWorksheetCellsAsync (string name, string sheetName, int? offest = null, int? count = null, string folder = null)
        {
             ApiResponse<CellsResponse> localVarResponse = await CellsGetWorksheetCellsAsyncWithHttpInfo(name, sheetName, offest, count, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsResponse>> CellsGetWorksheetCellsAsyncWithHttpInfo (string name, string sheetName, int? offest = null, int? count = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCells");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCells");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (offest != null) localVarQueryParams.Add("offest", Configuration.ApiClient.ParameterToString(offest)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsResponse)));
        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnResponse</returns>
        public ColumnResponse CellsGetWorksheetColumn (string name, string sheetName, int? columnIndex, string folder = null)
        {
             ApiResponse<ColumnResponse> localVarResponse = CellsGetWorksheetColumnWithHttpInfo(name, sheetName, columnIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnResponse</returns>
        public ApiResponse< ColumnResponse > CellsGetWorksheetColumnWithHttpInfo (string name, string sheetName, int? columnIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsGetWorksheetColumn");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnResponse)));
        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnResponse</returns>
        public async System.Threading.Tasks.Task<ColumnResponse> CellsGetWorksheetColumnAsync (string name, string sheetName, int? columnIndex, string folder = null)
        {
             ApiResponse<ColumnResponse> localVarResponse = await CellsGetWorksheetColumnAsyncWithHttpInfo(name, sheetName, columnIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnResponse>> CellsGetWorksheetColumnAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsGetWorksheetColumn");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnResponse)));
        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        public ColumnsResponse CellsGetWorksheetColumns (string name, string sheetName, string folder = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = CellsGetWorksheetColumnsWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        public ApiResponse< ColumnsResponse > CellsGetWorksheetColumnsWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        public async System.Threading.Tasks.Task<ColumnsResponse> CellsGetWorksheetColumnsAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = await CellsGetWorksheetColumnsAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsGetWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>RowResponse</returns>
        public RowResponse CellsGetWorksheetRow (string name, string sheetName, int? rowIndex, string folder = null)
        {
             ApiResponse<RowResponse> localVarResponse = CellsGetWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        public ApiResponse< RowResponse > CellsGetWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsGetWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        public async System.Threading.Tasks.Task<RowResponse> CellsGetWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null)
        {
             ApiResponse<RowResponse> localVarResponse = await CellsGetWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsGetWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsGetWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>RowsResponse</returns>
        public RowsResponse CellsGetWorksheetRows (string name, string sheetName, string folder = null)
        {
             ApiResponse<RowsResponse> localVarResponse = CellsGetWorksheetRowsWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>ApiResponse of RowsResponse</returns>
        public ApiResponse< RowsResponse > CellsGetWorksheetRowsWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowsResponse)));
        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of RowsResponse</returns>
        public async System.Threading.Tasks.Task<RowsResponse> CellsGetWorksheetRowsAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<RowsResponse> localVarResponse = await CellsGetWorksheetRowsAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowsResponse>> CellsGetWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowsResponse)));
        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostCellCalculate (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostCellCalculateWithHttpInfo(name, sheetName, cellName, options, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostCellCalculateWithHttpInfo (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCellCalculateAsync (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostCellCalculateAsyncWithHttpInfo(name, sheetName, cellName, options, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCellCalculateAsyncWithHttpInfo (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostCellCharacters (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostCellCharactersWithHttpInfo(name, sheetName, cellName, options, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostCellCharactersWithHttpInfo (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCharacters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCharacters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCellCharactersAsync (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostCellCharactersAsyncWithHttpInfo(name, sheetName, cellName, options, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCellCharactersAsyncWithHttpInfo (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCharacters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCharacters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostClearContents (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostClearContentsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostClearContentsWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearContents");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearContents");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostClearContentsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostClearContentsAsyncWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostClearContentsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearContents");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearContents");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostClearFormats (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostClearFormatsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostClearFormatsWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearFormats");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearFormats");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearformats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearFormats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostClearFormatsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostClearFormatsAsyncWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostClearFormatsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearFormats");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearFormats");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearformats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearFormats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostColumnStyle (string name, string sheetName, int? columnIndex, Style style = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostColumnStyleWithHttpInfo(name, sheetName, columnIndex, style, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostColumnStyleWithHttpInfo (string name, string sheetName, int? columnIndex, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostColumnStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostColumnStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostColumnStyleAsync (string name, string sheetName, int? columnIndex, Style style = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostColumnStyleAsyncWithHttpInfo(name, sheetName, columnIndex, style, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostColumnStyleAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostColumnStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostColumnStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostCopyCellIntoCell (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostCopyCellIntoCellWithHttpInfo(name, destCellName, sheetName, worksheet, cellname, row, column, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostCopyCellIntoCellWithHttpInfo (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'destCellName' is set
            if (destCellName == null)
                throw new ApiException(400, "Missing required parameter 'destCellName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'worksheet' is set
            if (worksheet == null)
                throw new ApiException(400, "Missing required parameter 'worksheet' when calling CellsApi->CellsPostCopyCellIntoCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destCellName != null) localVarPathParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyCellIntoCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCopyCellIntoCellAsync (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostCopyCellIntoCellAsyncWithHttpInfo(name, destCellName, sheetName, worksheet, cellname, row, column, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCopyCellIntoCellAsyncWithHttpInfo (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'destCellName' is set
            if (destCellName == null)
                throw new ApiException(400, "Missing required parameter 'destCellName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'worksheet' is set
            if (worksheet == null)
                throw new ApiException(400, "Missing required parameter 'worksheet' when calling CellsApi->CellsPostCopyCellIntoCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destCellName != null) localVarPathParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyCellIntoCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostCopyWorksheetColumns (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostCopyWorksheetColumnsWithHttpInfo(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostCopyWorksheetColumnsWithHttpInfo (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sourceColumnIndex' is set
            if (sourceColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'destinationColumnIndex' is set
            if (destinationColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'columnNumber' is set
            if (columnNumber == null)
                throw new ApiException(400, "Missing required parameter 'columnNumber' when calling CellsApi->CellsPostCopyWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceColumnIndex != null) localVarQueryParams.Add("sourceColumnIndex", Configuration.ApiClient.ParameterToString(sourceColumnIndex)); // query parameter
            if (destinationColumnIndex != null) localVarQueryParams.Add("destinationColumnIndex", Configuration.ApiClient.ParameterToString(destinationColumnIndex)); // query parameter
            if (columnNumber != null) localVarQueryParams.Add("columnNumber", Configuration.ApiClient.ParameterToString(columnNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCopyWorksheetColumnsAsync (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostCopyWorksheetColumnsAsyncWithHttpInfo(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional, default to )</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCopyWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sourceColumnIndex' is set
            if (sourceColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'destinationColumnIndex' is set
            if (destinationColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'columnNumber' is set
            if (columnNumber == null)
                throw new ApiException(400, "Missing required parameter 'columnNumber' when calling CellsApi->CellsPostCopyWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceColumnIndex != null) localVarQueryParams.Add("sourceColumnIndex", Configuration.ApiClient.ParameterToString(sourceColumnIndex)); // query parameter
            if (destinationColumnIndex != null) localVarQueryParams.Add("destinationColumnIndex", Configuration.ApiClient.ParameterToString(destinationColumnIndex)); // query parameter
            if (columnNumber != null) localVarQueryParams.Add("columnNumber", Configuration.ApiClient.ParameterToString(columnNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostCopyWorksheetRows (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostCopyWorksheetRowsWithHttpInfo(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostCopyWorksheetRowsWithHttpInfo (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sourceRowIndex' is set
            if (sourceRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'destinationRowIndex' is set
            if (destinationRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'rowNumber' is set
            if (rowNumber == null)
                throw new ApiException(400, "Missing required parameter 'rowNumber' when calling CellsApi->CellsPostCopyWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceRowIndex != null) localVarQueryParams.Add("sourceRowIndex", Configuration.ApiClient.ParameterToString(sourceRowIndex)); // query parameter
            if (destinationRowIndex != null) localVarQueryParams.Add("destinationRowIndex", Configuration.ApiClient.ParameterToString(destinationRowIndex)); // query parameter
            if (rowNumber != null) localVarQueryParams.Add("rowNumber", Configuration.ApiClient.ParameterToString(rowNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostCopyWorksheetRowsAsync (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostCopyWorksheetRowsAsyncWithHttpInfo(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostCopyWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sourceRowIndex' is set
            if (sourceRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'destinationRowIndex' is set
            if (destinationRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'rowNumber' is set
            if (rowNumber == null)
                throw new ApiException(400, "Missing required parameter 'rowNumber' when calling CellsApi->CellsPostCopyWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceRowIndex != null) localVarQueryParams.Add("sourceRowIndex", Configuration.ApiClient.ParameterToString(sourceRowIndex)); // query parameter
            if (destinationRowIndex != null) localVarQueryParams.Add("destinationRowIndex", Configuration.ApiClient.ParameterToString(destinationRowIndex)); // query parameter
            if (rowNumber != null) localVarQueryParams.Add("rowNumber", Configuration.ApiClient.ParameterToString(rowNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostGroupWorksheetColumns (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostGroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostGroupWorksheetColumnsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostGroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostGroupWorksheetColumnsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostGroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostGroupWorksheetRows (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostGroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostGroupWorksheetRowsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostGroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostGroupWorksheetRowsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostGroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostHideWorksheetColumns (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostHideWorksheetColumnsWithHttpInfo(name, sheetName, startColumn, totalColumns, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostHideWorksheetColumnsWithHttpInfo (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostHideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostHideWorksheetColumnsAsync (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostHideWorksheetColumnsAsyncWithHttpInfo(name, sheetName, startColumn, totalColumns, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostHideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostHideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostHideWorksheetRows (string name, string sheetName, int? startrow, int? totalRows, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostHideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostHideWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostHideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostHideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostHideWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostHideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostHideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostRowStyle (string name, string sheetName, int? rowIndex, Style style = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostRowStyleWithHttpInfo(name, sheetName, rowIndex, style, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostRowStyleWithHttpInfo (string name, string sheetName, int? rowIndex, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostRowStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostRowStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostRowStyleAsync (string name, string sheetName, int? rowIndex, Style style = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostRowStyleAsyncWithHttpInfo(name, sheetName, rowIndex, style, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostRowStyleAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostRowStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostRowStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>CellResponse</returns>
        public CellResponse CellsPostSetCellHtmlString (string name, string sheetName, string cellName, string folder = null)
        {
             ApiResponse<CellResponse> localVarResponse = CellsPostSetCellHtmlStringWithHttpInfo(name, sheetName, cellName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of CellResponse</returns>
        public ApiResponse< CellResponse > CellsPostSetCellHtmlStringWithHttpInfo (string name, string sheetName, string cellName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostSetCellHtmlString");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellHtmlString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellResponse)));
        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of CellResponse</returns>
        public async System.Threading.Tasks.Task<CellResponse> CellsPostSetCellHtmlStringAsync (string name, string sheetName, string cellName, string folder = null)
        {
             ApiResponse<CellResponse> localVarResponse = await CellsPostSetCellHtmlStringAsyncWithHttpInfo(name, sheetName, cellName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (CellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellResponse>> CellsPostSetCellHtmlStringAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostSetCellHtmlString");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellHtmlString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellResponse)));
        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostSetCellRangeValue (string name, string sheetName, string cellarea, string value, string type, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostSetCellRangeValueWithHttpInfo(name, sheetName, cellarea, value, type, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostSetCellRangeValueWithHttpInfo (string name, string sheetName, string cellarea, string value, string type, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'cellarea' is set
            if (cellarea == null)
                throw new ApiException(400, "Missing required parameter 'cellarea' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsPostSetCellRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellarea != null) localVarQueryParams.Add("cellarea", Configuration.ApiClient.ParameterToString(cellarea)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostSetCellRangeValueAsync (string name, string sheetName, string cellarea, string value, string type, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostSetCellRangeValueAsyncWithHttpInfo(name, sheetName, cellarea, value, type, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostSetCellRangeValueAsyncWithHttpInfo (string name, string sheetName, string cellarea, string value, string type, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'cellarea' is set
            if (cellarea == null)
                throw new ApiException(400, "Missing required parameter 'cellarea' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsPostSetCellRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellarea != null) localVarQueryParams.Add("cellarea", Configuration.ApiClient.ParameterToString(cellarea)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnResponse</returns>
        public ColumnResponse CellsPostSetWorksheetColumnWidth (string name, string sheetName, int? columnIndex, double? width, string folder = null)
        {
             ApiResponse<ColumnResponse> localVarResponse = CellsPostSetWorksheetColumnWidthWithHttpInfo(name, sheetName, columnIndex, width, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnResponse</returns>
        public ApiResponse< ColumnResponse > CellsPostSetWorksheetColumnWidthWithHttpInfo (string name, string sheetName, int? columnIndex, double? width, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling CellsApi->CellsPostSetWorksheetColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetWorksheetColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnResponse)));
        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnResponse</returns>
        public async System.Threading.Tasks.Task<ColumnResponse> CellsPostSetWorksheetColumnWidthAsync (string name, string sheetName, int? columnIndex, double? width, string folder = null)
        {
             ApiResponse<ColumnResponse> localVarResponse = await CellsPostSetWorksheetColumnWidthAsyncWithHttpInfo(name, sheetName, columnIndex, width, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnResponse>> CellsPostSetWorksheetColumnWidthAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, double? width, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling CellsApi->CellsPostSetWorksheetColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetWorksheetColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnResponse)));
        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostUngroupWorksheetColumns (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostUngroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostUngroupWorksheetColumnsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUngroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostUngroupWorksheetColumnsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUngroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostUngroupWorksheetRows (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostUngroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, isAll, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostUngroupWorksheetRowsWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (isAll != null) localVarQueryParams.Add("isAll", Configuration.ApiClient.ParameterToString(isAll)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUngroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostUngroupWorksheetRowsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, isAll, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUngroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (isAll != null) localVarQueryParams.Add("isAll", Configuration.ApiClient.ParameterToString(isAll)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostUnhideWorksheetColumns (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostUnhideWorksheetColumnsWithHttpInfo(name, sheetName, startcolumn, totalColumns, width, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostUnhideWorksheetColumnsWithHttpInfo (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'startcolumn' is set
            if (startcolumn == null)
                throw new ApiException(400, "Missing required parameter 'startcolumn' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostUnhideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startcolumn != null) localVarQueryParams.Add("startcolumn", Configuration.ApiClient.ParameterToString(startcolumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUnhideWorksheetColumnsAsync (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostUnhideWorksheetColumnsAsyncWithHttpInfo(name, sheetName, startcolumn, totalColumns, width, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUnhideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'startcolumn' is set
            if (startcolumn == null)
                throw new ApiException(400, "Missing required parameter 'startcolumn' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostUnhideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startcolumn != null) localVarQueryParams.Add("startcolumn", Configuration.ApiClient.ParameterToString(startcolumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostUnhideWorksheetRows (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostUnhideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostUnhideWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostUnhideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUnhideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostUnhideWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUnhideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostUnhideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>StyleResponse</returns>
        public StyleResponse CellsPostUpdateWorksheetCellStyle (string name, string sheetName, string cellName, Style style = null, string folder = null)
        {
             ApiResponse<StyleResponse> localVarResponse = CellsPostUpdateWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, style, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        public ApiResponse< StyleResponse > CellsPostUpdateWorksheetCellStyleWithHttpInfo (string name, string sheetName, string cellName, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        public async System.Threading.Tasks.Task<StyleResponse> CellsPostUpdateWorksheetCellStyleAsync (string name, string sheetName, string cellName, Style style = null, string folder = null)
        {
             ApiResponse<StyleResponse> localVarResponse = await CellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo(name, sheetName, cellName, style, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostUpdateWorksheetRangeStyle (string name, string sheetName, string range, Style style = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostUpdateWorksheetRangeStyleWithHttpInfo(name, sheetName, range, style, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostUpdateWorksheetRangeStyleWithHttpInfo (string name, string sheetName, string range, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostUpdateWorksheetRangeStyleAsync (string name, string sheetName, string range, Style style = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo(name, sheetName, range, style, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo (string name, string sheetName, string range, Style style = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>RowResponse</returns>
        public RowResponse CellsPostUpdateWorksheetRow (string name, string sheetName, int? rowIndex, double? height = null, string folder = null)
        {
             ApiResponse<RowResponse> localVarResponse = CellsPostUpdateWorksheetRowWithHttpInfo(name, sheetName, rowIndex, height, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        public ApiResponse< RowResponse > CellsPostUpdateWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, double? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostUpdateWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        public async System.Threading.Tasks.Task<RowResponse> CellsPostUpdateWorksheetRowAsync (string name, string sheetName, int? rowIndex, double? height = null, string folder = null)
        {
             ApiResponse<RowResponse> localVarResponse = await CellsPostUpdateWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, height, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsPostUpdateWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, double? height = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostUpdateWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>CellResponse</returns>
        public CellResponse CellsPostWorksheetCellSetValue (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null)
        {
             ApiResponse<CellResponse> localVarResponse = CellsPostWorksheetCellSetValueWithHttpInfo(name, sheetName, cellName, value, type, formula, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of CellResponse</returns>
        public ApiResponse< CellResponse > CellsPostWorksheetCellSetValueWithHttpInfo (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostWorksheetCellSetValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (formula != null) localVarQueryParams.Add("formula", Configuration.ApiClient.ParameterToString(formula)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetCellSetValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellResponse)));
        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of CellResponse</returns>
        public async System.Threading.Tasks.Task<CellResponse> CellsPostWorksheetCellSetValueAsync (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null)
        {
             ApiResponse<CellResponse> localVarResponse = await CellsPostWorksheetCellSetValueAsyncWithHttpInfo(name, sheetName, cellName, value, type, formula, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (CellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellResponse>> CellsPostWorksheetCellSetValueAsyncWithHttpInfo (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostWorksheetCellSetValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (formula != null) localVarQueryParams.Add("formula", Configuration.ApiClient.ParameterToString(formula)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetCellSetValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellResponse)));
        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostWorksheetMerge (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostWorksheetMergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostWorksheetMergeWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostWorksheetMergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostWorksheetMergeAsyncWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostWorksheetMergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPostWorksheetUnmerge (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPostWorksheetUnmergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPostWorksheetUnmergeWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPostWorksheetUnmergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPostWorksheetUnmergeAsyncWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPostWorksheetUnmergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        public ColumnsResponse CellsPutInsertWorksheetColumns (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = CellsPutInsertWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        public ApiResponse< ColumnsResponse > CellsPutInsertWorksheetColumnsWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsPutInsertWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        public async System.Threading.Tasks.Task<ColumnsResponse> CellsPutInsertWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = await CellsPutInsertWorksheetColumnsAsyncWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsPutInsertWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsPutInsertWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>RowResponse</returns>
        public RowResponse CellsPutInsertWorksheetRow (string name, string sheetName, int? rowIndex, string folder = null)
        {
             ApiResponse<RowResponse> localVarResponse = CellsPutInsertWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        public ApiResponse< RowResponse > CellsPutInsertWorksheetRowWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPutInsertWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        public async System.Threading.Tasks.Task<RowResponse> CellsPutInsertWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null)
        {
             ApiResponse<RowResponse> localVarResponse = await CellsPutInsertWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsPutInsertWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPutInsertWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPutInsertWorksheetRows (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPutInsertWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPutInsertWorksheetRowsWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPutInsertWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPutInsertWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPutInsertWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPutInsertWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPutInsertWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
