/* 
 * <summary>
 *  Copyright (c) 2022 Aspose.Cells Cloud
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterDeleteWorksheetDateFilter(string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null);

        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterDeleteWorksheetFilter(string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null);

        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterDeleteWorksheetFilterWithHttpInfo(string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>AutoFilterResponse</returns>
        AutoFilterResponse CellsAutoFilterGetWorksheetAutoFilter(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of AutoFilterResponse</returns>
        ApiResponse<AutoFilterResponse> CellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPostWorksheetAutoFilterRefresh(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPostWorksheetMatchBlanks(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPostWorksheetMatchNonBlanks(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetColorFilter(string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetColorFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetCustomFilter(string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetDateFilter(string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetDateFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetDynamicFilter(string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetFilter(string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetFilterTop10(string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsAutoFilterPutWorksheetIconFilter(string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsAutoFilterPutWorksheetIconFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get autoshape info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsAutoshapesGetWorksheetAutoshape(string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get autoshape info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsAutoshapesGetWorksheetAutoshapeWithHttpInfo(string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet autoshapes info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>AutoShapesResponse</returns>
        AutoShapesResponse CellsAutoshapesGetWorksheetAutoshapes(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet autoshapes info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of AutoShapesResponse</returns>
        ApiResponse<AutoShapesResponse> CellsAutoshapesGetWorksheetAutoshapesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ChartAreaResponse</returns>
        ChartAreaResponse CellsChartAreaGetChartArea(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ChartAreaResponse</returns>
        ApiResponse<ChartAreaResponse> CellsChartAreaGetChartAreaWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>LineResponse</returns>
        LineResponse CellsChartAreaGetChartAreaBorder(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of LineResponse</returns>
        ApiResponse<LineResponse> CellsChartAreaGetChartAreaBorderWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>FillFormatResponse</returns>
        FillFormatResponse CellsChartAreaGetChartAreaFillFormat(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of FillFormatResponse</returns>
        ApiResponse<FillFormatResponse> CellsChartAreaGetChartAreaFillFormatWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsDeleteWorksheetChartLegend(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsDeleteWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsDeleteWorksheetChartTitle(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsDeleteWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsDeleteWorksheetClearCharts(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsDeleteWorksheetClearChartsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsDeleteWorksheetDeleteChart(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsDeleteWorksheetDeleteChartWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsChartsGetWorksheetChart(string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsChartsGetWorksheetChartWithHttpInfo(string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>LegendResponse</returns>
        LegendResponse CellsChartsGetWorksheetChartLegend(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of LegendResponse</returns>
        ApiResponse<LegendResponse> CellsChartsGetWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TitleResponse</returns>
        TitleResponse CellsChartsGetWorksheetChartTitle(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        ApiResponse<TitleResponse> CellsChartsGetWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ChartsResponse</returns>
        ChartsResponse CellsChartsGetWorksheetCharts(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        ApiResponse<ChartsResponse> CellsChartsGetWorksheetChartsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsPostWorksheetChart(string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsPostWorksheetChartWithHttpInfo(string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsPostWorksheetChartLegend(string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsPostWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsPostWorksheetChartTitle(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsPostWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="dataLabels"> (optional, default to true)</param>
        /// <param name="dataLabelsPosition"> (optional, default to Above)</param>
        /// <param name="pivotTableSheet"> (optional)</param>
        /// <param name="pivotTableName"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsPutWorksheetAddChart(string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null);

        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="dataLabels"> (optional, default to true)</param>
        /// <param name="dataLabelsPosition"> (optional, default to Above)</param>
        /// <param name="pivotTableSheet"> (optional)</param>
        /// <param name="pivotTableName"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsPutWorksheetAddChartWithHttpInfo(string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null);
        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsPutWorksheetChartLegend(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsPutWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsChartsPutWorksheetChartTitle(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsChartsPutWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);
        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormatting(string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattings(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ConditionalFormattingResponse</returns>
        ConditionalFormattingResponse CellsConditionalFormattingsGetWorksheetConditionalFormatting(string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingResponse</returns>
        ApiResponse<ConditionalFormattingResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ConditionalFormattingsResponse</returns>
        ConditionalFormattingsResponse CellsConditionalFormattingsGetWorksheetConditionalFormattings(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingsResponse</returns>
        ApiResponse<ConditionalFormattingsResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsPutWorksheetConditionalFormatting(string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsPutWorksheetFormatCondition(string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);

        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);
        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsPutWorksheetFormatConditionArea(string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null);

        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null);
        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsConditionalFormattingsPutWorksheetFormatConditionCondition(string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);

        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsDeleteWorksheetColumns(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsDeleteWorksheetColumnsWithHttpInfo(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsDeleteWorksheetRow(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsDeleteWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsDeleteWorksheetRows(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);

        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsDeleteWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);
        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        Object CellsGetCellHtmlString(string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CellsGetCellHtmlStringWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        Object CellsGetWorksheetCell(string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null);

        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CellsGetWorksheetCellWithHttpInfo(string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null);
        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>StyleResponse</returns>
        StyleResponse CellsGetWorksheetCellStyle(string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        ApiResponse<StyleResponse> CellsGetWorksheetCellStyleWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsResponse</returns>
        CellsResponse CellsGetWorksheetCells(string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsResponse</returns>
        ApiResponse<CellsResponse> CellsGetWorksheetCellsWithHttpInfo(string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ColumnResponse</returns>
        ColumnResponse CellsGetWorksheetColumn(string name, string sheetName, int? columnIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ColumnResponse</returns>
        ApiResponse<ColumnResponse> CellsGetWorksheetColumnWithHttpInfo(string name, string sheetName, int? columnIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        ColumnsResponse CellsGetWorksheetColumns(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        ApiResponse<ColumnsResponse> CellsGetWorksheetColumnsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RowResponse</returns>
        RowResponse CellsGetWorksheetRow(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        ApiResponse<RowResponse> CellsGetWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RowsResponse</returns>
        RowsResponse CellsGetWorksheetRows(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RowsResponse</returns>
        ApiResponse<RowsResponse> CellsGetWorksheetRowsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsHypelinksDeleteWorksheetHyperlink(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all hyperlinks in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsHypelinksDeleteWorksheetHyperlinks(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all hyperlinks in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HyperlinkResponse</returns>
        HyperlinkResponse CellsHypelinksGetWorksheetHyperlink(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HyperlinkResponse</returns>
        ApiResponse<HyperlinkResponse> CellsHypelinksGetWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet hyperlinks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HyperlinksResponse</returns>
        HyperlinksResponse CellsHypelinksGetWorksheetHyperlinks(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet hyperlinks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HyperlinksResponse</returns>
        ApiResponse<HyperlinksResponse> CellsHypelinksGetWorksheetHyperlinksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsHypelinksPostWorksheetHyperlink(string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsHypelinksPostWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add worksheet hyperlink.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsHypelinksPutWorksheetHyperlink(string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null);

        /// <summary>
        /// Add worksheet hyperlink.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsHypelinksPutWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet list object by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsDeleteWorksheetListObject(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet list object by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsDeleteWorksheetListObjectWithHttpInfo(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet list objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsDeleteWorksheetListObjects(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet list objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet list object info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsListObjectsGetWorksheetListObject(string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet list object info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsListObjectsGetWorksheetListObjectWithHttpInfo(string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet listobjects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ListObjectsResponse</returns>
        ListObjectsResponse CellsListObjectsGetWorksheetListObjects(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet listobjects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ListObjectsResponse</returns>
        ApiResponse<ListObjectsResponse> CellsListObjectsGetWorksheetListObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPostWorksheetListColumn(string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPostWorksheetListColumnWithHttpInfo(string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPostWorksheetListColumnsTotal(string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPostWorksheetListColumnsTotalWithHttpInfo(string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update  list object 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPostWorksheetListObject(string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update  list object 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectWithHttpInfo(string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPostWorksheetListObjectConvertToRange(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPostWorksheetListObjectSortTable(string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a list object into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers. (optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name.. (optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row.. (optional, default to true)</param>
        /// <param name="listObject">List Object (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsListObjectsPutWorksheetListObject(string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add a list object into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers. (optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name.. (optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row.. (optional, default to true)</param>
        /// <param name="listObject">List Object (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsListObjectsPutWorksheetListObjectWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsOleObjectsDeleteWorksheetOleObject(string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsOleObjectsDeleteWorksheetOleObjects(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsOleObjectsGetWorksheetOleObject(string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsOleObjectsGetWorksheetOleObjectWithHttpInfo(string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>OleObjectsResponse</returns>
        OleObjectsResponse CellsOleObjectsGetWorksheetOleObjects(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of OleObjectsResponse</returns>
        ApiResponse<OleObjectsResponse> CellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsOleObjectsPostUpdateWorksheetOleObject(string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsOleObjectsPutWorksheetOleObject(string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsOleObjectsPutWorksheetOleObjectWithHttpInfo(string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageBreaksDeleteHorizontalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageBreaksDeleteHorizontalPageBreaks(string name, string sheetName, int? row = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(string name, string sheetName, int? row = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageBreaksDeleteVerticalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageBreaksDeleteVerticalPageBreaks(string name, string sheetName, int? column = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(string name, string sheetName, int? column = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HorizontalPageBreakResponse</returns>
        HorizontalPageBreakResponse CellsPageBreaksGetHorizontalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HorizontalPageBreakResponse</returns>
        ApiResponse<HorizontalPageBreakResponse> CellsPageBreaksGetHorizontalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HorizontalPageBreaksResponse</returns>
        HorizontalPageBreaksResponse CellsPageBreaksGetHorizontalPageBreaks(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HorizontalPageBreaksResponse</returns>
        ApiResponse<HorizontalPageBreaksResponse> CellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>VerticalPageBreakResponse</returns>
        VerticalPageBreakResponse CellsPageBreaksGetVerticalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of VerticalPageBreakResponse</returns>
        ApiResponse<VerticalPageBreakResponse> CellsPageBreaksGetVerticalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>VerticalPageBreaksResponse</returns>
        VerticalPageBreaksResponse CellsPageBreaksGetVerticalPageBreaks(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of VerticalPageBreaksResponse</returns>
        ApiResponse<VerticalPageBreaksResponse> CellsPageBreaksGetVerticalPageBreaksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="startColumn"> (optional)</param>
        /// <param name="endColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageBreaksPutHorizontalPageBreak(string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="startColumn"> (optional)</param>
        /// <param name="endColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageBreaksPutHorizontalPageBreakWithHttpInfo(string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="endRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageBreaksPutVerticalPageBreak(string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="endRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageBreaksPutVerticalPageBreakWithHttpInfo(string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null);
        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageSetupDeleteHeaderFooter(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageSetupDeleteHeaderFooterWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        PageSectionsResponse CellsPageSetupGetFooter(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        ApiResponse<PageSectionsResponse> CellsPageSetupGetFooterWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        PageSectionsResponse CellsPageSetupGetHeader(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        ApiResponse<PageSectionsResponse> CellsPageSetupGetHeaderWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PageSetupResponse</returns>
        PageSetupResponse CellsPageSetupGetPageSetup(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PageSetupResponse</returns>
        ApiResponse<PageSetupResponse> CellsPageSetupGetPageSetupWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageSetupPostFooter(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);

        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageSetupPostFooterWithHttpInfo(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);
        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageSetupPostHeader(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);

        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageSetupPostHeaderWithHttpInfo(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);
        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPageSetupPostPageSetup(string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPageSetupPostPageSetupWithHttpInfo(string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>BarcodeResponseList</returns>
        BarcodeResponseList CellsPictureGetExtractBarcodes(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of BarcodeResponseList</returns>
        ApiResponse<BarcodeResponseList> CellsPictureGetExtractBarcodesWithHttpInfo(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPicturesDeleteWorksheetPicture(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPicturesDeleteWorksheetPictureWithHttpInfo(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPicturesDeleteWorksheetPictures(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPicturesDeleteWorksheetPicturesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsPicturesGetWorksheetPicture(string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsPicturesGetWorksheetPictureWithHttpInfo(string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PicturesResponse</returns>
        PicturesResponse CellsPicturesGetWorksheetPictures(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        ApiResponse<PicturesResponse> CellsPicturesGetWorksheetPicturesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPicturesPostWorksheetPicture(string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPicturesPostWorksheetPictureWithHttpInfo(string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPicturesPutWorksheetAddPicture(string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPicturesPutWorksheetAddPictureWithHttpInfo(string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesDeletePivotTableField(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null);

        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesDeletePivotTableFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTable(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTableFilter(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTableFilters(string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTables(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotFieldResponse</returns>
        PivotFieldResponse CellsPivotTablesGetPivotTableField(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null);

        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFieldResponse</returns>
        ApiResponse<PivotFieldResponse> CellsPivotTablesGetPivotTableFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotTableResponse</returns>
        PivotTableResponse CellsPivotTablesGetWorksheetPivotTable(string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTableResponse</returns>
        ApiResponse<PivotTableResponse> CellsPivotTablesGetWorksheetPivotTableWithHttpInfo(string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotFilterResponse</returns>
        PivotFilterResponse CellsPivotTablesGetWorksheetPivotTableFilter(string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFilterResponse</returns>
        ApiResponse<PivotFilterResponse> CellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotFiltersResponse</returns>
        PivotFiltersResponse CellsPivotTablesGetWorksheetPivotTableFilters(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFiltersResponse</returns>
        ApiResponse<PivotFiltersResponse> CellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotTablesResponse</returns>
        PivotTablesResponse CellsPivotTablesGetWorksheetPivotTables(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTablesResponse</returns>
        ApiResponse<PivotTablesResponse> CellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostPivotTableCellStyle(string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostPivotTableCellStyleWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostPivotTableFieldHideItem(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostPivotTableFieldMoveTo(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null);
        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostPivotTableStyle(string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostPivotTableStyleWithHttpInfo(string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostPivotTableUpdatePivotField(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostPivotTableUpdatePivotFields(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);
        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostWorksheetPivotTableCalculate(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPostWorksheetPivotTableMove(string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPutPivotTableField(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPutPivotTableFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPutWorksheetPivotTable(string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);

        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPutWorksheetPivotTableWithHttpInfo(string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);
        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPivotTablesPutWorksheetPivotTableFilter(string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostCellCalculate(string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null);

        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostCellCalculateWithHttpInfo(string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostCellCharacters(string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostCellCharactersWithHttpInfo(string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostClearContents(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostClearContentsWithHttpInfo(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostClearFormats(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostClearFormatsWithHttpInfo(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostColumnStyle(string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostColumnStyleWithHttpInfo(string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostCopyCellIntoCell(string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null);

        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostCopyCellIntoCellWithHttpInfo(string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null);
        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostCopyWorksheetColumns(string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null);

        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostCopyWorksheetColumnsWithHttpInfo(string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null);
        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostCopyWorksheetRows(string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null);

        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostCopyWorksheetRowsWithHttpInfo(string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null);
        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostGroupWorksheetColumns(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);

        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostGroupWorksheetColumnsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);
        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostGroupWorksheetRows(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);

        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostGroupWorksheetRowsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);
        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostHideWorksheetColumns(string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostHideWorksheetColumnsWithHttpInfo(string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostHideWorksheetRows(string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null);

        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostHideWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null);
        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostRowStyle(string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostRowStyleWithHttpInfo(string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostSetCellHtmlString(string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null);

        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostSetCellHtmlStringWithHttpInfo(string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null);
        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostSetCellRangeValue(string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null);

        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostSetCellRangeValueWithHttpInfo(string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostSetWorksheetColumnWidth(string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostSetWorksheetColumnWidthWithHttpInfo(string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null);
        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostUngroupWorksheetColumns(string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostUngroupWorksheetColumnsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostUngroupWorksheetRows(string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null);

        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostUngroupWorksheetRowsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostUnhideWorksheetColumns(string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostUnhideWorksheetColumnsWithHttpInfo(string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostUnhideWorksheetRows(string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostUnhideWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>StyleResponse</returns>
        StyleResponse CellsPostUpdateWorksheetCellStyle(string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        ApiResponse<StyleResponse> CellsPostUpdateWorksheetCellStyleWithHttpInfo(string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostUpdateWorksheetRangeStyle(string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostUpdateWorksheetRangeStyleWithHttpInfo(string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="count">row number. (optional, default to 0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostUpdateWorksheetRow(string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="count">row number. (optional, default to 0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostUpdateWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellResponse</returns>
        CellResponse CellsPostWorksheetCellSetValue(string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellResponse</returns>
        ApiResponse<CellResponse> CellsPostWorksheetCellSetValueWithHttpInfo(string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null);
        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostWorksheetMerge(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostWorksheetMergeWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPostWorksheetUnmerge(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPostWorksheetUnmergeWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPropertiesDeleteDocumentProperties(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPropertiesDeleteDocumentPropertiesWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPropertiesDeleteDocumentProperty(string name, string propertyName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPropertiesDeleteDocumentPropertyWithHttpInfo(string name, string propertyName, string folder = null, string storageName = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        CellsDocumentPropertiesResponse CellsPropertiesGetDocumentProperties(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        ApiResponse<CellsDocumentPropertiesResponse> CellsPropertiesGetDocumentPropertiesWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertyResponse</returns>
        CellsDocumentPropertyResponse CellsPropertiesGetDocumentProperty(string name, string propertyName, string folder = null, string storageName = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertyResponse</returns>
        ApiResponse<CellsDocumentPropertyResponse> CellsPropertiesGetDocumentPropertyWithHttpInfo(string name, string propertyName, string folder = null, string storageName = null);
        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPropertiesPutDocumentProperty(string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPropertiesPutDocumentPropertyWithHttpInfo(string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null);
        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPutInsertWorksheetColumns(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null);

        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPutInsertWorksheetColumnsWithHttpInfo(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null);
        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPutInsertWorksheetRow(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPutInsertWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsPutInsertWorksheetRows(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);

        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsPutInsertWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesDeleteWorksheetCellsRange(string name, string sheetName, string range, string shift, string folder = null, string storageName = null);

        /// <summary>
        /// Delete range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesDeleteWorksheetCellsRangeWithHttpInfo(string name, string sheetName, string range, string shift, string folder = null, string storageName = null);
        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        RangeValueResponse CellsRangesGetWorksheetCellsRangeValue(string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        ApiResponse<RangeValueResponse> CellsRangesGetWorksheetCellsRangeValueWithHttpInfo(string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeColumnWidth(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeMerge(string name, string sheetName, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(string name, string sheetName, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeMoveTo(string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeOutlineBorder(string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null);
        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeRowHeight(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeStyle(string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeUnmerge(string name, string sheetName, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(string name, string sheetName, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRangeValue(string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null);

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeValueWithHttpInfo(string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null);
        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPostWorksheetCellsRanges(string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null);

        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPostWorksheetCellsRangesWithHttpInfo(string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Insert range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsRangesPutWorksheetCellsRange(string name, string sheetName, string range, string shift, string folder = null, string storageName = null);

        /// <summary>
        /// Insert range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsRangesPutWorksheetCellsRangeWithHttpInfo(string name, string sheetName, string range, string shift, string folder = null, string storageName = null);
        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>SaveResponse</returns>
        SaveResponse CellsSaveAsPostDocumentSaveAs(string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of SaveResponse</returns>
        ApiResponse<SaveResponse> CellsSaveAsPostDocumentSaveAsWithHttpInfo(string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsShapesDeleteWorksheetShape(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsShapesDeleteWorksheetShapeWithHttpInfo(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);
        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsShapesDeleteWorksheetShapes(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsShapesDeleteWorksheetShapesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ShapeResponse</returns>
        ShapeResponse CellsShapesGetWorksheetShape(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ShapeResponse</returns>
        ApiResponse<ShapeResponse> CellsShapesGetWorksheetShapeWithHttpInfo(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ShapesResponse</returns>
        ShapesResponse CellsShapesGetWorksheetShapes(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ShapesResponse</returns>
        ApiResponse<ShapesResponse> CellsShapesGetWorksheetShapesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsShapesPostWorksheetGroupShape(string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsShapesPostWorksheetGroupShapeWithHttpInfo(string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsShapesPostWorksheetShape(string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsShapesPostWorksheetShapeWithHttpInfo(string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsShapesPostWorksheetUngroupShape(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsShapesPostWorksheetUngroupShapeWithHttpInfo(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);
        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO"> (optional)</param>
        /// <param name="drawingType">shape object type (optional)</param>
        /// <param name="upperLeftRow">Upper left row index. (optional)</param>
        /// <param name="upperLeftColumn">Upper left column index. (optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel. (optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsShapesPutWorksheetShape(string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO"> (optional)</param>
        /// <param name="drawingType">shape object type (optional)</param>
        /// <param name="upperLeftRow">Upper left row index. (optional)</param>
        /// <param name="upperLeftColumn">Upper left column index. (optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel. (optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsShapesPutWorksheetShapeWithHttpInfo(string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsSparklineGroupsDeleteWorksheetSparklineGroup(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsSparklineGroupsDeleteWorksheetSparklineGroups(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>SparklineGroupResponse</returns>
        SparklineGroupResponse CellsSparklineGroupsGetWorksheetSparklineGroup(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of SparklineGroupResponse</returns>
        ApiResponse<SparklineGroupResponse> CellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet charts description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>SparklineGroupsResponse</returns>
        SparklineGroupsResponse CellsSparklineGroupsGetWorksheetSparklineGroups(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet charts description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of SparklineGroupsResponse</returns>
        ApiResponse<SparklineGroupsResponse> CellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsSparklineGroupsPostWorksheetSparklineGroup(string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsSparklineGroupsPutWorksheetSparklineGroup(string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null);
        /// <summary>
        /// Run tasks  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>Object</returns>
        Object CellsTaskPostRunTask(TaskData taskData);

        /// <summary>
        /// Run tasks  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CellsTaskPostRunTaskWithHttpInfo(TaskData taskData);
        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookDeleteDecryptDocument(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);

        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookDeleteDecryptDocumentWithHttpInfo(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookDeleteDocumentUnprotectFromChanges(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookDeleteUnprotectDocument(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookDeleteUnprotectDocumentWithHttpInfo(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookDeleteWorkbookBackground(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookDeleteWorkbookBackgroundWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookDeleteWorkbookName(string name, string nameName, string folder = null, string storageName = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookDeleteWorkbookNameWithHttpInfo(string name, string nameName, string folder = null, string storageName = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookDeleteWorkbookNames(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookDeleteWorkbookNamesWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Get page count for workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        Object CellsWorkbookGetPageCount(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Get page count for workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CellsWorkbookGetPageCountWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">The document output folder. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorkbookGetWorkbook(string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null);

        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">The document output folder. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorkbookGetWorkbookWithHttpInfo(string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null);
        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>StyleResponse</returns>
        StyleResponse CellsWorkbookGetWorkbookDefaultStyle(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        ApiResponse<StyleResponse> CellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>NameResponse</returns>
        NameResponse CellsWorkbookGetWorkbookName(string name, string nameName, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of NameResponse</returns>
        ApiResponse<NameResponse> CellsWorkbookGetWorkbookNameWithHttpInfo(string name, string nameName, string folder = null, string storageName = null);
        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        RangeValueResponse CellsWorkbookGetWorkbookNameValue(string name, string nameName, string folder = null, string storageName = null);

        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        ApiResponse<RangeValueResponse> CellsWorkbookGetWorkbookNameValueWithHttpInfo(string name, string nameName, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>NamesResponse</returns>
        NamesResponse CellsWorkbookGetWorkbookNames(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of NamesResponse</returns>
        ApiResponse<NamesResponse> CellsWorkbookGetWorkbookNamesWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorkbookSettingsResponse</returns>
        WorkbookSettingsResponse CellsWorkbookGetWorkbookSettings(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookSettingsResponse</returns>
        ApiResponse<WorkbookSettingsResponse> CellsWorkbookGetWorkbookSettingsWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse CellsWorkbookGetWorkbookTextItems(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> CellsWorkbookGetWorkbookTextItemsWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Autofit workbook columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startColumn">Start column. (optional)</param>
        /// <param name="endColumn">End column. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostAutofitWorkbookColumns(string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// Autofit workbook columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startColumn">Start column. (optional)</param>
        /// <param name="endColumn">End column. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostAutofitWorkbookColumnsWithHttpInfo(string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostAutofitWorkbookRows(string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);

        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add digital signature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostDigitalSignature(string name, string digitalsignaturefile, string password, string folder = null, string storageName = null);

        /// <summary>
        /// Add digital signature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostDigitalSignatureWithHttpInfo(string name, string digitalsignaturefile, string password, string folder = null, string storageName = null);
        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostEncryptDocument(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);

        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostEncryptDocumentWithHttpInfo(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostImportData(string name, ImportOption importData, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostImportDataWithHttpInfo(string name, ImportOption importData, string folder = null, string storageName = null);
        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostProtectDocument(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);

        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostProtectDocumentWithHttpInfo(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);
        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostWorkbookCalculateFormula(string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null);

        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null);
        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorkbookPostWorkbookGetSmartMarkerResult(string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null);

        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null);
        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPostWorkbookSettings(string name, WorkbookSettings settings = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPostWorkbookSettingsWithHttpInfo(string name, WorkbookSettings settings = null, string folder = null, string storageName = null);
        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="outFolder">out Folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        SplitResultResponse CellsWorkbookPostWorkbookSplit(string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null);

        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="outFolder">out Folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        ApiResponse<SplitResultResponse> CellsWorkbookPostWorkbookSplitWithHttpInfo(string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null);
        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="mergedStorageName">merged file storage name. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        WorkbookResponse CellsWorkbookPostWorkbooksMerge(string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null);

        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="mergedStorageName">merged file storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        ApiResponse<WorkbookResponse> CellsWorkbookPostWorkbooksMergeWithHttpInfo(string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null);
        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorkbookReplaceResponse</returns>
        WorkbookReplaceResponse CellsWorkbookPostWorkbooksTextReplace(string name, string oldValue, string newValue, string folder = null, string storageName = null);

        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookReplaceResponse</returns>
        ApiResponse<WorkbookReplaceResponse> CellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(string name, string oldValue, string newValue, string folder = null, string storageName = null);
        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse CellsWorkbookPostWorkbooksTextSearch(string name, string text, string folder = null, string storageName = null);

        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> CellsWorkbookPostWorkbooksTextSearchWithHttpInfo(string name, string text, string folder = null, string storageName = null);
        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorkbookPutConvertWorkbook(System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null);

        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorkbookPutConvertWorkbookWithHttpInfo(System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null);
        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPutDocumentProtectFromChanges(string name, PasswordRequest password = null, string folder = null, string storageName = null);

        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(string name, PasswordRequest password = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPutWorkbookBackground(string name, byte[] png, string folder = null, string storageName = null);

        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPutWorkbookBackgroundWithHttpInfo(string name, byte[] png, string folder = null, string storageName = null);
        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="isWriteOver">write over file. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        WorkbookResponse CellsWorkbookPutWorkbookCreate(string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null);

        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="isWriteOver">write over file. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        ApiResponse<WorkbookResponse> CellsWorkbookPutWorkbookCreateWithHttpInfo(string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorkbookPutWorkbookWaterMarker(string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null);

        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorkbookPutWorkbookWaterMarkerWithHttpInfo(string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null);
        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetValidationsDeleteWorksheetValidation(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Clear all validation in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetValidationsDeleteWorksheetValidations(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Clear all validation in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsGetWorksheetValidation(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationsResponse</returns>
        ValidationsResponse CellsWorksheetValidationsGetWorksheetValidations(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationsResponse</returns>
        ApiResponse<ValidationsResponse> CellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsPostWorksheetValidation(string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="validation">validation (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsPutWorksheetValidation(string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="validation">validation (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unprotect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteUnprotectWorksheet(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unprotect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteWorksheet(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteWorksheetWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteWorksheetBackground(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteWorksheetComment(string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all comments for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteWorksheetComments(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all comments for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Unfreeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteWorksheetFreezePanes(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Unfreeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsDeleteWorksheets(string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsDeleteWorksheetsWithHttpInfo(string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheets ranges info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RangesResponse</returns>
        RangesResponse CellsWorksheetsGetNamedRanges(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheets ranges info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RangesResponse</returns>
        ApiResponse<RangesResponse> CellsWorksheetsGetNamedRangesWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// Get page count for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        Object CellsWorksheetsGetPageCount(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get page count for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CellsWorksheetsGetPageCountWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="area">Exported area. (optional)</param>
        /// <param name="pageIndex">Exported page index. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorksheetsGetWorksheet(string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="area">Exported area. (optional)</param>
        /// <param name="pageIndex">Exported page index. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorksheetsGetWorksheetWithHttpInfo(string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null);
        /// <summary>
        /// Calculate formula value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>SingleValueResponse</returns>
        SingleValueResponse CellsWorksheetsGetWorksheetCalculateFormula(string name, string sheetName, string formula, string folder = null, string storageName = null);

        /// <summary>
        /// Calculate formula value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of SingleValueResponse</returns>
        ApiResponse<SingleValueResponse> CellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(string name, string sheetName, string formula, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet comment by cell name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse CellsWorksheetsGetWorksheetComment(string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet comment by cell name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> CellsWorksheetsGetWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CommentsResponse</returns>
        CommentsResponse CellsWorksheetsGetWorksheetComments(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CommentsResponse</returns>
        ApiResponse<CommentsResponse> CellsWorksheetsGetWorksheetCommentsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet merged cell by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>MergedCellResponse</returns>
        MergedCellResponse CellsWorksheetsGetWorksheetMergedCell(string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet merged cell by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of MergedCellResponse</returns>
        ApiResponse<MergedCellResponse> CellsWorksheetsGetWorksheetMergedCellWithHttpInfo(string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet merged cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>MergedCellsResponse</returns>
        MergedCellsResponse CellsWorksheetsGetWorksheetMergedCells(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet merged cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of MergedCellsResponse</returns>
        ApiResponse<MergedCellsResponse> CellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse CellsWorksheetsGetWorksheetTextItems(string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> CellsWorksheetsGetWorksheetTextItemsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorksheetsResponse</returns>
        WorksheetsResponse CellsWorksheetsGetWorksheets(string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorksheetsResponse</returns>
        ApiResponse<WorksheetsResponse> CellsWorksheetsGetWorksheetsWithHttpInfo(string name, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="firstRow"> (optional)</param>
        /// <param name="lastRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostAutofitWorksheetColumns(string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="firstRow"> (optional)</param>
        /// <param name="lastRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostAutofitWorksheetRow(string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null);
        /// <summary>
        /// Autofit worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostAutofitWorksheetRows(string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);

        /// <summary>
        /// Autofit worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="sourceWorkbook"> (optional)</param>
        /// <param name="sourceFolder"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostCopyWorksheet(string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="sourceWorkbook"> (optional)</param>
        /// <param name="sourceFolder"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostCopyWorksheetWithHttpInfo(string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null);
        /// <summary>
        /// Move worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostMoveWorksheet(string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null);

        /// <summary>
        /// Move worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostMoveWorksheetWithHttpInfo(string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null);
        /// <summary>
        /// Rename worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostRenameWorksheet(string name, string sheetName, string newname, string folder = null, string storageName = null);

        /// <summary>
        /// Rename worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostRenameWorksheetWithHttpInfo(string name, string sheetName, string newname, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostUpdateWorksheetProperty(string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostUpdateWorksheetZoom(string name, string sheetName, int? value, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(string name, string sheetName, int? value, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostWorksheetComment(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);
        /// <summary>
        /// Sort worksheet range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPostWorksheetRangeSort(string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null);

        /// <summary>
        /// Sort worksheet range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPostWorksheetRangeSortWithHttpInfo(string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null);
        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse CellsWorksheetsPostWorksheetTextSearch(string name, string sheetName, string text, string folder = null, string storageName = null);

        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> CellsWorksheetsPostWorksheetTextSearchWithHttpInfo(string name, string sheetName, string text, string folder = null, string storageName = null);
        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorksheetReplaceResponse</returns>
        WorksheetReplaceResponse CellsWorksheetsPostWorsheetTextReplace(string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null);

        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorksheetReplaceResponse</returns>
        ApiResponse<WorksheetReplaceResponse> CellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null);
        /// <summary>
        /// Add new worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position. (optional)</param>
        /// <param name="sheettype">The new sheet type. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPutAddNewWorksheet(string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add new worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position. (optional)</param>
        /// <param name="sheettype">The new sheet type. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPutAddNewWorksheetWithHttpInfo(string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null);
        /// <summary>
        /// Change worksheet visibility.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPutChangeVisibilityWorksheet(string name, string sheetName, bool? isVisible, string folder = null, string storageName = null);

        /// <summary>
        /// Change worksheet visibility.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(string name, string sheetName, bool? isVisible, string folder = null, string storageName = null);
        /// <summary>
        /// Protect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPutProtectWorksheet(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);

        /// <summary>
        /// Protect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPutProtectWorksheetWithHttpInfo(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPutWorksheetBackground(string name, string sheetName, byte[] png, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPutWorksheetBackgroundWithHttpInfo(string name, string sheetName, byte[] png, string folder = null, string storageName = null);
        /// <summary>
        /// Add worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse CellsWorksheetsPutWorksheetComment(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> CellsWorksheetsPutWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set freeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        CellsCloudResponse CellsWorksheetsPutWorksheetFreezePanes(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Set freeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        ApiResponse<CellsCloudResponse> CellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to copy (optional)</param>
        /// <returns></returns>
        void CopyFile(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);

        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to copy (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CopyFileWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);
        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns></returns>
        void CopyFolder(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);

        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CopyFolderWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);
        /// <summary>
        /// Create the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns></returns>
        void CreateFolder(string path, string storageName = null);

        /// <summary>
        /// Create the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateFolderWithHttpInfo(string path, string storageName = null);
        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to delete (optional)</param>
        /// <returns></returns>
        void DeleteFile(string path, string storageName = null, string versionId = null);

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo(string path, string storageName = null, string versionId = null);
        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files (optional, default to false)</param>
        /// <returns></returns>
        void DeleteFolder(string path, string storageName = null, bool? recursive = null);

        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFolderWithHttpInfo(string path, string storageName = null, bool? recursive = null);
        /// <summary>
        /// Download file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to download (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadFile(string path, string storageName = null, string versionId = null);

        /// <summary>
        /// Download file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to download (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadFileWithHttpInfo(string path, string storageName = null, string versionId = null);
        /// <summary>
        /// Get disc usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>DiscUsage</returns>
        DiscUsage GetDiscUsage(string storageName = null);

        /// <summary>
        /// Get disc usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of DiscUsage</returns>
        ApiResponse<DiscUsage> GetDiscUsageWithHttpInfo(string storageName = null);
        /// <summary>
        /// Get file versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>FileVersions</returns>
        FileVersions GetFileVersions(string path, string storageName = null);

        /// <summary>
        /// Get file versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of FileVersions</returns>
        ApiResponse<FileVersions> GetFileVersionsWithHttpInfo(string path, string storageName = null);
        /// <summary>
        /// Get all files and folders within a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>FilesList</returns>
        FilesList GetFilesList(string path, string storageName = null);

        /// <summary>
        /// Get all files and folders within a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of FilesList</returns>
        ApiResponse<FilesList> GetFilesListWithHttpInfo(string path, string storageName = null);
        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to move (optional)</param>
        /// <returns></returns>
        void MoveFile(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);

        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to move (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveFileWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);
        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns></returns>
        void MoveFolder(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);

        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveFolderWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);
        /// <summary>
        /// Get Access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse OAuthPost(string grantType, string clientId, string clientSecret);

        /// <summary>
        /// Get Access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> OAuthPostWithHttpInfo(string grantType, string clientId, string clientSecret);
        /// <summary>
        /// Check if file or folder exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID (optional)</param>
        /// <returns>ObjectExist</returns>
        ObjectExist ObjectExists(string path, string storageName = null, string versionId = null);

        /// <summary>
        /// Check if file or folder exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID (optional)</param>
        /// <returns>ApiResponse of ObjectExist</returns>
        ApiResponse<ObjectExist> ObjectExistsWithHttpInfo(string path, string storageName = null, string versionId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostBatchConvert(BatchConvertRequest batchConvertRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostBatchConvertWithHttpInfo(BatchConvertRequest batchConvertRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>FileInfo</returns>
        FileInfo PostConvertWorkbookToDocx(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>ApiResponse of FileInfo</returns>
        ApiResponse<FileInfo> PostConvertWorkbookToDocxWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>FileInfo</returns>
        FileInfo PostConvertWorkbookToPDF(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>ApiResponse of FileInfo</returns>
        ApiResponse<FileInfo> PostConvertWorkbookToPDFWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>FileInfo</returns>
        FileInfo PostConvertWorkbookToPNG(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>ApiResponse of FileInfo</returns>
        ApiResponse<FileInfo> PostConvertWorkbookToPNGWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// Check if storage exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>StorageExist</returns>
        StorageExist StorageExists(string storageName);

        /// <summary>
        /// Check if storage exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>ApiResponse of StorageExist</returns>
        ApiResponse<StorageExist> StorageExistsWithHttpInfo(string storageName);
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>FilesUploadResult</returns>
        FilesUploadResult UploadFile(string path, System.IO.Stream file, string storageName = null);

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of FilesUploadResult</returns>
        ApiResponse<FilesUploadResult> UploadFileWithHttpInfo(string path, System.IO.Stream file, string storageName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year">(optional, default to 0)</param>
        /// <param name="month">(optional, default to 0)</param>
        /// <param name="day">(optional, default to 0)</param>
        /// <param name="hour">(optional, default to 0)</param>
        /// <param name="minute">(optional, default to 0)</param>
        /// <param name="second">(optional, default to 0)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterDeleteWorksheetDateFilterAsync (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null);

        /// <summary>
        /// Removes a date filter.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year">(optional, default to 0)</param>
        /// <param name="month">(optional, default to 0)</param>
        /// <param name="day">(optional, default to 0)</param>
        /// <param name="hour">(optional, default to 0)</param>
        /// <param name="minute">(optional, default to 0)</param>
        /// <param name="second">(optional, default to 0)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterDeleteWorksheetFilterAsync (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null);

        /// <summary>
        /// Delete a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of AutoFilterResponse</returns>
        System.Threading.Tasks.Task<AutoFilterResponse> CellsAutoFilterGetWorksheetAutoFilterAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get Auto filter Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (AutoFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoFilterResponse>> CellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPostWorksheetAutoFilterRefreshAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPostWorksheetMatchBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Match all blank cell in the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPostWorksheetMatchNonBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Match all not blank cell in the list.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter">(optional)</param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetColorFilterAsync (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter">(optional)</param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd">(optional)</param>
        /// <param name="operatorType2">(optional)</param>
        /// <param name="criteria2">(optional)</param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetCustomFilterAsync (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Filters a list with a custom criteria.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd">(optional)</param>
        /// <param name="operatorType2">(optional)</param>
        /// <param name="criteria2">(optional)</param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year">(optional, default to 0)</param>
        /// <param name="month">(optional, default to 0)</param>
        /// <param name="day">(optional, default to 0)</param>
        /// <param name="hour">(optional, default to 0)</param>
        /// <param name="minute">(optional, default to 0)</param>
        /// <param name="second">(optional, default to 0)</param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetDateFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// add date filter in worksheet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year">(optional, default to 0)</param>
        /// <param name="month">(optional, default to 0)</param>
        /// <param name="day">(optional, default to 0)</param>
        /// <param name="hour">(optional, default to 0)</param>
        /// <param name="minute">(optional, default to 0)</param>
        /// <param name="second">(optional, default to 0)</param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetDynamicFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetFilterAsync (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Adds a filter for a filter column.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetFilterTop10Async (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Filter the top 10 item in the list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetIconFilterAsync (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);

        /// <summary>
        /// Adds an icon filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks">(optional)</param>
        /// <param name="refresh">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get autoshape info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsAutoshapesGetWorksheetAutoshapeAsync (string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get autoshape info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsAutoshapesGetWorksheetAutoshapeAsyncWithHttpInfo (string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet autoshapes info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of AutoShapesResponse</returns>
        System.Threading.Tasks.Task<AutoShapesResponse> CellsAutoshapesGetWorksheetAutoshapesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet autoshapes info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (AutoShapesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoShapesResponse>> CellsAutoshapesGetWorksheetAutoshapesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ChartAreaResponse</returns>
        System.Threading.Tasks.Task<ChartAreaResponse> CellsChartAreaGetChartAreaAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ChartAreaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChartAreaResponse>> CellsChartAreaGetChartAreaAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of LineResponse</returns>
        System.Threading.Tasks.Task<LineResponse> CellsChartAreaGetChartAreaBorderAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (LineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineResponse>> CellsChartAreaGetChartAreaBorderAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of FillFormatResponse</returns>
        System.Threading.Tasks.Task<FillFormatResponse> CellsChartAreaGetChartAreaFillFormatAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (FillFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FillFormatResponse>> CellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetClearChartsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetDeleteChartAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsChartsGetWorksheetChartAsync (string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsChartsGetWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of LegendResponse</returns>
        System.Threading.Tasks.Task<LegendResponse> CellsChartsGetWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (LegendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegendResponse>> CellsChartsGetWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of TitleResponse</returns>
        System.Threading.Tasks.Task<TitleResponse> CellsChartsGetWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsGetWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        System.Threading.Tasks.Task<ChartsResponse> CellsChartsGetWorksheetChartsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsGetWorksheetChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPostWorksheetChartAsync (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPostWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend">(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPostWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend">(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPostWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPostWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPostWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row.(optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column.(optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row.(optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column.(optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series. (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name. (optional, default to true)</param>
        /// <param name="title">Specifies chart title name.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="dataLabels">(optional, default to true)</param>
        /// <param name="dataLabelsPosition">(optional, default to Above)</param>
        /// <param name="pivotTableSheet">(optional)</param>
        /// <param name="pivotTableName">(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPutWorksheetAddChartAsync (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null);

        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row.(optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column.(optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row.(optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column.(optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series. (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column. (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name. (optional, default to true)</param>
        /// <param name="title">Specifies chart title name.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="dataLabels">(optional, default to true)</param>
        /// <param name="dataLabelsPosition">(optional, default to Above)</param>
        /// <param name="pivotTableSheet">(optional)</param>
        /// <param name="pivotTableName">(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPutWorksheetAddChartAsyncWithHttpInfo (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null);
        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPutWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPutWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPutWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPutWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null);
        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ConditionalFormattingResponse</returns>
        System.Threading.Tasks.Task<ConditionalFormattingResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ConditionalFormattingsResponse</returns>
        System.Threading.Tasks.Task<ConditionalFormattingsResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingsResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsync (string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAsync (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);

        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);
        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync (string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null);

        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null);
        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);

        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsDeleteWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsDeleteWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsDeleteWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsDeleteWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.(optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets.(optional, default to true)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsDeleteWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);

        /// <summary>
        /// Delete several worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.(optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets.(optional, default to true)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsDeleteWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);
        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CellsGetCellHtmlStringAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CellsGetCellHtmlStringAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CellsGetWorksheetCellAsync (string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null);

        /// <summary>
        /// Read cell data by cell&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CellsGetWorksheetCellAsyncWithHttpInfo (string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null);
        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of StyleResponse</returns>
        System.Threading.Tasks.Task<StyleResponse> CellsGetWorksheetCellStyleAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Read cell&#39;s style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsGetWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset.(optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response.(optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsResponse</returns>
        System.Threading.Tasks.Task<CellsResponse> CellsGetWorksheetCellsAsync (string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get cells info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset.(optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response.(optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsResponse>> CellsGetWorksheetCellsAsyncWithHttpInfo (string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ColumnResponse</returns>
        System.Threading.Tasks.Task<ColumnResponse> CellsGetWorksheetColumnAsync (string name, string sheetName, int? columnIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet column data by column&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ColumnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnResponse>> CellsGetWorksheetColumnAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        System.Threading.Tasks.Task<ColumnsResponse> CellsGetWorksheetColumnsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet columns info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsGetWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of RowResponse</returns>
        System.Threading.Tasks.Task<RowResponse> CellsGetWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet row data by row&#39;s index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsGetWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of RowsResponse</returns>
        System.Threading.Tasks.Task<RowsResponse> CellsGetWorksheetRowsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet rows info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (RowsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RowsResponse>> CellsGetWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksDeleteWorksheetHyperlinkAsync (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksDeleteWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all hyperlinks in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksDeleteWorksheetHyperlinksAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all hyperlinks in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksDeleteWorksheetHyperlinksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of HyperlinkResponse</returns>
        System.Threading.Tasks.Task<HyperlinkResponse> CellsHypelinksGetWorksheetHyperlinkAsync (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (HyperlinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HyperlinkResponse>> CellsHypelinksGetWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet hyperlinks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of HyperlinksResponse</returns>
        System.Threading.Tasks.Task<HyperlinksResponse> CellsHypelinksGetWorksheetHyperlinksAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet hyperlinks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (HyperlinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HyperlinksResponse>> CellsHypelinksGetWorksheetHyperlinksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksPostWorksheetHyperlinkAsync (string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet hyperlink by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksPostWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add worksheet hyperlink.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksPutWorksheetHyperlinkAsync (string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null);

        /// <summary>
        /// Add worksheet hyperlink.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksPutWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet list object by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsDeleteWorksheetListObjectAsync (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet list object by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet list objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsDeleteWorksheetListObjectsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet list objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet list object info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsListObjectsGetWorksheetListObjectAsync (string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet list object info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet listobjects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ListObjectsResponse</returns>
        System.Threading.Tasks.Task<ListObjectsResponse> CellsListObjectsGetWorksheetListObjectsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet listobjects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ListObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListObjectsResponse>> CellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListColumnAsync (string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListColumnAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListColumnsTotalAsync (string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListColumnsTotalAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update  list object 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectAsync (string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update  list object 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectConvertToRangeAsync (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectSortTableAsync (string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync (string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a list object into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers.(optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name..(optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row..(optional, default to true)</param>
        /// <param name="listObject">List Object(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPutWorksheetListObjectAsync (string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add a list object into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers.(optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name..(optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row..(optional, default to true)</param>
        /// <param name="listObject">List Object(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsDeleteWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsDeleteWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all OLE objects.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsOleObjectsGetWorksheetOleObjectAsync (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get OLE object info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of OleObjectsResponse</returns>
        System.Threading.Tasks.Task<OleObjectsResponse> CellsOleObjectsGetWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet OLE objects info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (OleObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OleObjectsResponse>> CellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsPostUpdateWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update OLE object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object(optional)</param>
        /// <param name="upperLeftRow">Upper left row index(optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index(optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel(optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel(optional, default to 0)</param>
        /// <param name="oleFile">OLE filename(optional)</param>
        /// <param name="imageFile">Image filename(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsPutWorksheetOleObjectAsync (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add OLE object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object(optional)</param>
        /// <param name="upperLeftRow">Upper left row index(optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index(optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel(optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel(optional, default to 0)</param>
        /// <param name="oleFile">OLE filename(optional)</param>
        /// <param name="imageFile">Image filename(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteHorizontalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteHorizontalPageBreaksAsync (string name, string sheetName, int? row = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo (string name, string sheetName, int? row = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteVerticalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteVerticalPageBreaksAsync (string name, string sheetName, int? column = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo (string name, string sheetName, int? column = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of HorizontalPageBreakResponse</returns>
        System.Threading.Tasks.Task<HorizontalPageBreakResponse> CellsPageBreaksGetHorizontalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (HorizontalPageBreakResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HorizontalPageBreakResponse>> CellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of HorizontalPageBreaksResponse</returns>
        System.Threading.Tasks.Task<HorizontalPageBreaksResponse> CellsPageBreaksGetHorizontalPageBreaksAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (HorizontalPageBreaksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HorizontalPageBreaksResponse>> CellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of VerticalPageBreakResponse</returns>
        System.Threading.Tasks.Task<VerticalPageBreakResponse> CellsPageBreaksGetVerticalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (VerticalPageBreakResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerticalPageBreakResponse>> CellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of VerticalPageBreaksResponse</returns>
        System.Threading.Tasks.Task<VerticalPageBreaksResponse> CellsPageBreaksGetVerticalPageBreaksAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (VerticalPageBreaksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerticalPageBreaksResponse>> CellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname">(optional)</param>
        /// <param name="row">(optional)</param>
        /// <param name="column">(optional)</param>
        /// <param name="startColumn">(optional)</param>
        /// <param name="endColumn">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksPutHorizontalPageBreakAsync (string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname">(optional)</param>
        /// <param name="row">(optional)</param>
        /// <param name="column">(optional)</param>
        /// <param name="startColumn">(optional)</param>
        /// <param name="endColumn">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo (string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname">(optional)</param>
        /// <param name="column">(optional)</param>
        /// <param name="row">(optional)</param>
        /// <param name="startRow">(optional)</param>
        /// <param name="endRow">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksPutVerticalPageBreakAsync (string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname">(optional)</param>
        /// <param name="column">(optional)</param>
        /// <param name="row">(optional)</param>
        /// <param name="startRow">(optional)</param>
        /// <param name="endRow">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo (string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null);
        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupDeleteHeaderFooterAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetFooterAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetHeaderAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetHeaderAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PageSetupResponse</returns>
        System.Threading.Tasks.Task<PageSetupResponse> CellsPageSetupGetPageSetupAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PageSetupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSetupResponse>> CellsPageSetupGetPageSetupAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupPostFooterAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);

        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupPostFooterAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);
        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupPostHeaderAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);

        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupPostHeaderAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null);
        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupPostPageSetupAsync (string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupPostPageSetupAsyncWithHttpInfo (string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null);
        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of BarcodeResponseList</returns>
        System.Threading.Tasks.Task<BarcodeResponseList> CellsPictureGetExtractBarcodesAsync (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (BarcodeResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeResponseList>> CellsPictureGetExtractBarcodesAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesDeleteWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete a picture object in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesDeleteWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all pictures in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsPicturesGetWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null);

        /// <summary>
        /// GRead worksheet picture by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsPicturesGetWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        System.Threading.Tasks.Task<PicturesResponse> CellsPicturesGetWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet pictures.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> CellsPicturesGetWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesPostWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet picture by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesPostWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object(optional)</param>
        /// <param name="upperLeftRow">The image upper left row.(optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column.(optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row.(optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column.(optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesPutWorksheetAddPictureAsync (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add a new worksheet picture.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object(optional)</param>
        /// <param name="upperLeftRow">The image upper left row.(optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column.(optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row.(optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column.(optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeletePivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null);

        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PivotFieldResponse</returns>
        System.Threading.Tasks.Task<PivotFieldResponse> CellsPivotTablesGetPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null);

        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PivotFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotFieldResponse>> CellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PivotTableResponse</returns>
        System.Threading.Tasks.Task<PivotTableResponse> CellsPivotTablesGetWorksheetPivotTableAsync (string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PivotTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotTableResponse>> CellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PivotFilterResponse</returns>
        System.Threading.Tasks.Task<PivotFilterResponse> CellsPivotTablesGetWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PivotFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotFilterResponse>> CellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PivotFiltersResponse</returns>
        System.Threading.Tasks.Task<PivotFiltersResponse> CellsPivotTablesGetWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PivotFiltersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotFiltersResponse>> CellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of PivotTablesResponse</returns>
        System.Threading.Tasks.Task<PivotTablesResponse> CellsPivotTablesGetWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (PivotTablesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotTablesResponse>> CellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body.(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableCellStyleAsync (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body.(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableFieldHideItemAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableFieldMoveToAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null);
        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body.(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableStyleAsync (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body.(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableUpdatePivotFieldAsync (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableUpdatePivotFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableUpdatePivotFieldsAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableUpdatePivotFieldsAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null);
        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostWorksheetPivotTableCalculateAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row">(optional)</param>
        /// <param name="column">(optional)</param>
        /// <param name="destCellName">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostWorksheetPivotTableMoveAsync (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row">(optional)</param>
        /// <param name="column">(optional)</param>
        /// <param name="destCellName">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPutPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache.(optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range.(optional)</param>
        /// <param name="tableName">The name of the new PivotTable report.(optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPutWorksheetPivotTableAsync (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);

        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache.(optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range.(optional)</param>
        /// <param name="tableName">The name of the new PivotTable report.(optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);
        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter">(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPutWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter">(optional)</param>
        /// <param name="needReCalculate">(optional, default to false)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCellCalculateAsync (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null);

        /// <summary>
        /// Cell calculate formula
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCellCalculateAsyncWithHttpInfo (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCellCharactersAsync (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set cell characters 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCellCharactersAsyncWithHttpInfo (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.(optional)</param>
        /// <param name="startRow">The start row.(optional)</param>
        /// <param name="startColumn">The start column.(optional)</param>
        /// <param name="endRow">The end row.(optional)</param>
        /// <param name="endColumn">The end column.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostClearContentsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.(optional)</param>
        /// <param name="startRow">The start row.(optional)</param>
        /// <param name="startColumn">The start column.(optional)</param>
        /// <param name="endRow">The end row.(optional)</param>
        /// <param name="endColumn">The end column.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostClearContentsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.(optional)</param>
        /// <param name="startRow">The start row.(optional)</param>
        /// <param name="startColumn">The start column.(optional)</param>
        /// <param name="endRow">The end row.(optional)</param>
        /// <param name="endColumn">The end column.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostClearFormatsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// Clear cells contents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.(optional)</param>
        /// <param name="startRow">The start row.(optional)</param>
        /// <param name="startColumn">The start column.(optional)</param>
        /// <param name="endRow">The end row.(optional)</param>
        /// <param name="endColumn">The end column.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostClearFormatsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostColumnStyleAsync (string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set column style
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostColumnStyleAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name(optional)</param>
        /// <param name="row">Source row(optional)</param>
        /// <param name="column">Source column(optional)</param>
        /// <param name="folder">Folder name(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCopyCellIntoCellAsync (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null);

        /// <summary>
        /// Copy cell into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name(optional)</param>
        /// <param name="row">Source row(optional)</param>
        /// <param name="column">Source column(optional)</param>
        /// <param name="folder">Folder name(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCopyCellIntoCellAsyncWithHttpInfo (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null);
        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCopyWorksheetColumnsAsync (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null);

        /// <summary>
        /// Copy worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCopyWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null);
        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCopyWorksheetRowsAsync (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null);

        /// <summary>
        /// Copy worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCopyWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null);
        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostGroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);

        /// <summary>
        /// Group worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostGroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);
        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostGroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);

        /// <summary>
        /// Group worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostGroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null);
        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostHideWorksheetColumnsAsync (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Hide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostHideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostHideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null);

        /// <summary>
        /// Hide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostHideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null);
        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostRowStyleAsync (string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set row style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostRowStyleAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostSetCellHtmlStringAsync (string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null);

        /// <summary>
        /// Set htmlstring value into cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostSetCellHtmlStringAsyncWithHttpInfo (string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null);
        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostSetCellRangeValueAsync (string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null);

        /// <summary>
        /// Set cell range value 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostSetCellRangeValueAsyncWithHttpInfo (string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostSetWorksheetColumnWidthAsync (string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet column width.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostSetWorksheetColumnWidthAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null);
        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUngroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Ungroup worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUngroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUngroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null);

        /// <summary>
        /// Ungroup worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUngroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width.(optional, default to 50.0)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUnhideWorksheetColumnsAsync (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unhide worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width.(optional, default to 50.0)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUnhideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height.(optional, default to 15.0)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUnhideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unhide worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height.(optional, default to 15.0)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUnhideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of StyleResponse</returns>
        System.Threading.Tasks.Task<StyleResponse> CellsPostUpdateWorksheetCellStyleAsync (string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update cell&#39;s style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUpdateWorksheetRangeStyleAsync (string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update cell&#39;s range style.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo (string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height.(optional, default to 0.0)</param>
        /// <param name="count">row number.(optional, default to 0)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUpdateWorksheetRowAsync (string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height.(optional, default to 0.0)</param>
        /// <param name="count">row number.(optional, default to 0)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUpdateWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value.(optional)</param>
        /// <param name="type">The value type.(optional)</param>
        /// <param name="formula">Formula for cell(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellResponse</returns>
        System.Threading.Tasks.Task<CellResponse> CellsPostWorksheetCellSetValueAsync (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set cell value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value.(optional)</param>
        /// <param name="type">The value type.(optional)</param>
        /// <param name="formula">Formula for cell(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellResponse>> CellsPostWorksheetCellSetValueAsyncWithHttpInfo (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null);
        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostWorksheetMergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Merge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostWorksheetMergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPostWorksheetUnmergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Unmerge cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostWorksheetUnmergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPropertiesDeleteDocumentPropertiesAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all custom document properties and clean built-in ones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPropertiesDeleteDocumentPropertyAsync (string name, string propertyName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storageName = null);
        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesGetDocumentPropertiesAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsDocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<CellsDocumentPropertyResponse> CellsPropertiesGetDocumentPropertyAsync (string name, string propertyName, string folder = null, string storageName = null);

        /// <summary>
        /// Read document property by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertyResponse>> CellsPropertiesGetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storageName = null);
        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPropertiesPutDocumentPropertyAsync (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set/create document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPropertiesPutDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null);
        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.(optional, default to true)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPutInsertWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null);

        /// <summary>
        /// Insert worksheet columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.(optional, default to true)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPutInsertWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null);
        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPutInsertWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Insert new worksheet row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPutInsertWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.(optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets.(optional, default to true)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsPutInsertWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);

        /// <summary>
        /// Insert several new worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.(optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets.(optional, default to true)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPutInsertWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesDeleteWorksheetCellsRangeAsync (string name, string sheetName, string range, string shift, string folder = null, string storageName = null);

        /// <summary>
        /// Delete range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesDeleteWorksheetCellsRangeAsyncWithHttpInfo (string name, string sheetName, string range, string shift, string folder = null, string storageName = null);
        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39;(optional)</param>
        /// <param name="firstRow">the first row of the range(optional)</param>
        /// <param name="firstColumn">the first column of the range(optional)</param>
        /// <param name="rowCount">the count of rows in the range(optional)</param>
        /// <param name="columnCount">the count of columns in the range(optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        System.Threading.Tasks.Task<RangeValueResponse> CellsRangesGetWorksheetCellsRangeValueAsync (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null);

        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39;(optional)</param>
        /// <param name="firstRow">the first row of the range(optional)</param>
        /// <param name="firstColumn">the first column of the range(optional)</param>
        /// <param name="rowCount">the count of rows in the range(optional)</param>
        /// <param name="columnCount">the count of columns in the range(optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeColumnWidthAsync (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeMergeAsync (string name, string sheetName, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeMoveToAsync (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeOutlineBorderAsync (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null);
        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeRowHeightAsync (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeStyleAsync (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null);

        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeUnmergeAsync (string name, string sheetName, Range range = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null, string storageName = null);
        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate.(optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type(optional, default to false)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeValueAsync (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null);

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate.(optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type(optional, default to false)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null);
        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue(optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangesAsync (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null);

        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue(optional)</param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null);
        /// <summary>
        /// Insert range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPutWorksheetCellsRangeAsync (string name, string sheetName, string range, string shift, string folder = null, string storageName = null);

        /// <summary>
        /// Insert range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPutWorksheetCellsRangeAsyncWithHttpInfo (string name, string sheetName, string range, string shift, string folder = null, string storageName = null);
        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options.(optional)</param>
        /// <param name="newfilename">The new file name.(optional)</param>
        /// <param name="isAutoFitRows">Autofit rows.(optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns.(optional, default to false)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of SaveResponse</returns>
        System.Threading.Tasks.Task<SaveResponse> CellsSaveAsPostDocumentSaveAsAsync (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// Convert document and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options.(optional)</param>
        /// <param name="newfilename">The new file name.(optional)</param>
        /// <param name="isAutoFitRows">Autofit rows.(optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns.(optional, default to false)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveResponse>> CellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesDeleteWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesDeleteWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);
        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesDeleteWorksheetShapesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// delete all shapes in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesDeleteWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ShapeResponse</returns>
        System.Threading.Tasks.Task<ShapeResponse> CellsShapesGetWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet shape
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ShapeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShapeResponse>> CellsShapesGetWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ShapesResponse</returns>
        System.Threading.Tasks.Task<ShapesResponse> CellsShapesGetWorksheetShapesAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet shapes 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ShapesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShapesResponse>> CellsShapesGetWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPostWorksheetGroupShapeAsync (string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPostWorksheetGroupShapeAsyncWithHttpInfo (string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto">(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPostWorksheetShapeAsync (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto">(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPostWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null);
        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPostWorksheetUngroupShapeAsync (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);

        /// <summary>
        /// Update a shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPostWorksheetUngroupShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null);
        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO">(optional)</param>
        /// <param name="drawingType">shape object type(optional)</param>
        /// <param name="upperLeftRow">Upper left row index.(optional)</param>
        /// <param name="upperLeftColumn">Upper left column index.(optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.(optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.(optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.(optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPutWorksheetShapeAsync (string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add shape in worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO">(optional)</param>
        /// <param name="drawingType">shape object type(optional)</param>
        /// <param name="upperLeftRow">Upper left row index.(optional)</param>
        /// <param name="upperLeftColumn">Upper left column index.(optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel.(optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel.(optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel.(optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPutWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsDeleteWorksheetSparklineGroupAsync (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsDeleteWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsDeleteWorksheetSparklineGroupsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsDeleteWorksheetSparklineGroupsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of SparklineGroupResponse</returns>
        System.Threading.Tasks.Task<SparklineGroupResponse> CellsSparklineGroupsGetWorksheetSparklineGroupAsync (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (SparklineGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SparklineGroupResponse>> CellsSparklineGroupsGetWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet charts description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of SparklineGroupsResponse</returns>
        System.Threading.Tasks.Task<SparklineGroupsResponse> CellsSparklineGroupsGetWorksheetSparklineGroupsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet charts description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (SparklineGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SparklineGroupsResponse>> CellsSparklineGroupsGetWorksheetSparklineGroupsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsPostWorksheetSparklineGroupAsync (string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsPostWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsPutWorksheetSparklineGroupAsync (string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsPutWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null);
        /// <summary>
        /// Run tasks  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CellsTaskPostRunTaskAsync (TaskData taskData);

        /// <summary>
        /// Run tasks  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CellsTaskPostRunTaskAsyncWithHttpInfo (TaskData taskData);
        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteDecryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);

        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteDocumentUnprotectFromChangesAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteUnprotectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteWorkbookBackgroundAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteWorkbookBackgroundAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteWorkbookNameAsync (string name, string nameName, string folder = null, string storageName = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null, string storageName = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteWorkbookNamesAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Get page count for workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CellsWorkbookGetPageCountAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Get page count for workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CellsWorkbookGetPageCountAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password.(optional)</param>
        /// <param name="format">The exported file format.(optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit.(optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data.(optional, default to false)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outPath">The document output folder.(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookGetWorkbookAsync (string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null);

        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password.(optional)</param>
        /// <param name="format">The exported file format.(optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit.(optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data.(optional, default to false)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outPath">The document output folder.(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookGetWorkbookAsyncWithHttpInfo (string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null);
        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of StyleResponse</returns>
        System.Threading.Tasks.Task<StyleResponse> CellsWorkbookGetWorkbookDefaultStyleAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of NameResponse</returns>
        System.Threading.Tasks.Task<NameResponse> CellsWorkbookGetWorkbookNameAsync (string name, string nameName, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (NameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameResponse>> CellsWorkbookGetWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null, string storageName = null);
        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        System.Threading.Tasks.Task<RangeValueResponse> CellsWorkbookGetWorkbookNameValueAsync (string name, string nameName, string folder = null, string storageName = null);

        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo (string name, string nameName, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of NamesResponse</returns>
        System.Threading.Tasks.Task<NamesResponse> CellsWorkbookGetWorkbookNamesAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (NamesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamesResponse>> CellsWorkbookGetWorkbookNamesAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of WorkbookSettingsResponse</returns>
        System.Threading.Tasks.Task<WorkbookSettingsResponse> CellsWorkbookGetWorkbookSettingsAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (WorkbookSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookSettingsResponse>> CellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookGetWorkbookTextItemsAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Autofit workbook columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options.(optional)</param>
        /// <param name="startColumn">Start column.(optional)</param>
        /// <param name="endColumn">End column.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostAutofitWorkbookColumnsAsync (string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);

        /// <summary>
        /// Autofit workbook columns.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options.(optional)</param>
        /// <param name="startColumn">Start column.(optional)</param>
        /// <param name="endColumn">End column.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostAutofitWorkbookColumnsAsyncWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null);
        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options.(optional)</param>
        /// <param name="startRow">Start row.(optional)</param>
        /// <param name="endRow">End row.(optional)</param>
        /// <param name="onlyAuto">Only auto.(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostAutofitWorkbookRowsAsync (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);

        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options.(optional)</param>
        /// <param name="startRow">Start row.(optional)</param>
        /// <param name="endRow">End row.(optional)</param>
        /// <param name="onlyAuto">Only auto.(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add digital signature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostDigitalSignatureAsync (string name, string digitalsignaturefile, string password, string folder = null, string storageName = null);

        /// <summary>
        /// Add digital signature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostDigitalSignatureAsyncWithHttpInfo (string name, string digitalsignaturefile, string password, string folder = null, string storageName = null);
        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostEncryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);

        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostEncryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostImportDataAsync (string name, ImportOption importData, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostImportDataAsyncWithHttpInfo (string name, ImportOption importData, string folder = null, string storageName = null);
        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostProtectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);

        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostProtectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null);
        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options.(optional)</param>
        /// <param name="ignoreError">ignore Error.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostWorkbookCalculateFormulaAsync (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null);

        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options.(optional)</param>
        /// <param name="ignoreError">ignore Error.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null);
        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body.(optional)</param>
        /// <param name="folder">The workbook folder full path.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outPath">Path to save result(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPostWorkbookGetSmartMarkerResultAsync (string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null);

        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body.(optional)</param>
        /// <param name="folder">The workbook folder full path.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outPath">Path to save result(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo (string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null);
        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostWorkbookSettingsAsync (string name, WorkbookSettings settings = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo (string name, WorkbookSettings settings = null, string folder = null, string storageName = null);
        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format.(optional)</param>
        /// <param name="from">Start worksheet index.(optional, default to 0)</param>
        /// <param name="to">End worksheet index.(optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution.(optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution.(optional, default to 0)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="outFolder">out Folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        System.Threading.Tasks.Task<SplitResultResponse> CellsWorkbookPostWorkbookSplitAsync (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null);

        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format.(optional)</param>
        /// <param name="from">Start worksheet index.(optional, default to 0)</param>
        /// <param name="to">End worksheet index.(optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution.(optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution.(optional, default to 0)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="outFolder">out Folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="outStorageName">output storage name.(optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> CellsWorkbookPostWorkbookSplitAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null);
        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="mergedStorageName">merged file storage name.(optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPostWorkbooksMergeAsync (string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null);

        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="mergedStorageName">merged file storage name.(optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo (string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null);
        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of WorkbookReplaceResponse</returns>
        System.Threading.Tasks.Task<WorkbookReplaceResponse> CellsWorkbookPostWorkbooksTextReplaceAsync (string name, string oldValue, string newValue, string folder = null, string storageName = null);

        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (WorkbookReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookReplaceResponse>> CellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo (string name, string oldValue, string newValue, string folder = null, string storageName = null);
        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookPostWorkbooksTextSearchAsync (string name, string text, string folder = null, string storageName = null);

        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo (string name, string text, string folder = null, string storageName = null);
        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert.(optional)</param>
        /// <param name="password">The workbook password.(optional)</param>
        /// <param name="outPath">Path to save result(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPutConvertWorkbookAsync (System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null);

        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert.(optional)</param>
        /// <param name="password">The workbook password.(optional)</param>
        /// <param name="outPath">Path to save result(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPutConvertWorkbookAsyncWithHttpInfo (System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null);
        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPutDocumentProtectFromChangesAsync (string name, PasswordRequest password = null, string folder = null, string storageName = null);

        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password.(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo (string name, PasswordRequest password = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPutWorkbookBackgroundAsync (string name, byte[] png, string folder = null, string storageName = null);

        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPutWorkbookBackgroundAsyncWithHttpInfo (string name, byte[] png, string folder = null, string storageName = null);
        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created.(optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data.(optional)</param>
        /// <param name="isWriteOver">write over file.(optional)</param>
        /// <param name="folder">The new document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPutWorkbookCreateAsync (string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null);

        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created.(optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data.(optional)</param>
        /// <param name="isWriteOver">write over file.(optional)</param>
        /// <param name="folder">The new document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPutWorkbookCreateAsyncWithHttpInfo (string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPutWorkbookWaterMarkerAsync (string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null);

        /// <summary>
        /// Set workbook background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPutWorkbookWaterMarkerAsyncWithHttpInfo (string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null);
        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetValidationsDeleteWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Clear all validation in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetValidationsDeleteWorksheetValidationsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Clear all validation in worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetValidationsDeleteWorksheetValidationsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsGetWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ValidationsResponse</returns>
        System.Threading.Tasks.Task<ValidationsResponse> CellsWorksheetValidationsGetWorksheetValidationsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ValidationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationsResponse>> CellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation">(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPostWorksheetValidationAsync (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation">(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null);
        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area(optional)</param>
        /// <param name="validation">validation(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPutWorksheetValidationAsync (string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area(optional)</param>
        /// <param name="validation">validation(optional)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null);
        /// <summary>
        /// Unprotect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here.(optional)</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteUnprotectWorksheetAsync (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);

        /// <summary>
        /// Unprotect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here.(optional)</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetBackgroundAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetCommentAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Delete all comments for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetCommentsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Delete all comments for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Unfreeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetFreezePanesAsync (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Unfreeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetsAsync (string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetsAsyncWithHttpInfo (string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheets ranges info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of RangesResponse</returns>
        System.Threading.Tasks.Task<RangesResponse> CellsWorksheetsGetNamedRangesAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheets ranges info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (RangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangesResponse>> CellsWorksheetsGetNamedRangesAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// Get page count for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CellsWorksheetsGetPageCountAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get page count for worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CellsWorksheetsGetPageCountAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheet info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format.(optional)</param>
        /// <param name="verticalResolution">Image vertical resolution.(optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution.(optional, default to 0)</param>
        /// <param name="area">Exported area.(optional)</param>
        /// <param name="pageIndex">Exported page index.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorksheetsGetWorksheetAsync (string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheet info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format.(optional)</param>
        /// <param name="verticalResolution">Image vertical resolution.(optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution.(optional, default to 0)</param>
        /// <param name="area">Exported area.(optional)</param>
        /// <param name="pageIndex">Exported page index.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorksheetsGetWorksheetAsyncWithHttpInfo (string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null);
        /// <summary>
        /// Calculate formula value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of SingleValueResponse</returns>
        System.Threading.Tasks.Task<SingleValueResponse> CellsWorksheetsGetWorksheetCalculateFormulaAsync (string name, string sheetName, string formula, string folder = null, string storageName = null);

        /// <summary>
        /// Calculate formula value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (SingleValueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleValueResponse>> CellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo (string name, string sheetName, string formula, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet comment by cell name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> CellsWorksheetsGetWorksheetCommentAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet comment by cell name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CommentsResponse</returns>
        System.Threading.Tasks.Task<CommentsResponse> CellsWorksheetsGetWorksheetCommentsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CommentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentsResponse>> CellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet merged cell by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of MergedCellResponse</returns>
        System.Threading.Tasks.Task<MergedCellResponse> CellsWorksheetsGetWorksheetMergedCellAsync (string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet merged cell by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (MergedCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergedCellResponse>> CellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo (string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet merged cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of MergedCellsResponse</returns>
        System.Threading.Tasks.Task<MergedCellsResponse> CellsWorksheetsGetWorksheetMergedCellsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet merged cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (MergedCellsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergedCellsResponse>> CellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Get worksheet text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> CellsWorksheetsGetWorksheetTextItemsAsync (string name, string sheetName, string folder = null, string storageName = null);

        /// <summary>
        /// Get worksheet text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null);
        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of WorksheetsResponse</returns>
        System.Threading.Tasks.Task<WorksheetsResponse> CellsWorksheetsGetWorksheetsAsync (string name, string folder = null, string storageName = null);

        /// <summary>
        /// Read worksheets info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (WorksheetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorksheetsResponse>> CellsWorksheetsGetWorksheetsAsyncWithHttpInfo (string name, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions">(optional)</param>
        /// <param name="firstRow">(optional)</param>
        /// <param name="lastRow">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetColumnsAsync (string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions">(optional)</param>
        /// <param name="firstRow">(optional)</param>
        /// <param name="lastRow">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetRowAsync (string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null);
        /// <summary>
        /// Autofit worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options.(optional)</param>
        /// <param name="startRow">Start row.(optional)</param>
        /// <param name="endRow">End row.(optional)</param>
        /// <param name="onlyAuto">Only auto.(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetRowsAsync (string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);

        /// <summary>
        /// Autofit worksheet rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options.(optional)</param>
        /// <param name="startRow">Start row.(optional)</param>
        /// <param name="endRow">End row.(optional)</param>
        /// <param name="onlyAuto">Only auto.(optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options">(optional)</param>
        /// <param name="sourceWorkbook">(optional)</param>
        /// <param name="sourceFolder">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostCopyWorksheetAsync (string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options">(optional)</param>
        /// <param name="sourceWorkbook">(optional)</param>
        /// <param name="sourceFolder">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo (string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null);
        /// <summary>
        /// Move worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostMoveWorksheetAsync (string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null);

        /// <summary>
        /// Move worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters.(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo (string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null);
        /// <summary>
        /// Rename worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostRenameWorksheetAsync (string name, string sheetName, string newname, string folder = null, string storageName = null);

        /// <summary>
        /// Rename worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo (string name, string sheetName, string newname, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostUpdateWorksheetPropertyAsync (string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet">(optional)</param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo (string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostUpdateWorksheetZoomAsync (string name, string sheetName, int? value, string folder = null, string storageName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo (string name, string sheetName, int? value, string folder = null, string storageName = null);
        /// <summary>
        /// Update worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostWorksheetCommentAsync (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);

        /// <summary>
        /// Update worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);
        /// <summary>
        /// Sort worksheet range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostWorksheetRangeSortAsync (string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null);

        /// <summary>
        /// Sort worksheet range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings.(optional)</param>
        /// <param name="folder">The workbook folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo (string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null);
        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> CellsWorksheetsPostWorksheetTextSearchAsync (string name, string sheetName, string text, string folder = null, string storageName = null);

        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo (string name, string sheetName, string text, string folder = null, string storageName = null);
        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of WorksheetReplaceResponse</returns>
        System.Threading.Tasks.Task<WorksheetReplaceResponse> CellsWorksheetsPostWorsheetTextReplaceAsync (string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null);

        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (WorksheetReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorksheetReplaceResponse>> CellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo (string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null);
        /// <summary>
        /// Add new worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position.(optional)</param>
        /// <param name="sheettype">The new sheet type.(optional)</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutAddNewWorksheetAsync (string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add new worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position.(optional)</param>
        /// <param name="sheettype">The new sheet type.(optional)</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo (string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null);
        /// <summary>
        /// Change worksheet visibility.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutChangeVisibilityWorksheetAsync (string name, string sheetName, bool? isVisible, string folder = null, string storageName = null);

        /// <summary>
        /// Change worksheet visibility.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo (string name, string sheetName, bool? isVisible, string folder = null, string storageName = null);
        /// <summary>
        /// Protect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings.(optional)</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutProtectWorksheetAsync (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);

        /// <summary>
        /// Protect worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings.(optional)</param>
        /// <param name="folder">Document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutWorksheetBackgroundAsync (string name, string sheetName, byte[] png, string folder = null, string storageName = null);

        /// <summary>
        /// Set worksheet background image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo (string name, string sheetName, byte[] png, string folder = null, string storageName = null);
        /// <summary>
        /// Add worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> CellsWorksheetsPutWorksheetCommentAsync (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);

        /// <summary>
        /// Add worksheet&#39;s cell comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object(optional)</param>
        /// <param name="folder">The document folder.(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null);
        /// <summary>
        /// Set freeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutWorksheetFreezePanesAsync (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);

        /// <summary>
        /// Set freeze panes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder">(optional)</param>
        /// <param name="storageName">storage name.(optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null);
        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <param name="versionId">File version ID to copy(optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CopyFileAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);

        /// <summary>
        /// Copy file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <param name="versionId">File version ID to copy(optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CopyFileAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);
        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CopyFolderAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);

        /// <summary>
        /// Copy folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CopyFolderAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);
        /// <summary>
        /// Create the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateFolderAsync (string path, string storageName = null);

        /// <summary>
        /// Create the folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateFolderAsyncWithHttpInfo (string path, string storageName = null);
        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="versionId">File version ID to delete(optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync (string path, string storageName = null, string versionId = null);

        /// <summary>
        /// Delete file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="versionId">File version ID to delete(optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string path, string storageName = null, string versionId = null);
        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files(optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFolderAsync (string path, string storageName = null, bool? recursive = null);

        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files(optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string path, string storageName = null, bool? recursive = null);
        /// <summary>
        /// Download file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="versionId">File version ID to download(optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync (string path, string storageName = null, string versionId = null);

        /// <summary>
        /// Download file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="versionId">File version ID to download(optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileAsyncWithHttpInfo (string path, string storageName = null, string versionId = null);
        /// <summary>
        /// Get disc usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of DiscUsage</returns>
        System.Threading.Tasks.Task<DiscUsage> GetDiscUsageAsync (string storageName = null);

        /// <summary>
        /// Get disc usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of ApiResponse (DiscUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiscUsage>> GetDiscUsageAsyncWithHttpInfo (string storageName = null);
        /// <summary>
        /// Get file versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of FileVersions</returns>
        System.Threading.Tasks.Task<FileVersions> GetFileVersionsAsync (string path, string storageName = null);

        /// <summary>
        /// Get file versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of ApiResponse (FileVersions)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileVersions>> GetFileVersionsAsyncWithHttpInfo (string path, string storageName = null);
        /// <summary>
        /// Get all files and folders within a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of FilesList</returns>
        System.Threading.Tasks.Task<FilesList> GetFilesListAsync (string path, string storageName = null);

        /// <summary>
        /// Get all files and folders within a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of ApiResponse (FilesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesList>> GetFilesListAsyncWithHttpInfo (string path, string storageName = null);
        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <param name="versionId">File version ID to move(optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveFileAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);

        /// <summary>
        /// Move file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <param name="versionId">File version ID to move(optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveFileAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null);
        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveFolderAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);

        /// <summary>
        /// Move folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name(optional)</param>
        /// <param name="destStorageName">Destination storage name(optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveFolderAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null);
        /// <summary>
        /// Get Access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> OAuthPostAsync (string grantType, string clientId, string clientSecret);

        /// <summary>
        /// Get Access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> OAuthPostAsyncWithHttpInfo (string grantType, string clientId, string clientSecret);
        /// <summary>
        /// Check if file or folder exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="versionId">File version ID(optional)</param>
        /// <returns>Task of ObjectExist</returns>
        System.Threading.Tasks.Task<ObjectExist> ObjectExistsAsync (string path, string storageName = null, string versionId = null);

        /// <summary>
        /// Check if file or folder exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <param name="versionId">File version ID(optional)</param>
        /// <returns>Task of ApiResponse (ObjectExist)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectExist>> ObjectExistsAsyncWithHttpInfo (string path, string storageName = null, string versionId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostBatchConvertAsync (BatchConvertRequest batchConvertRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostBatchConvertAsyncWithHttpInfo (BatchConvertRequest batchConvertRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction">(optional, default to true)</param>
        /// <returns>Task of FileInfo</returns>
        System.Threading.Tasks.Task<FileInfo> PostConvertWorkbookToDocxAsync(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction">(optional, default to true)</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostConvertWorkbookToDocxAsyncWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction">(optional, default to true)</param>
        /// <returns>Task of FileInfo</returns>
        System.Threading.Tasks.Task<FileInfo> PostConvertWorkbookToPDFAsync(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction">(optional, default to true)</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostConvertWorkbookToPDFAsyncWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction">(optional, default to true)</param>
        /// <returns>Task of FileInfo</returns>
        System.Threading.Tasks.Task<FileInfo> PostConvertWorkbookToPNGAsync(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction">(optional, default to true)</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostConvertWorkbookToPNGAsyncWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null);
        /// <summary>
        /// Check if storage exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>Task of StorageExist</returns>
        System.Threading.Tasks.Task<StorageExist> StorageExistsAsync (string storageName);

        /// <summary>
        /// Check if storage exists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>Task of ApiResponse (StorageExist)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageExist>> StorageExistsAsyncWithHttpInfo (string storageName);
        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of FilesUploadResult</returns>
        System.Threading.Tasks.Task<FilesUploadResult> UploadFileAsync (string path, System.IO.Stream file, string storageName = null);

        /// <summary>
        /// Upload file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name(optional)</param>
        /// <returns>Task of ApiResponse (FilesUploadResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesUploadResult>> UploadFileAsyncWithHttpInfo (string path, System.IO.Stream file, string storageName = null);
        #endregion Asynchronous Operations
        void Convert(Requests.ConversionRequest conversionRequest);
        void Merge(Requests.MergeRequest mergeRequest);
        void Unlock(Requests.UnlockRequest unlockRequest);
        void Protect(Requests.ProtectRequest protectRequest);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsApi : ICellsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        private const string _grantType = "client_credentials";
        private string _clientId;
        private string _clientSecret;
        private string _OAuthPattern;
        private string _version;
        private string _basePath;
        private DateTime _getAccessTokenTime;
        private bool _needAuth = true;
       
        private string versionURI
        {
            get
            {
                return _basePath.EndsWith("/") ? _basePath + _version : _basePath + "/" + _version;
            }
        }
				
        /// <summary>
        /// Initializes a new instance of the <see cref="CellsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="appSID"></param>
        /// <param name="appKey"></param>
        /// <param name="version"></param>
        public CellsApi(String clientId, String clientSecret, String version = "v3.0", String basePath = "https://api.aspose.cloud")
        {
            _clientId = clientId;
            _clientSecret = clientSecret;
            _version = version;
            _basePath = basePath;
            switch (_version)
            {
                case "v3.0":
                    _OAuthPattern = "/connect/token";
                    break;
                case "v1.1":
                    _OAuthPattern = "/oauth2/token";
                    break;
                default:
                    throw new InvalidOperationException(String.Format("Version {0} is unsupported.", version));
            }

            if(string.IsNullOrEmpty(_clientId)&&string.IsNullOrEmpty(_clientSecret)){
                this.Configuration = new Configuration(new ApiClient(versionURI), null);
                _needAuth = false;
            }
            else{
                UpdateAccessToken( getAccessToken());
            }
            
            ExceptionFactory =  Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        
        /// <summary>
        /// 
        /// </summary>
        public void checkAccessToken()
        {
            if (_needAuth)
            {
                if (DateTime.Now > _getAccessTokenTime.AddMinutes(23.5 * 60))
                {
                    UpdateAccessToken(getAccessToken());
                }
            }
        }
       
        private string getAccessToken()
        {
            ApiClient apiClient = new ApiClient(_basePath);
            string accessToken = apiClient.GetAccessToken("client_credentials", _clientId, _clientSecret, _OAuthPattern);
            _getAccessTokenTime = DateTime.Now;
            if (String.IsNullOrEmpty(accessToken))
            {
                throw new ApiException(400, "Get access token  fails.");
            }
            return accessToken;
        }

        private void UpdateAccessToken(string accessToken)
        {
            Configuration = new Configuration();
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accessToken);
            this.Configuration = new Configuration(new ApiClient(versionURI), headerParameters);
        }
        
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterDeleteWorksheetDateFilter(string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterDeleteWorksheetDateFilterAsync (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a date filter.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterDeleteWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsApi->CellsAutoFilterDeleteWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterDeleteWorksheetFilter(string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterDeleteWorksheetFilterWithHttpInfo(name, sheetName, fieldIndex, criteria, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterDeleteWorksheetFilterWithHttpInfo(string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterDeleteWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterDeleteWorksheetFilterAsync (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo(name, sheetName, fieldIndex, criteria, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterDeleteWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string criteria = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterDeleteWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterDeleteWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterDeleteWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>AutoFilterResponse</returns>
        public AutoFilterResponse CellsAutoFilterGetWorksheetAutoFilter(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<AutoFilterResponse> localVarResponse = CellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of AutoFilterResponse</returns>
        public ApiResponse< AutoFilterResponse > CellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterGetWorksheetAutoFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterGetWorksheetAutoFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterGetWorksheetAutoFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoFilterResponse)));
        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of AutoFilterResponse</returns>
        public async System.Threading.Tasks.Task<AutoFilterResponse> CellsAutoFilterGetWorksheetAutoFilterAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<AutoFilterResponse> localVarResponse = await CellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Auto filter Description 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (AutoFilterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoFilterResponse>> CellsAutoFilterGetWorksheetAutoFilterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterGetWorksheetAutoFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterGetWorksheetAutoFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterGetWorksheetAutoFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoFilterResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPostWorksheetAutoFilterRefresh(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetAutoFilterRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPostWorksheetAutoFilterRefreshAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPostWorksheetAutoFilterRefreshAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPostWorksheetAutoFilterRefresh");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetAutoFilterRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPostWorksheetMatchBlanks(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPostWorksheetMatchBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPostWorksheetMatchBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo(name, sheetName, fieldIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Match all blank cell in the list. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPostWorksheetMatchBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPostWorksheetMatchBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPostWorksheetMatchBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPostWorksheetMatchNonBlanks(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPostWorksheetMatchNonBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchNonBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPostWorksheetMatchNonBlanksAsync (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo(name, sheetName, fieldIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Match all not blank cell in the list.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPostWorksheetMatchNonBlanksAsyncWithHttpInfo (string name, string sheetName, int? fieldIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPostWorksheetMatchNonBlanks");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPostWorksheetMatchNonBlanks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPostWorksheetMatchNonBlanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetColorFilter(string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetColorFilterWithHttpInfo(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetColorFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (colorFilter != null && colorFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colorFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colorFilter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetColorFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetColorFilterAsync (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="colorFilter"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetColorFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, ColorFilterRequest colorFilter = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetColorFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (colorFilter != null && colorFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(colorFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = colorFilter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetColorFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetCustomFilter(string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'operatorType1' is set
            if (operatorType1 == null)
                throw new ApiException(400, "Missing required parameter 'operatorType1' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'criteria1' is set
            if (criteria1 == null)
                throw new ApiException(400, "Missing required parameter 'criteria1' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (operatorType1 != null) localVarQueryParams.Add("operatorType1", Configuration.ApiClient.ParameterToString(operatorType1)); // query parameter
            if (criteria1 != null) localVarQueryParams.Add("criteria1", Configuration.ApiClient.ParameterToString(criteria1)); // query parameter
            if (isAnd != null) localVarQueryParams.Add("isAnd", Configuration.ApiClient.ParameterToString(isAnd)); // query parameter
            if (operatorType2 != null) localVarQueryParams.Add("operatorType2", Configuration.ApiClient.ParameterToString(operatorType2)); // query parameter
            if (criteria2 != null) localVarQueryParams.Add("criteria2", Configuration.ApiClient.ParameterToString(criteria2)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetCustomFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetCustomFilterAsync (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Filters a list with a custom criteria.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="operatorType1"></param>
        /// <param name="criteria1"></param>
        /// <param name="isAnd"> (optional)</param>
        /// <param name="operatorType2"> (optional)</param>
        /// <param name="criteria2"> (optional)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetCustomFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string operatorType1, string criteria1, bool? isAnd = null, string operatorType2 = null, string criteria2 = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'operatorType1' is set
            if (operatorType1 == null)
                throw new ApiException(400, "Missing required parameter 'operatorType1' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");
            // verify the required parameter 'criteria1' is set
            if (criteria1 == null)
                throw new ApiException(400, "Missing required parameter 'criteria1' when calling CellsApi->CellsAutoFilterPutWorksheetCustomFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (operatorType1 != null) localVarQueryParams.Add("operatorType1", Configuration.ApiClient.ParameterToString(operatorType1)); // query parameter
            if (criteria1 != null) localVarQueryParams.Add("criteria1", Configuration.ApiClient.ParameterToString(criteria1)); // query parameter
            if (isAnd != null) localVarQueryParams.Add("isAnd", Configuration.ApiClient.ParameterToString(isAnd)); // query parameter
            if (operatorType2 != null) localVarQueryParams.Add("operatorType2", Configuration.ApiClient.ParameterToString(operatorType2)); // query parameter
            if (criteria2 != null) localVarQueryParams.Add("criteria2", Configuration.ApiClient.ParameterToString(criteria2)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetCustomFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetDateFilter(string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetDateFilterWithHttpInfo(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetDateFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetDateFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add date filter in worksheet  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dateTimeGroupingType"></param>
        /// <param name="year"> (optional, default to 0)</param>
        /// <param name="month"> (optional, default to 0)</param>
        /// <param name="day"> (optional, default to 0)</param>
        /// <param name="hour"> (optional, default to 0)</param>
        /// <param name="minute"> (optional, default to 0)</param>
        /// <param name="second"> (optional, default to 0)</param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetDateFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dateTimeGroupingType, int? year = null, int? month = null, int? day = null, int? hour = null, int? minute = null, int? second = null, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");
            // verify the required parameter 'dateTimeGroupingType' is set
            if (dateTimeGroupingType == null)
                throw new ApiException(400, "Missing required parameter 'dateTimeGroupingType' when calling CellsApi->CellsAutoFilterPutWorksheetDateFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dateTimeGroupingType != null) localVarQueryParams.Add("dateTimeGroupingType", Configuration.ApiClient.ParameterToString(dateTimeGroupingType)); // query parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (day != null) localVarQueryParams.Add("day", Configuration.ApiClient.ParameterToString(day)); // query parameter
            if (hour != null) localVarQueryParams.Add("hour", Configuration.ApiClient.ParameterToString(hour)); // query parameter
            if (minute != null) localVarQueryParams.Add("minute", Configuration.ApiClient.ParameterToString(minute)); // query parameter
            if (second != null) localVarQueryParams.Add("second", Configuration.ApiClient.ParameterToString(second)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetDynamicFilter(string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'dynamicFilterType' is set
            if (dynamicFilterType == null)
                throw new ApiException(400, "Missing required parameter 'dynamicFilterType' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dynamicFilterType != null) localVarQueryParams.Add("dynamicFilterType", Configuration.ApiClient.ParameterToString(dynamicFilterType)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDynamicFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetDynamicFilterAsync (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="dynamicFilterType"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetDynamicFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string dynamicFilterType, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");
            // verify the required parameter 'dynamicFilterType' is set
            if (dynamicFilterType == null)
                throw new ApiException(400, "Missing required parameter 'dynamicFilterType' when calling CellsApi->CellsAutoFilterPutWorksheetDynamicFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (dynamicFilterType != null) localVarQueryParams.Add("dynamicFilterType", Configuration.ApiClient.ParameterToString(dynamicFilterType)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetDynamicFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetFilter(string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetFilterWithHttpInfo(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetFilterAsync (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a filter for a filter column.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="criteria"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string criteria, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling CellsApi->CellsAutoFilterPutWorksheetFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (criteria != null) localVarQueryParams.Add("criteria", Configuration.ApiClient.ParameterToString(criteria)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetFilterTop10(string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isTop' is set
            if (isTop == null)
                throw new ApiException(400, "Missing required parameter 'isTop' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isPercent' is set
            if (isPercent == null)
                throw new ApiException(400, "Missing required parameter 'isPercent' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'itemCount' is set
            if (itemCount == null)
                throw new ApiException(400, "Missing required parameter 'itemCount' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (isTop != null) localVarQueryParams.Add("isTop", Configuration.ApiClient.ParameterToString(isTop)); // query parameter
            if (isPercent != null) localVarQueryParams.Add("isPercent", Configuration.ApiClient.ParameterToString(isPercent)); // query parameter
            if (itemCount != null) localVarQueryParams.Add("itemCount", Configuration.ApiClient.ParameterToString(itemCount)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilterTop10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetFilterTop10Async (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Filter the top 10 item in the list 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="isTop"></param>
        /// <param name="isPercent"></param>
        /// <param name="itemCount"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetFilterTop10AsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, bool? isTop, bool? isPercent, int? itemCount, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isTop' is set
            if (isTop == null)
                throw new ApiException(400, "Missing required parameter 'isTop' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'isPercent' is set
            if (isPercent == null)
                throw new ApiException(400, "Missing required parameter 'isPercent' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");
            // verify the required parameter 'itemCount' is set
            if (itemCount == null)
                throw new ApiException(400, "Missing required parameter 'itemCount' when calling CellsApi->CellsAutoFilterPutWorksheetFilterTop10");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (isTop != null) localVarQueryParams.Add("isTop", Configuration.ApiClient.ParameterToString(isTop)); // query parameter
            if (isPercent != null) localVarQueryParams.Add("isPercent", Configuration.ApiClient.ParameterToString(isPercent)); // query parameter
            if (itemCount != null) localVarQueryParams.Add("itemCount", Configuration.ApiClient.ParameterToString(itemCount)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetFilterTop10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsAutoFilterPutWorksheetIconFilter(string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsAutoFilterPutWorksheetIconFilterWithHttpInfo(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsAutoFilterPutWorksheetIconFilterWithHttpInfo(string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconSetType' is set
            if (iconSetType == null)
                throw new ApiException(400, "Missing required parameter 'iconSetType' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconId' is set
            if (iconId == null)
                throw new ApiException(400, "Missing required parameter 'iconId' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (iconSetType != null) localVarQueryParams.Add("iconSetType", Configuration.ApiClient.ParameterToString(iconSetType)); // query parameter
            if (iconId != null) localVarQueryParams.Add("iconId", Configuration.ApiClient.ParameterToString(iconId)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetIconFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsAutoFilterPutWorksheetIconFilterAsync (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an icon filter. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="range"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="iconSetType"></param>
        /// <param name="iconId"></param>
        /// <param name="matchBlanks"> (optional)</param>
        /// <param name="refresh"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsAutoFilterPutWorksheetIconFilterAsyncWithHttpInfo (string name, string sheetName, string range, int? fieldIndex, string iconSetType, int? iconId, bool? matchBlanks = null, bool? refresh = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconSetType' is set
            if (iconSetType == null)
                throw new ApiException(400, "Missing required parameter 'iconSetType' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");
            // verify the required parameter 'iconId' is set
            if (iconId == null)
                throw new ApiException(400, "Missing required parameter 'iconId' when calling CellsApi->CellsAutoFilterPutWorksheetIconFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (iconSetType != null) localVarQueryParams.Add("iconSetType", Configuration.ApiClient.ParameterToString(iconSetType)); // query parameter
            if (iconId != null) localVarQueryParams.Add("iconId", Configuration.ApiClient.ParameterToString(iconId)); // query parameter
            if (matchBlanks != null) localVarQueryParams.Add("matchBlanks", Configuration.ApiClient.ParameterToString(matchBlanks)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoFilterPutWorksheetIconFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get autoshape info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsAutoshapesGetWorksheetAutoshape(string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsAutoshapesGetWorksheetAutoshapeWithHttpInfo(name, sheetName, autoshapeNumber, format, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get autoshape info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsAutoshapesGetWorksheetAutoshapeWithHttpInfo(string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshape");
            // verify the required parameter 'autoshapeNumber' is set
            if (autoshapeNumber == null)
                throw new ApiException(400, "Missing required parameter 'autoshapeNumber' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoshapes/{autoshapeNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (autoshapeNumber != null) localVarPathParams.Add("autoshapeNumber", Configuration.ApiClient.ParameterToString(autoshapeNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoshapesGetWorksheetAutoshape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get autoshape info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsAutoshapesGetWorksheetAutoshapeAsync (string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsAutoshapesGetWorksheetAutoshapeAsyncWithHttpInfo(name, sheetName, autoshapeNumber, format, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get autoshape info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="autoshapeNumber">The autoshape number.</param>
        /// <param name="format">Exported format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsAutoshapesGetWorksheetAutoshapeAsyncWithHttpInfo (string name, string sheetName, int? autoshapeNumber, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshape");
            // verify the required parameter 'autoshapeNumber' is set
            if (autoshapeNumber == null)
                throw new ApiException(400, "Missing required parameter 'autoshapeNumber' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoshapes/{autoshapeNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (autoshapeNumber != null) localVarPathParams.Add("autoshapeNumber", Configuration.ApiClient.ParameterToString(autoshapeNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoshapesGetWorksheetAutoshape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get worksheet autoshapes info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>AutoShapesResponse</returns>
        public AutoShapesResponse CellsAutoshapesGetWorksheetAutoshapes(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<AutoShapesResponse> localVarResponse = CellsAutoshapesGetWorksheetAutoshapesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet autoshapes info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of AutoShapesResponse</returns>
        public ApiResponse< AutoShapesResponse > CellsAutoshapesGetWorksheetAutoshapesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoshapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoshapesGetWorksheetAutoshapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoShapesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoShapesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoShapesResponse)));
        }

        /// <summary>
        /// Get worksheet autoshapes info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of AutoShapesResponse</returns>
        public async System.Threading.Tasks.Task<AutoShapesResponse> CellsAutoshapesGetWorksheetAutoshapesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<AutoShapesResponse> localVarResponse = await CellsAutoshapesGetWorksheetAutoshapesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet autoshapes info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (AutoShapesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoShapesResponse>> CellsAutoshapesGetWorksheetAutoshapesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsAutoshapesGetWorksheetAutoshapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autoshapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsAutoshapesGetWorksheetAutoshapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoShapesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoShapesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoShapesResponse)));
        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ChartAreaResponse</returns>
        public ChartAreaResponse CellsChartAreaGetChartArea(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ChartAreaResponse> localVarResponse = CellsChartAreaGetChartAreaWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ChartAreaResponse</returns>
        public ApiResponse< ChartAreaResponse > CellsChartAreaGetChartAreaWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartAreaGetChartArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartAreaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartAreaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartAreaResponse)));
        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ChartAreaResponse</returns>
        public async System.Threading.Tasks.Task<ChartAreaResponse> CellsChartAreaGetChartAreaAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<ChartAreaResponse> localVarResponse = await CellsChartAreaGetChartAreaAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ChartAreaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChartAreaResponse>> CellsChartAreaGetChartAreaAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartAreaGetChartArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartAreaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartAreaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartAreaResponse)));
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>LineResponse</returns>
        public LineResponse CellsChartAreaGetChartAreaBorder(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<LineResponse> localVarResponse = CellsChartAreaGetChartAreaBorderWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of LineResponse</returns>
        public ApiResponse< LineResponse > CellsChartAreaGetChartAreaBorderWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartAreaGetChartAreaBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineResponse)));
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of LineResponse</returns>
        public async System.Threading.Tasks.Task<LineResponse> CellsChartAreaGetChartAreaBorderAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<LineResponse> localVarResponse = await CellsChartAreaGetChartAreaBorderAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (LineResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineResponse>> CellsChartAreaGetChartAreaBorderAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartAreaGetChartAreaBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineResponse)));
        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>FillFormatResponse</returns>
        public FillFormatResponse CellsChartAreaGetChartAreaFillFormat(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<FillFormatResponse> localVarResponse = CellsChartAreaGetChartAreaFillFormatWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of FillFormatResponse</returns>
        public ApiResponse< FillFormatResponse > CellsChartAreaGetChartAreaFillFormatWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartAreaGetChartAreaFillFormat");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaFillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FillFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FillFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FillFormatResponse)));
        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of FillFormatResponse</returns>
        public async System.Threading.Tasks.Task<FillFormatResponse> CellsChartAreaGetChartAreaFillFormatAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<FillFormatResponse> localVarResponse = await CellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (FillFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FillFormatResponse>> CellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartAreaGetChartAreaFillFormat");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaFillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FillFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FillFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FillFormatResponse)));
        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsDeleteWorksheetChartLegend(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsDeleteWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsDeleteWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsDeleteWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsDeleteWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsDeleteWorksheetChartTitle(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsDeleteWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsDeleteWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsDeleteWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsDeleteWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsDeleteWorksheetClearCharts(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsDeleteWorksheetClearChartsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsDeleteWorksheetClearChartsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetClearCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetClearCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetClearCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetClearChartsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetClearCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetClearCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetClearCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsDeleteWorksheetDeleteChart(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsDeleteWorksheetDeleteChartWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsDeleteWorksheetDeleteChartWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsDeleteWorksheetDeleteChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetDeleteChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsDeleteWorksheetDeleteChartAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsDeleteWorksheetDeleteChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetDeleteChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsChartsGetWorksheetChart(string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsChartsGetWorksheetChartWithHttpInfo(name, sheetName, chartNumber, format, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsChartsGetWorksheetChartWithHttpInfo(string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'chartNumber' is set
            if (chartNumber == null)
                throw new ApiException(400, "Missing required parameter 'chartNumber' when calling CellsApi->CellsChartsGetWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartNumber != null) localVarPathParams.Add("chartNumber", Configuration.ApiClient.ParameterToString(chartNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsChartsGetWorksheetChartAsync (string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsChartsGetWorksheetChartAsyncWithHttpInfo(name, sheetName, chartNumber, format, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsChartsGetWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartNumber, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'chartNumber' is set
            if (chartNumber == null)
                throw new ApiException(400, "Missing required parameter 'chartNumber' when calling CellsApi->CellsChartsGetWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartNumber != null) localVarPathParams.Add("chartNumber", Configuration.ApiClient.ParameterToString(chartNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>LegendResponse</returns>
        public LegendResponse CellsChartsGetWorksheetChartLegend(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<LegendResponse> localVarResponse = CellsChartsGetWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of LegendResponse</returns>
        public ApiResponse< LegendResponse > CellsChartsGetWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsGetWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegendResponse)));
        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of LegendResponse</returns>
        public async System.Threading.Tasks.Task<LegendResponse> CellsChartsGetWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<LegendResponse> localVarResponse = await CellsChartsGetWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (LegendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegendResponse>> CellsChartsGetWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsGetWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegendResponse)));
        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TitleResponse</returns>
        public TitleResponse CellsChartsGetWorksheetChartTitle(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<TitleResponse> localVarResponse = CellsChartsGetWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        public ApiResponse< TitleResponse > CellsChartsGetWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsGetWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        public async System.Threading.Tasks.Task<TitleResponse> CellsChartsGetWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<TitleResponse> localVarResponse = await CellsChartsGetWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsGetWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsGetWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ChartsResponse</returns>
        public ChartsResponse CellsChartsGetWorksheetCharts(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ChartsResponse> localVarResponse = CellsChartsGetWorksheetChartsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        public ApiResponse< ChartsResponse > CellsChartsGetWorksheetChartsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        public async System.Threading.Tasks.Task<ChartsResponse> CellsChartsGetWorksheetChartsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = await CellsChartsGetWorksheetChartsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsGetWorksheetChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsGetWorksheetCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsGetWorksheetCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsPostWorksheetChart(string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsPostWorksheetChartWithHttpInfo(name, sheetName, chartIndex, chart, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsPostWorksheetChartWithHttpInfo(string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPostWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (chart != null && chart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chart; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPostWorksheetChartAsync (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsPostWorksheetChartAsyncWithHttpInfo(name, sheetName, chartIndex, chart, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPostWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPostWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (chart != null && chart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chart; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsPostWorksheetChartLegend(string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsPostWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, legend, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsPostWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPostWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (legend != null && legend.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legend; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPostWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsPostWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, legend, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPostWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPostWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (legend != null && legend.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legend; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsPostWorksheetChartTitle(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsPostWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsPostWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPostWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPostWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsPostWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, title, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPostWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPostWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="dataLabels"> (optional, default to true)</param>
        /// <param name="dataLabelsPosition"> (optional, default to Above)</param>
        /// <param name="pivotTableSheet"> (optional)</param>
        /// <param name="pivotTableName"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsPutWorksheetAddChart(string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsPutWorksheetAddChartWithHttpInfo(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storageName, dataLabels, dataLabelsPosition, pivotTableSheet, pivotTableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="dataLabels"> (optional, default to true)</param>
        /// <param name="dataLabelsPosition"> (optional, default to Above)</param>
        /// <param name="pivotTableSheet"> (optional)</param>
        /// <param name="pivotTableName"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsPutWorksheetAddChartWithHttpInfo(string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'chartType' is set
            if (chartType == null)
                throw new ApiException(400, "Missing required parameter 'chartType' when calling CellsApi->CellsChartsPutWorksheetAddChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartType != null) localVarQueryParams.Add("chartType", Configuration.ApiClient.ParameterToString(chartType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (area != null) localVarQueryParams.Add("area", Configuration.ApiClient.ParameterToString(area)); // query parameter
            if (isVertical != null) localVarQueryParams.Add("isVertical", Configuration.ApiClient.ParameterToString(isVertical)); // query parameter
            if (categoryData != null) localVarQueryParams.Add("categoryData", Configuration.ApiClient.ParameterToString(categoryData)); // query parameter
            if (isAutoGetSerialName != null) localVarQueryParams.Add("isAutoGetSerialName", Configuration.ApiClient.ParameterToString(isAutoGetSerialName)); // query parameter
            if (title != null) localVarQueryParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dataLabels != null) localVarQueryParams.Add("dataLabels", Configuration.ApiClient.ParameterToString(dataLabels)); // query parameter
            if (dataLabelsPosition != null) localVarQueryParams.Add("dataLabelsPosition", Configuration.ApiClient.ParameterToString(dataLabelsPosition)); // query parameter
            if (pivotTableSheet != null) localVarQueryParams.Add("pivotTableSheet", Configuration.ApiClient.ParameterToString(pivotTableSheet)); // query parameter
            if (pivotTableName != null) localVarQueryParams.Add("pivotTableName", Configuration.ApiClient.ParameterToString(pivotTableName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetAddChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="dataLabels"> (optional, default to true)</param>
        /// <param name="dataLabelsPosition"> (optional, default to Above)</param>
        /// <param name="pivotTableSheet"> (optional)</param>
        /// <param name="pivotTableName"> (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPutWorksheetAddChartAsync (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsPutWorksheetAddChartAsyncWithHttpInfo(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storageName, dataLabels, dataLabelsPosition, pivotTableSheet, pivotTableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="dataLabels"> (optional, default to true)</param>
        /// <param name="dataLabelsPosition"> (optional, default to Above)</param>
        /// <param name="pivotTableSheet"> (optional)</param>
        /// <param name="pivotTableName"> (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPutWorksheetAddChartAsyncWithHttpInfo (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null, string storageName = null, bool? dataLabels = null, string dataLabelsPosition = null, string pivotTableSheet = null, string pivotTableName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'chartType' is set
            if (chartType == null)
                throw new ApiException(400, "Missing required parameter 'chartType' when calling CellsApi->CellsChartsPutWorksheetAddChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartType != null) localVarQueryParams.Add("chartType", Configuration.ApiClient.ParameterToString(chartType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (area != null) localVarQueryParams.Add("area", Configuration.ApiClient.ParameterToString(area)); // query parameter
            if (isVertical != null) localVarQueryParams.Add("isVertical", Configuration.ApiClient.ParameterToString(isVertical)); // query parameter
            if (categoryData != null) localVarQueryParams.Add("categoryData", Configuration.ApiClient.ParameterToString(categoryData)); // query parameter
            if (isAutoGetSerialName != null) localVarQueryParams.Add("isAutoGetSerialName", Configuration.ApiClient.ParameterToString(isAutoGetSerialName)); // query parameter
            if (title != null) localVarQueryParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dataLabels != null) localVarQueryParams.Add("dataLabels", Configuration.ApiClient.ParameterToString(dataLabels)); // query parameter
            if (dataLabelsPosition != null) localVarQueryParams.Add("dataLabelsPosition", Configuration.ApiClient.ParameterToString(dataLabelsPosition)); // query parameter
            if (pivotTableSheet != null) localVarQueryParams.Add("pivotTableSheet", Configuration.ApiClient.ParameterToString(pivotTableSheet)); // query parameter
            if (pivotTableName != null) localVarQueryParams.Add("pivotTableName", Configuration.ApiClient.ParameterToString(pivotTableName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetAddChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsPutWorksheetChartLegend(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsPutWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsPutWorksheetChartLegendWithHttpInfo(string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPutWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPutWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsPutWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPutWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPutWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsChartsPutWorksheetChartTitle(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsChartsPutWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsChartsPutWorksheetChartTitleWithHttpInfo(string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPutWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsChartsPutWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsChartsPutWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, title, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsChartsPutWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsApi->CellsChartsPutWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormatting(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattings(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ConditionalFormattingResponse</returns>
        public ConditionalFormattingResponse CellsConditionalFormattingsGetWorksheetConditionalFormatting(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ConditionalFormattingResponse> localVarResponse = CellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingResponse</returns>
        public ApiResponse< ConditionalFormattingResponse > CellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingResponse)));
        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ConditionalFormattingResponse</returns>
        public async System.Threading.Tasks.Task<ConditionalFormattingResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             ApiResponse<ConditionalFormattingResponse> localVarResponse = await CellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingResponse)));
        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ConditionalFormattingsResponse</returns>
        public ConditionalFormattingsResponse CellsConditionalFormattingsGetWorksheetConditionalFormattings(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ConditionalFormattingsResponse> localVarResponse = CellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingsResponse</returns>
        public ApiResponse< ConditionalFormattingsResponse > CellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingsResponse)));
        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ConditionalFormattingsResponse</returns>
        public async System.Threading.Tasks.Task<ConditionalFormattingsResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<ConditionalFormattingsResponse> localVarResponse = await CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingsResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingsResponse)));
        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsPutWorksheetConditionalFormatting(string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(name, sheetName, cellArea, formatCondition, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (formatCondition != null && formatCondition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formatCondition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formatCondition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsync (string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo(name, sheetName, cellArea, formatCondition, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatCondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, string cellArea, FormatCondition formatCondition = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (formatCondition != null && formatCondition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formatCondition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formatCondition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsPutWorksheetFormatCondition(string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAsync (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsPutWorksheetFormatConditionArea(string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(name, sheetName, index, cellArea, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync (string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo(name, sheetName, index, cellArea, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsConditionalFormattingsPutWorksheetFormatConditionCondition(string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(name, sheetName, index, type, operatorType, formula1, formula2, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo(name, sheetName, index, type, operatorType, formula1, formula2, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsDeleteWorksheetColumns(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsDeleteWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsDeleteWorksheetColumnsWithHttpInfo(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'updateReference' is set
            if (updateReference == null)
                throw new ApiException(400, "Missing required parameter 'updateReference' when calling CellsApi->CellsDeleteWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsDeleteWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsDeleteWorksheetColumnsAsyncWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsDeleteWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsDeleteWorksheetColumns");
            // verify the required parameter 'updateReference' is set
            if (updateReference == null)
                throw new ApiException(400, "Missing required parameter 'updateReference' when calling CellsApi->CellsDeleteWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsDeleteWorksheetRow(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsDeleteWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsDeleteWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsDeleteWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsDeleteWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsDeleteWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsDeleteWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsDeleteWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsDeleteWorksheetRows(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsDeleteWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsDeleteWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsDeleteWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsDeleteWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsDeleteWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete several worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet bame.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsDeleteWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsDeleteWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsDeleteWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsDeleteWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        public Object CellsGetCellHtmlString(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<Object> localVarResponse = CellsGetCellHtmlStringWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CellsGetCellHtmlStringWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetCellHtmlString");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetCellHtmlString");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsGetCellHtmlString");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetCellHtmlString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CellsGetCellHtmlStringAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             ApiResponse<Object> localVarResponse = await CellsGetCellHtmlStringAsyncWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell&#39;s  name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CellsGetCellHtmlStringAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetCellHtmlString");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetCellHtmlString");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsGetCellHtmlString");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetCellHtmlString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        public Object CellsGetWorksheetCell(string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<Object> localVarResponse = CellsGetWorksheetCellWithHttpInfo(name, sheetName, cellOrMethodName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CellsGetWorksheetCellWithHttpInfo(string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'cellOrMethodName' is set
            if (cellOrMethodName == null)
                throw new ApiException(400, "Missing required parameter 'cellOrMethodName' when calling CellsApi->CellsGetWorksheetCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellOrMethodName != null) localVarPathParams.Add("cellOrMethodName", Configuration.ApiClient.ParameterToString(cellOrMethodName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CellsGetWorksheetCellAsync (string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null)
        {
             ApiResponse<Object> localVarResponse = await CellsGetWorksheetCellAsyncWithHttpInfo(name, sheetName, cellOrMethodName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read cell data by cell&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellOrMethodName">The cell&#39;s or method name. (Method name like firstcell, endcell etc.)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CellsGetWorksheetCellAsyncWithHttpInfo (string name, string sheetName, string cellOrMethodName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCell");
            // verify the required parameter 'cellOrMethodName' is set
            if (cellOrMethodName == null)
                throw new ApiException(400, "Missing required parameter 'cellOrMethodName' when calling CellsApi->CellsGetWorksheetCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellOrMethodName != null) localVarPathParams.Add("cellOrMethodName", Configuration.ApiClient.ParameterToString(cellOrMethodName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>StyleResponse</returns>
        public StyleResponse CellsGetWorksheetCellStyle(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<StyleResponse> localVarResponse = CellsGetWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        public ApiResponse< StyleResponse > CellsGetWorksheetCellStyleWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsGetWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        public async System.Threading.Tasks.Task<StyleResponse> CellsGetWorksheetCellStyleAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             ApiResponse<StyleResponse> localVarResponse = await CellsGetWorksheetCellStyleAsyncWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read cell&#39;s style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">Cell&#39;s name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsGetWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsGetWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsResponse</returns>
        public CellsResponse CellsGetWorksheetCells(string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsResponse> localVarResponse = CellsGetWorksheetCellsWithHttpInfo(name, sheetName, offest, count, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsResponse</returns>
        public ApiResponse< CellsResponse > CellsGetWorksheetCellsWithHttpInfo(string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCells");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCells");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (offest != null) localVarQueryParams.Add("offest", Configuration.ApiClient.ParameterToString(offest)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsResponse)));
        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsResponse</returns>
        public async System.Threading.Tasks.Task<CellsResponse> CellsGetWorksheetCellsAsync (string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsResponse> localVarResponse = await CellsGetWorksheetCellsAsyncWithHttpInfo(name, sheetName, offest, count, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cells info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="offest">Begginig offset. (optional, default to 0)</param>
        /// <param name="count">Maximum amount of cells in the response. (optional, default to 0)</param>
        /// <param name="folder">Document&#39;s folder name. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsResponse>> CellsGetWorksheetCellsAsyncWithHttpInfo (string name, string sheetName, int? offest = null, int? count = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetCells");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetCells");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (offest != null) localVarQueryParams.Add("offest", Configuration.ApiClient.ParameterToString(offest)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsResponse)));
        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ColumnResponse</returns>
        public ColumnResponse CellsGetWorksheetColumn(string name, string sheetName, int? columnIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ColumnResponse> localVarResponse = CellsGetWorksheetColumnWithHttpInfo(name, sheetName, columnIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ColumnResponse</returns>
        public ApiResponse< ColumnResponse > CellsGetWorksheetColumnWithHttpInfo(string name, string sheetName, int? columnIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsGetWorksheetColumn");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnResponse)));
        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ColumnResponse</returns>
        public async System.Threading.Tasks.Task<ColumnResponse> CellsGetWorksheetColumnAsync (string name, string sheetName, int? columnIndex, string folder = null, string storageName = null)
        {
             ApiResponse<ColumnResponse> localVarResponse = await CellsGetWorksheetColumnAsyncWithHttpInfo(name, sheetName, columnIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet column data by column&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnResponse>> CellsGetWorksheetColumnAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumn");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsGetWorksheetColumn");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnResponse)));
        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ColumnsResponse</returns>
        public ColumnsResponse CellsGetWorksheetColumns(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ColumnsResponse> localVarResponse = CellsGetWorksheetColumnsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ColumnsResponse</returns>
        public ApiResponse< ColumnsResponse > CellsGetWorksheetColumnsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ColumnsResponse</returns>
        public async System.Threading.Tasks.Task<ColumnsResponse> CellsGetWorksheetColumnsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<ColumnsResponse> localVarResponse = await CellsGetWorksheetColumnsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet columns info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ColumnsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ColumnsResponse>> CellsGetWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ColumnsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ColumnsResponse)));
        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RowResponse</returns>
        public RowResponse CellsGetWorksheetRow(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<RowResponse> localVarResponse = CellsGetWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RowResponse</returns>
        public ApiResponse< RowResponse > CellsGetWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsGetWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of RowResponse</returns>
        public async System.Threading.Tasks.Task<RowResponse> CellsGetWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
             ApiResponse<RowResponse> localVarResponse = await CellsGetWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet row data by row&#39;s index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (RowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowResponse>> CellsGetWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsGetWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowResponse)));
        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RowsResponse</returns>
        public RowsResponse CellsGetWorksheetRows(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<RowsResponse> localVarResponse = CellsGetWorksheetRowsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RowsResponse</returns>
        public ApiResponse< RowsResponse > CellsGetWorksheetRowsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowsResponse)));
        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of RowsResponse</returns>
        public async System.Threading.Tasks.Task<RowsResponse> CellsGetWorksheetRowsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<RowsResponse> localVarResponse = await CellsGetWorksheetRowsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet rows info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workdook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (RowsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RowsResponse>> CellsGetWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsGetWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsGetWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsGetWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RowsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RowsResponse)));
        }

        /// <summary>
        /// Delete worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsHypelinksDeleteWorksheetHyperlink(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlink");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksDeleteWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksDeleteWorksheetHyperlinkAsync (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsHypelinksDeleteWorksheetHyperlinkAsyncWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksDeleteWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlink");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksDeleteWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all hyperlinks in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsHypelinksDeleteWorksheetHyperlinks(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all hyperlinks in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlinks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlinks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksDeleteWorksheetHyperlinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all hyperlinks in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksDeleteWorksheetHyperlinksAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsHypelinksDeleteWorksheetHyperlinksAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all hyperlinks in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksDeleteWorksheetHyperlinksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlinks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksDeleteWorksheetHyperlinks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksDeleteWorksheetHyperlinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HyperlinkResponse</returns>
        public HyperlinkResponse CellsHypelinksGetWorksheetHyperlink(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<HyperlinkResponse> localVarResponse = CellsHypelinksGetWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HyperlinkResponse</returns>
        public ApiResponse< HyperlinkResponse > CellsHypelinksGetWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksGetWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksGetWorksheetHyperlink");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling CellsApi->CellsHypelinksGetWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksGetWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperlinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperlinkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperlinkResponse)));
        }

        /// <summary>
        /// Get worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of HyperlinkResponse</returns>
        public async System.Threading.Tasks.Task<HyperlinkResponse> CellsHypelinksGetWorksheetHyperlinkAsync (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
             ApiResponse<HyperlinkResponse> localVarResponse = await CellsHypelinksGetWorksheetHyperlinkAsyncWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (HyperlinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HyperlinkResponse>> CellsHypelinksGetWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? hyperlinkIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksGetWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksGetWorksheetHyperlink");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling CellsApi->CellsHypelinksGetWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksGetWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperlinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperlinkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperlinkResponse)));
        }

        /// <summary>
        /// Get worksheet hyperlinks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HyperlinksResponse</returns>
        public HyperlinksResponse CellsHypelinksGetWorksheetHyperlinks(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<HyperlinksResponse> localVarResponse = CellsHypelinksGetWorksheetHyperlinksWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet hyperlinks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HyperlinksResponse</returns>
        public ApiResponse< HyperlinksResponse > CellsHypelinksGetWorksheetHyperlinksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksGetWorksheetHyperlinks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksGetWorksheetHyperlinks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksGetWorksheetHyperlinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperlinksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperlinksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperlinksResponse)));
        }

        /// <summary>
        /// Get worksheet hyperlinks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of HyperlinksResponse</returns>
        public async System.Threading.Tasks.Task<HyperlinksResponse> CellsHypelinksGetWorksheetHyperlinksAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<HyperlinksResponse> localVarResponse = await CellsHypelinksGetWorksheetHyperlinksAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet hyperlinks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (HyperlinksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HyperlinksResponse>> CellsHypelinksGetWorksheetHyperlinksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksGetWorksheetHyperlinks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksGetWorksheetHyperlinks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksGetWorksheetHyperlinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperlinksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperlinksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperlinksResponse)));
        }

        /// <summary>
        /// Update worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsHypelinksPostWorksheetHyperlink(string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsHypelinksPostWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, hyperlink, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsHypelinksPostWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksPostWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksPostWorksheetHyperlink");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling CellsApi->CellsHypelinksPostWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (hyperlink != null && hyperlink.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hyperlink); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hyperlink; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksPostWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksPostWorksheetHyperlinkAsync (string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsHypelinksPostWorksheetHyperlinkAsyncWithHttpInfo(name, sheetName, hyperlinkIndex, hyperlink, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet hyperlink by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="hyperlinkIndex">The hyperlink&#39;s index.</param>
        /// <param name="hyperlink">Hyperlink object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksPostWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? hyperlinkIndex, Hyperlink hyperlink = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksPostWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksPostWorksheetHyperlink");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling CellsApi->CellsHypelinksPostWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (hyperlink != null && hyperlink.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(hyperlink); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hyperlink; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksPostWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add worksheet hyperlink. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsHypelinksPutWorksheetHyperlink(string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsHypelinksPutWorksheetHyperlinkWithHttpInfo(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add worksheet hyperlink. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsHypelinksPutWorksheetHyperlinkWithHttpInfo(string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'firstRow' is set
            if (firstRow == null)
                throw new ApiException(400, "Missing required parameter 'firstRow' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'firstColumn' is set
            if (firstColumn == null)
                throw new ApiException(400, "Missing required parameter 'firstColumn' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksPutWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add worksheet hyperlink. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsHypelinksPutWorksheetHyperlinkAsync (string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsHypelinksPutWorksheetHyperlinkAsyncWithHttpInfo(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add worksheet hyperlink. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="firstRow"></param>
        /// <param name="firstColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="address"></param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsHypelinksPutWorksheetHyperlinkAsyncWithHttpInfo (string name, string sheetName, int? firstRow, int? firstColumn, int? totalRows, int? totalColumns, string address, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'firstRow' is set
            if (firstRow == null)
                throw new ApiException(400, "Missing required parameter 'firstRow' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'firstColumn' is set
            if (firstColumn == null)
                throw new ApiException(400, "Missing required parameter 'firstColumn' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling CellsApi->CellsHypelinksPutWorksheetHyperlink");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsHypelinksPutWorksheetHyperlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet list object by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsDeleteWorksheetListObject(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsDeleteWorksheetListObjectWithHttpInfo(name, sheetName, listObjectIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet list object by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsDeleteWorksheetListObjectWithHttpInfo(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsDeleteWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsDeleteWorksheetListObject");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsDeleteWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsDeleteWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet list object by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsDeleteWorksheetListObjectAsync (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo(name, sheetName, listObjectIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet list object by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">List object index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsDeleteWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsDeleteWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsDeleteWorksheetListObject");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsDeleteWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsDeleteWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet list objects 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsDeleteWorksheetListObjects(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet list objects 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsDeleteWorksheetListObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsDeleteWorksheetListObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsDeleteWorksheetListObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet list objects 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsDeleteWorksheetListObjectsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet list objects 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsDeleteWorksheetListObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsDeleteWorksheetListObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsDeleteWorksheetListObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsDeleteWorksheetListObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get worksheet list object info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsListObjectsGetWorksheetListObject(string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsListObjectsGetWorksheetListObjectWithHttpInfo(name, sheetName, listobjectindex, format, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet list object info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsListObjectsGetWorksheetListObjectWithHttpInfo(string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsGetWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsGetWorksheetListObject");
            // verify the required parameter 'listobjectindex' is set
            if (listobjectindex == null)
                throw new ApiException(400, "Missing required parameter 'listobjectindex' when calling CellsApi->CellsListObjectsGetWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listobjectindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listobjectindex != null) localVarPathParams.Add("listobjectindex", Configuration.ApiClient.ParameterToString(listobjectindex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsGetWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get worksheet list object info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsListObjectsGetWorksheetListObjectAsync (string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo(name, sheetName, listobjectindex, format, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet list object info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listobjectindex">list object index.</param>
        /// <param name="format">export format. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsListObjectsGetWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? listobjectindex, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsGetWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsGetWorksheetListObject");
            // verify the required parameter 'listobjectindex' is set
            if (listobjectindex == null)
                throw new ApiException(400, "Missing required parameter 'listobjectindex' when calling CellsApi->CellsListObjectsGetWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listobjectindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listobjectindex != null) localVarPathParams.Add("listobjectindex", Configuration.ApiClient.ParameterToString(listobjectindex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsGetWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get worksheet listobjects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ListObjectsResponse</returns>
        public ListObjectsResponse CellsListObjectsGetWorksheetListObjects(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ListObjectsResponse> localVarResponse = CellsListObjectsGetWorksheetListObjectsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet listobjects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ListObjectsResponse</returns>
        public ApiResponse< ListObjectsResponse > CellsListObjectsGetWorksheetListObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsGetWorksheetListObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsGetWorksheetListObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsGetWorksheetListObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListObjectsResponse)));
        }

        /// <summary>
        /// Get worksheet listobjects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ListObjectsResponse</returns>
        public async System.Threading.Tasks.Task<ListObjectsResponse> CellsListObjectsGetWorksheetListObjectsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<ListObjectsResponse> localVarResponse = await CellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet listobjects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ListObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListObjectsResponse>> CellsListObjectsGetWorksheetListObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsGetWorksheetListObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsGetWorksheetListObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsGetWorksheetListObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListObjectsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPostWorksheetListColumn(string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPostWorksheetListColumnWithHttpInfo(name, sheetName, listObjectIndex, columnIndex, listColumn, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPostWorksheetListColumnWithHttpInfo(string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/listcolumns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listColumn != null && listColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listColumn; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListColumnAsync (string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPostWorksheetListColumnAsyncWithHttpInfo(name, sheetName, listObjectIndex, columnIndex, listColumn, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="columnIndex"></param>
        /// <param name="listColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListColumnAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, int? columnIndex, ListColumn listColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsListObjectsPostWorksheetListColumn");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/listcolumns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listColumn != null && listColumn.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listColumn); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listColumn; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPostWorksheetListColumnsTotal(string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPostWorksheetListColumnsTotalWithHttpInfo(name, sheetName, listObjectIndex, tableTotalRequests, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPostWorksheetListColumnsTotalWithHttpInfo(string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListColumnsTotal");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListColumnsTotal");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListColumnsTotal");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/listcolumns/total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (tableTotalRequests != null && tableTotalRequests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tableTotalRequests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tableTotalRequests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListColumnsTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListColumnsTotalAsync (string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPostWorksheetListColumnsTotalAsyncWithHttpInfo(name, sheetName, listObjectIndex, tableTotalRequests, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="tableTotalRequests"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListColumnsTotalAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, List<TableTotalRequest> tableTotalRequests = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListColumnsTotal");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListColumnsTotal");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListColumnsTotal");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/listcolumns/total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (tableTotalRequests != null && tableTotalRequests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tableTotalRequests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tableTotalRequests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListColumnsTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update  list object  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPostWorksheetListObject(string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPostWorksheetListObjectWithHttpInfo(name, sheetName, listObjectIndex, listObject, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update  list object  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPostWorksheetListObjectWithHttpInfo(string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObject");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listObject != null && listObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update  list object  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectAsync (string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo(name, sheetName, listObjectIndex, listObject, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update  list object  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="listObjectIndex">list Object index</param>
        /// <param name="listObject">listObject dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, ListObject listObject = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObject");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listObject != null && listObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPostWorksheetListObjectConvertToRange(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(name, sheetName, listObjectIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObjectConvertToRange");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectConvertToRange");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObjectConvertToRange");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/ConvertToRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObjectConvertToRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectConvertToRangeAsync (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo(name, sheetName, listObjectIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectConvertToRangeAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObjectConvertToRange");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectConvertToRange");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObjectConvertToRange");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/ConvertToRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObjectConvertToRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPostWorksheetListObjectSortTable(string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(name, sheetName, listObjectIndex, dataSorter, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSortTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSortTable");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSortTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dataSorter != null && dataSorter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataSorter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSorter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObjectSortTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectSortTableAsync (string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo(name, sheetName, listObjectIndex, dataSorter, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="dataSorter"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectSortTableAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSortTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSortTable");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSortTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dataSorter != null && dataSorter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataSorter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSorter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObjectSortTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(name, sheetName, listObjectIndex, destsheetName, request, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");
            // verify the required parameter 'destsheetName' is set
            if (destsheetName == null)
                throw new ApiException(400, "Missing required parameter 'destsheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/SummarizeWithPivotTable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (destsheetName != null) localVarQueryParams.Add("destsheetName", Configuration.ApiClient.ParameterToString(destsheetName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync (string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo(name, sheetName, listObjectIndex, destsheetName, request, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="listObjectIndex"></param>
        /// <param name="destsheetName"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsyncWithHttpInfo (string name, string sheetName, int? listObjectIndex, string destsheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");
            // verify the required parameter 'listObjectIndex' is set
            if (listObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'listObjectIndex' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");
            // verify the required parameter 'destsheetName' is set
            if (destsheetName == null)
                throw new ApiException(400, "Missing required parameter 'destsheetName' when calling CellsApi->CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/SummarizeWithPivotTable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (listObjectIndex != null) localVarPathParams.Add("listObjectIndex", Configuration.ApiClient.ParameterToString(listObjectIndex)); // path parameter
            if (destsheetName != null) localVarQueryParams.Add("destsheetName", Configuration.ApiClient.ParameterToString(destsheetName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a list object into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers. (optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name.. (optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row.. (optional, default to true)</param>
        /// <param name="listObject">List Object (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsListObjectsPutWorksheetListObject(string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsListObjectsPutWorksheetListObjectWithHttpInfo(name, sheetName, startRow, startColumn, endRow, endColumn, hasHeaders, displayName, showTotals, listObject, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a list object into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers. (optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name.. (optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row.. (optional, default to true)</param>
        /// <param name="listObject">List Object (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsListObjectsPutWorksheetListObjectWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'endRow' is set
            if (endRow == null)
                throw new ApiException(400, "Missing required parameter 'endRow' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'endColumn' is set
            if (endColumn == null)
                throw new ApiException(400, "Missing required parameter 'endColumn' when calling CellsApi->CellsListObjectsPutWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (hasHeaders != null) localVarQueryParams.Add("hasHeaders", Configuration.ApiClient.ParameterToString(hasHeaders)); // query parameter
            if (displayName != null) localVarQueryParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // query parameter
            if (showTotals != null) localVarQueryParams.Add("showTotals", Configuration.ApiClient.ParameterToString(showTotals)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listObject != null && listObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPutWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a list object into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers. (optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name.. (optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row.. (optional, default to true)</param>
        /// <param name="listObject">List Object (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsListObjectsPutWorksheetListObjectAsync (string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo(name, sheetName, startRow, startColumn, endRow, endColumn, hasHeaders, displayName, showTotals, listObject, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a list object into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row of the list range.</param>
        /// <param name="startColumn">The start row of the list range.</param>
        /// <param name="endRow">The start row of the list range.</param>
        /// <param name="endColumn">The start row of the list range.</param>
        /// <param name="hasHeaders">Whether the range has headers. (optional, default to true)</param>
        /// <param name="displayName">Gets and sets the display name.. (optional, default to true)</param>
        /// <param name="showTotals">Gets and sets whether this ListObject show total row.. (optional, default to true)</param>
        /// <param name="listObject">List Object (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsListObjectsPutWorksheetListObjectAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? endRow, int? endColumn, bool? hasHeaders = null, bool? displayName = null, bool? showTotals = null, ListObject listObject = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'endRow' is set
            if (endRow == null)
                throw new ApiException(400, "Missing required parameter 'endRow' when calling CellsApi->CellsListObjectsPutWorksheetListObject");
            // verify the required parameter 'endColumn' is set
            if (endColumn == null)
                throw new ApiException(400, "Missing required parameter 'endColumn' when calling CellsApi->CellsListObjectsPutWorksheetListObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (hasHeaders != null) localVarQueryParams.Add("hasHeaders", Configuration.ApiClient.ParameterToString(hasHeaders)); // query parameter
            if (displayName != null) localVarQueryParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // query parameter
            if (showTotals != null) localVarQueryParams.Add("showTotals", Configuration.ApiClient.ParameterToString(showTotals)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listObject != null && listObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsListObjectsPutWorksheetListObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsOleObjectsDeleteWorksheetOleObject(string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsDeleteWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, oleObjectIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsDeleteWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsOleObjectsDeleteWorksheetOleObjects(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsDeleteWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all OLE objects. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsDeleteWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsDeleteWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsDeleteWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsOleObjectsGetWorksheetOleObject(string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsOleObjectsGetWorksheetOleObjectWithHttpInfo(name, sheetName, objectNumber, format, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsOleObjectsGetWorksheetOleObjectWithHttpInfo(string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'objectNumber' is set
            if (objectNumber == null)
                throw new ApiException(400, "Missing required parameter 'objectNumber' when calling CellsApi->CellsOleObjectsGetWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (objectNumber != null) localVarPathParams.Add("objectNumber", Configuration.ApiClient.ParameterToString(objectNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsOleObjectsGetWorksheetOleObjectAsync (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, objectNumber, format, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OLE object info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="objectNumber">The object number.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsOleObjectsGetWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? objectNumber, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsGetWorksheetOleObject");
            // verify the required parameter 'objectNumber' is set
            if (objectNumber == null)
                throw new ApiException(400, "Missing required parameter 'objectNumber' when calling CellsApi->CellsOleObjectsGetWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (objectNumber != null) localVarPathParams.Add("objectNumber", Configuration.ApiClient.ParameterToString(objectNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>OleObjectsResponse</returns>
        public OleObjectsResponse CellsOleObjectsGetWorksheetOleObjects(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<OleObjectsResponse> localVarResponse = CellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of OleObjectsResponse</returns>
        public ApiResponse< OleObjectsResponse > CellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsGetWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsGetWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OleObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OleObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OleObjectsResponse)));
        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of OleObjectsResponse</returns>
        public async System.Threading.Tasks.Task<OleObjectsResponse> CellsOleObjectsGetWorksheetOleObjectsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<OleObjectsResponse> localVarResponse = await CellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet OLE objects info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (OleObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OleObjectsResponse>> CellsOleObjectsGetWorksheetOleObjectsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsGetWorksheetOleObjects");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsGetWorksheetOleObjects");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsGetWorksheetOleObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OleObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OleObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OleObjectsResponse)));
        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsOleObjectsPostUpdateWorksheetOleObject(string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, ole, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsApi->CellsOleObjectsPostUpdateWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (ole != null && ole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ole; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPostUpdateWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsPostUpdateWorksheetOleObjectAsync (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, oleObjectIndex, ole, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update OLE object. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObjectIndex">Ole object index</param>
        /// <param name="ole">Ole Object (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsPostUpdateWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, int? oleObjectIndex, OleObject ole = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsPostUpdateWorksheetOleObject");
            // verify the required parameter 'oleObjectIndex' is set
            if (oleObjectIndex == null)
                throw new ApiException(400, "Missing required parameter 'oleObjectIndex' when calling CellsApi->CellsOleObjectsPostUpdateWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oleObjectIndex != null) localVarPathParams.Add("oleObjectIndex", Configuration.ApiClient.ParameterToString(oleObjectIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (ole != null && ole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ole; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPostUpdateWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsOleObjectsPutWorksheetOleObject(string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsOleObjectsPutWorksheetOleObjectWithHttpInfo(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsOleObjectsPutWorksheetOleObjectWithHttpInfo(string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsPutWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsPutWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (oleFile != null) localVarQueryParams.Add("oleFile", Configuration.ApiClient.ParameterToString(oleFile)); // query parameter
            if (imageFile != null) localVarQueryParams.Add("imageFile", Configuration.ApiClient.ParameterToString(imageFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (oleObject != null && oleObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(oleObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oleObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPutWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsOleObjectsPutWorksheetOleObjectAsync (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add OLE object 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="oleObject">Ole Object (optional)</param>
        /// <param name="upperLeftRow">Upper left row index (optional, default to 0)</param>
        /// <param name="upperLeftColumn">Upper left column index (optional, default to 0)</param>
        /// <param name="height">Height of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="width">Width of oleObject, in unit of pixel (optional, default to 0)</param>
        /// <param name="oleFile">OLE filename (optional)</param>
        /// <param name="imageFile">Image filename (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsOleObjectsPutWorksheetOleObjectAsyncWithHttpInfo (string name, string sheetName, OleObject oleObject = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? height = null, int? width = null, string oleFile = null, string imageFile = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsOleObjectsPutWorksheetOleObject");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsOleObjectsPutWorksheetOleObject");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (oleFile != null) localVarQueryParams.Add("oleFile", Configuration.ApiClient.ParameterToString(oleFile)); // query parameter
            if (imageFile != null) localVarQueryParams.Add("imageFile", Configuration.ApiClient.ParameterToString(imageFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (oleObject != null && oleObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(oleObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oleObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsOleObjectsPutWorksheetOleObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageBreaksDeleteHorizontalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteHorizontalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteHorizontalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteHorizontalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteHorizontalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageBreaksDeleteHorizontalPageBreaks(string name, string sheetName, int? row = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(name, sheetName, row, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(string name, string sheetName, int? row = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteHorizontalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteHorizontalPageBreaksAsync (string name, string sheetName, int? row = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo(name, sheetName, row, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteHorizontalPageBreaksAsyncWithHttpInfo (string name, string sheetName, int? row = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteHorizontalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteHorizontalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageBreaksDeleteVerticalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteVerticalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteVerticalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteVerticalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteVerticalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageBreaksDeleteVerticalPageBreaks(string name, string sheetName, int? column = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(name, sheetName, column, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(string name, string sheetName, int? column = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteVerticalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksDeleteVerticalPageBreaksAsync (string name, string sheetName, int? column = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo(name, sheetName, column, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="column"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksDeleteVerticalPageBreaksAsyncWithHttpInfo (string name, string sheetName, int? column = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksDeleteVerticalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksDeleteVerticalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HorizontalPageBreakResponse</returns>
        public HorizontalPageBreakResponse CellsPageBreaksGetHorizontalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<HorizontalPageBreakResponse> localVarResponse = CellsPageBreaksGetHorizontalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HorizontalPageBreakResponse</returns>
        public ApiResponse< HorizontalPageBreakResponse > CellsPageBreaksGetHorizontalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetHorizontalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HorizontalPageBreakResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HorizontalPageBreakResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HorizontalPageBreakResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of HorizontalPageBreakResponse</returns>
        public async System.Threading.Tasks.Task<HorizontalPageBreakResponse> CellsPageBreaksGetHorizontalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             ApiResponse<HorizontalPageBreakResponse> localVarResponse = await CellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (HorizontalPageBreakResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HorizontalPageBreakResponse>> CellsPageBreaksGetHorizontalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetHorizontalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HorizontalPageBreakResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HorizontalPageBreakResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HorizontalPageBreakResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>HorizontalPageBreaksResponse</returns>
        public HorizontalPageBreaksResponse CellsPageBreaksGetHorizontalPageBreaks(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<HorizontalPageBreaksResponse> localVarResponse = CellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of HorizontalPageBreaksResponse</returns>
        public ApiResponse< HorizontalPageBreaksResponse > CellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetHorizontalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HorizontalPageBreaksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HorizontalPageBreaksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HorizontalPageBreaksResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of HorizontalPageBreaksResponse</returns>
        public async System.Threading.Tasks.Task<HorizontalPageBreaksResponse> CellsPageBreaksGetHorizontalPageBreaksAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<HorizontalPageBreaksResponse> localVarResponse = await CellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (HorizontalPageBreaksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HorizontalPageBreaksResponse>> CellsPageBreaksGetHorizontalPageBreaksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetHorizontalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetHorizontalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HorizontalPageBreaksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HorizontalPageBreaksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HorizontalPageBreaksResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>VerticalPageBreakResponse</returns>
        public VerticalPageBreakResponse CellsPageBreaksGetVerticalPageBreak(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<VerticalPageBreakResponse> localVarResponse = CellsPageBreaksGetVerticalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of VerticalPageBreakResponse</returns>
        public ApiResponse< VerticalPageBreakResponse > CellsPageBreaksGetVerticalPageBreakWithHttpInfo(string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetVerticalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetVerticalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksGetVerticalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetVerticalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerticalPageBreakResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerticalPageBreakResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerticalPageBreakResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of VerticalPageBreakResponse</returns>
        public async System.Threading.Tasks.Task<VerticalPageBreakResponse> CellsPageBreaksGetVerticalPageBreakAsync (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
             ApiResponse<VerticalPageBreakResponse> localVarResponse = await CellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo(name, sheetName, index, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (VerticalPageBreakResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerticalPageBreakResponse>> CellsPageBreaksGetVerticalPageBreakAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetVerticalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetVerticalPageBreak");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsApi->CellsPageBreaksGetVerticalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetVerticalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerticalPageBreakResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerticalPageBreakResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerticalPageBreakResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>VerticalPageBreaksResponse</returns>
        public VerticalPageBreaksResponse CellsPageBreaksGetVerticalPageBreaks(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<VerticalPageBreaksResponse> localVarResponse = CellsPageBreaksGetVerticalPageBreaksWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of VerticalPageBreaksResponse</returns>
        public ApiResponse< VerticalPageBreaksResponse > CellsPageBreaksGetVerticalPageBreaksWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetVerticalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetVerticalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetVerticalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerticalPageBreaksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerticalPageBreaksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerticalPageBreaksResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of VerticalPageBreaksResponse</returns>
        public async System.Threading.Tasks.Task<VerticalPageBreaksResponse> CellsPageBreaksGetVerticalPageBreaksAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<VerticalPageBreaksResponse> localVarResponse = await CellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (VerticalPageBreaksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerticalPageBreaksResponse>> CellsPageBreaksGetVerticalPageBreaksAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksGetVerticalPageBreaks");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksGetVerticalPageBreaks");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksGetVerticalPageBreaks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerticalPageBreaksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerticalPageBreaksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerticalPageBreaksResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="startColumn"> (optional)</param>
        /// <param name="endColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageBreaksPutHorizontalPageBreak(string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageBreaksPutHorizontalPageBreakWithHttpInfo(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="startColumn"> (optional)</param>
        /// <param name="endColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageBreaksPutHorizontalPageBreakWithHttpInfo(string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksPutHorizontalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksPutHorizontalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksPutHorizontalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="startColumn"> (optional)</param>
        /// <param name="endColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksPutHorizontalPageBreakAsync (string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="startColumn"> (optional)</param>
        /// <param name="endColumn"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksPutHorizontalPageBreakAsyncWithHttpInfo (string name, string sheetName, string cellname = null, int? row = null, int? column = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksPutHorizontalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksPutHorizontalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksPutHorizontalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="endRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageBreaksPutVerticalPageBreak(string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageBreaksPutVerticalPageBreakWithHttpInfo(name, sheetName, cellname, column, row, startRow, endRow, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="endRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageBreaksPutVerticalPageBreakWithHttpInfo(string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksPutVerticalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksPutVerticalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksPutVerticalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="endRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageBreaksPutVerticalPageBreakAsync (string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo(name, sheetName, cellname, column, row, startRow, endRow, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellname"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="row"> (optional)</param>
        /// <param name="startRow"> (optional)</param>
        /// <param name="endRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageBreaksPutVerticalPageBreakAsyncWithHttpInfo (string name, string sheetName, string cellname = null, int? column = null, int? row = null, int? startRow = null, int? endRow = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageBreaksPutVerticalPageBreak");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageBreaksPutVerticalPageBreak");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageBreaksPutVerticalPageBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageSetupDeleteHeaderFooter(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageSetupDeleteHeaderFooterWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageSetupDeleteHeaderFooterWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupDeleteHeaderFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupDeleteHeaderFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupDeleteHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupDeleteHeaderFooterAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupDeleteHeaderFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupDeleteHeaderFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupDeleteHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        public PageSectionsResponse CellsPageSetupGetFooter(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PageSectionsResponse> localVarResponse = CellsPageSetupGetFooterWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        public ApiResponse< PageSectionsResponse > CellsPageSetupGetFooterWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupGetFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupGetFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        public async System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetFooterAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<PageSectionsResponse> localVarResponse = await CellsPageSetupGetFooterAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupGetFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupGetFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        public PageSectionsResponse CellsPageSetupGetHeader(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PageSectionsResponse> localVarResponse = CellsPageSetupGetHeaderWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        public ApiResponse< PageSectionsResponse > CellsPageSetupGetHeaderWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupGetHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupGetHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        public async System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetHeaderAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<PageSectionsResponse> localVarResponse = await CellsPageSetupGetHeaderAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetHeaderAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupGetHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupGetHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PageSetupResponse</returns>
        public PageSetupResponse CellsPageSetupGetPageSetup(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PageSetupResponse> localVarResponse = CellsPageSetupGetPageSetupWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PageSetupResponse</returns>
        public ApiResponse< PageSetupResponse > CellsPageSetupGetPageSetupWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupGetPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupGetPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSetupResponse)));
        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PageSetupResponse</returns>
        public async System.Threading.Tasks.Task<PageSetupResponse> CellsPageSetupGetPageSetupAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<PageSetupResponse> localVarResponse = await CellsPageSetupGetPageSetupAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PageSetupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSetupResponse>> CellsPageSetupGetPageSetupAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupGetPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupGetPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSetupResponse)));
        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageSetupPostFooter(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageSetupPostFooterWithHttpInfo(name, sheetName, section, script, isFirstPage, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageSetupPostFooterWithHttpInfo(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsApi->CellsPageSetupPostFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupPostFooterAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageSetupPostFooterAsyncWithHttpInfo(name, sheetName, section, script, isFirstPage, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupPostFooterAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsApi->CellsPageSetupPostFooter");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsApi->CellsPageSetupPostFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageSetupPostHeader(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageSetupPostHeaderWithHttpInfo(name, sheetName, section, script, isFirstPage, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageSetupPostHeaderWithHttpInfo(string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsApi->CellsPageSetupPostHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupPostHeaderAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageSetupPostHeaderAsyncWithHttpInfo(name, sheetName, section, script, isFirstPage, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupPostHeaderAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsApi->CellsPageSetupPostHeader");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsApi->CellsPageSetupPostHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPageSetupPostPageSetup(string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPageSetupPostPageSetupWithHttpInfo(name, sheetName, pageSetup, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPageSetupPostPageSetupWithHttpInfo(string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupPostPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupPostPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (pageSetup != null && pageSetup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageSetup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageSetup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPageSetupPostPageSetupAsync (string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPageSetupPostPageSetupAsyncWithHttpInfo(name, sheetName, pageSetup, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPageSetupPostPageSetupAsyncWithHttpInfo (string name, string sheetName, PageSetup pageSetup = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPageSetupPostPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPageSetupPostPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (pageSetup != null && pageSetup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageSetup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageSetup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>BarcodeResponseList</returns>
        public BarcodeResponseList CellsPictureGetExtractBarcodes(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<BarcodeResponseList> localVarResponse = CellsPictureGetExtractBarcodesWithHttpInfo(name, sheetName, pictureIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of BarcodeResponseList</returns>
        public ApiResponse< BarcodeResponseList > CellsPictureGetExtractBarcodesWithHttpInfo(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPictureGetExtractBarcodes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPictureGetExtractBarcodes");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPictureGetExtractBarcodes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPictureGetExtractBarcodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BarcodeResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeResponseList)));
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of BarcodeResponseList</returns>
        public async System.Threading.Tasks.Task<BarcodeResponseList> CellsPictureGetExtractBarcodesAsync (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
             ApiResponse<BarcodeResponseList> localVarResponse = await CellsPictureGetExtractBarcodesAsyncWithHttpInfo(name, sheetName, pictureIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (BarcodeResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeResponseList>> CellsPictureGetExtractBarcodesAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPictureGetExtractBarcodes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPictureGetExtractBarcodes");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPictureGetExtractBarcodes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPictureGetExtractBarcodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BarcodeResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeResponseList)));
        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPicturesDeleteWorksheetPicture(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPicturesDeleteWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPicturesDeleteWorksheetPictureWithHttpInfo(string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPicturesDeleteWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesDeleteWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo(name, sheetName, pictureIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a picture object in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="pictureIndex">Picture index</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesDeleteWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesDeleteWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPicturesDeleteWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPicturesDeleteWorksheetPictures(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPicturesDeleteWorksheetPicturesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPicturesDeleteWorksheetPicturesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesDeleteWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesDeleteWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesDeleteWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all pictures in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesDeleteWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesDeleteWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesDeleteWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesDeleteWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsPicturesGetWorksheetPicture(string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsPicturesGetWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, format, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsPicturesGetWorksheetPictureWithHttpInfo(string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPicturesGetWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsPicturesGetWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsPicturesGetWorksheetPictureAsyncWithHttpInfo(name, sheetName, pictureIndex, format, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GRead worksheet picture by number. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture index.</param>
        /// <param name="format">The exported object format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsPicturesGetWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, string format = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesGetWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPicturesGetWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PicturesResponse</returns>
        public PicturesResponse CellsPicturesGetWorksheetPictures(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PicturesResponse> localVarResponse = CellsPicturesGetWorksheetPicturesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        public ApiResponse< PicturesResponse > CellsPicturesGetWorksheetPicturesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesGetWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesGetWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PicturesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        public async System.Threading.Tasks.Task<PicturesResponse> CellsPicturesGetWorksheetPicturesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = await CellsPicturesGetWorksheetPicturesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet pictures. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> CellsPicturesGetWorksheetPicturesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesGetWorksheetPictures");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesGetWorksheetPictures");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesGetWorksheetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PicturesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPicturesPostWorksheetPicture(string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPicturesPostWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, picture, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPicturesPostWorksheetPictureWithHttpInfo(string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPicturesPostWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPostWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesPostWorksheetPictureAsync (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPicturesPostWorksheetPictureAsyncWithHttpInfo(name, sheetName, pictureIndex, picture, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet picture by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="pictureIndex">The picture&#39;s index.</param>
        /// <param name="picture">Picture object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesPostWorksheetPictureAsyncWithHttpInfo (string name, string sheetName, int? pictureIndex, Picture picture = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesPostWorksheetPicture");
            // verify the required parameter 'pictureIndex' is set
            if (pictureIndex == null)
                throw new ApiException(400, "Missing required parameter 'pictureIndex' when calling CellsApi->CellsPicturesPostWorksheetPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pictureIndex != null) localVarPathParams.Add("pictureIndex", Configuration.ApiClient.ParameterToString(pictureIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPostWorksheetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPicturesPutWorksheetAddPicture(string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPicturesPutWorksheetAddPictureWithHttpInfo(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPicturesPutWorksheetAddPictureWithHttpInfo(string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesPutWorksheetAddPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesPutWorksheetAddPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (picturePath != null) localVarQueryParams.Add("picturePath", Configuration.ApiClient.ParameterToString(picturePath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPutWorksheetAddPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPicturesPutWorksheetAddPictureAsync (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new worksheet picture. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worsheet name.</param>
        /// <param name="picture">Pictute object (optional)</param>
        /// <param name="upperLeftRow">The image upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">The image upper left column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">The image low right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">The image low right column. (optional, default to 0)</param>
        /// <param name="picturePath">The picture path, if not provided the picture data is inspected in the request body. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPicturesPutWorksheetAddPictureAsyncWithHttpInfo (string name, string sheetName, Picture picture = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string picturePath = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPicturesPutWorksheetAddPicture");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPicturesPutWorksheetAddPicture");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (picturePath != null) localVarQueryParams.Add("picturePath", Configuration.ApiClient.ParameterToString(picturePath)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (picture != null && picture.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(picture); // http body (model) parameter
            }
            else
            {
                localVarPostBody = picture; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPicturesPutWorksheetAddPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesDeletePivotTableField(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesDeletePivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesDeletePivotTableFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesDeletePivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeletePivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeletePivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesDeletePivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeletePivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTable(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTableFilter(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarPathParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarPathParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTableFilters(string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo(name, sheetName, pivotTableIndex, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesDeleteWorksheetPivotTables(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesDeleteWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesDeleteWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotFieldResponse</returns>
        public PivotFieldResponse CellsPivotTablesGetPivotTableField(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PivotFieldResponse> localVarResponse = CellsPivotTablesGetPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFieldResponse</returns>
        public ApiResponse< PivotFieldResponse > CellsPivotTablesGetPivotTableFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldIndex' is set
            if (pivotFieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldIndex' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesGetPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldIndex != null) localVarQueryParams.Add("pivotFieldIndex", Configuration.ApiClient.ParameterToString(pivotFieldIndex)); // query parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFieldResponse)));
        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PivotFieldResponse</returns>
        public async System.Threading.Tasks.Task<PivotFieldResponse> CellsPivotTablesGetPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null)
        {
             ApiResponse<PivotFieldResponse> localVarResponse = await CellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotFieldResponse>> CellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldIndex' is set
            if (pivotFieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldIndex' when calling CellsApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesGetPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldIndex != null) localVarQueryParams.Add("pivotFieldIndex", Configuration.ApiClient.ParameterToString(pivotFieldIndex)); // query parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFieldResponse)));
        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotTableResponse</returns>
        public PivotTableResponse CellsPivotTablesGetWorksheetPivotTable(string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PivotTableResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTableWithHttpInfo(name, sheetName, pivottableIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTableResponse</returns>
        public ApiResponse< PivotTableResponse > CellsPivotTablesGetWorksheetPivotTableWithHttpInfo(string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'pivottableIndex' is set
            if (pivottableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivottableIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivottableIndex != null) localVarPathParams.Add("pivottableIndex", Configuration.ApiClient.ParameterToString(pivottableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTableResponse)));
        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PivotTableResponse</returns>
        public async System.Threading.Tasks.Task<PivotTableResponse> CellsPivotTablesGetWorksheetPivotTableAsync (string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null)
        {
             ApiResponse<PivotTableResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo(name, sheetName, pivottableIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotTableResponse>> CellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivottableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'pivottableIndex' is set
            if (pivottableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivottableIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivottableIndex != null) localVarPathParams.Add("pivottableIndex", Configuration.ApiClient.ParameterToString(pivottableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTableResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotFilterResponse</returns>
        public PivotFilterResponse CellsPivotTablesGetWorksheetPivotTableFilter(string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PivotFilterResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filterIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFilterResponse</returns>
        public ApiResponse< PivotFilterResponse > CellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'filterIndex' is set
            if (filterIndex == null)
                throw new ApiException(400, "Missing required parameter 'filterIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (filterIndex != null) localVarPathParams.Add("filterIndex", Configuration.ApiClient.ParameterToString(filterIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFilterResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PivotFilterResponse</returns>
        public async System.Threading.Tasks.Task<PivotFilterResponse> CellsPivotTablesGetWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null)
        {
             ApiResponse<PivotFilterResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo(name, sheetName, pivotTableIndex, filterIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFilterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotFilterResponse>> CellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'filterIndex' is set
            if (filterIndex == null)
                throw new ApiException(400, "Missing required parameter 'filterIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (filterIndex != null) localVarPathParams.Add("filterIndex", Configuration.ApiClient.ParameterToString(filterIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFilterResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotFiltersResponse</returns>
        public PivotFiltersResponse CellsPivotTablesGetWorksheetPivotTableFilters(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PivotFiltersResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFiltersResponse</returns>
        public ApiResponse< PivotFiltersResponse > CellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFiltersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFiltersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFiltersResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PivotFiltersResponse</returns>
        public async System.Threading.Tasks.Task<PivotFiltersResponse> CellsPivotTablesGetWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
             ApiResponse<PivotFiltersResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFiltersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotFiltersResponse>> CellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFiltersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFiltersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFiltersResponse)));
        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>PivotTablesResponse</returns>
        public PivotTablesResponse CellsPivotTablesGetWorksheetPivotTables(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<PivotTablesResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTablesResponse</returns>
        public ApiResponse< PivotTablesResponse > CellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTablesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTablesResponse)));
        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of PivotTablesResponse</returns>
        public async System.Threading.Tasks.Task<PivotTablesResponse> CellsPivotTablesGetWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<PivotTablesResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTablesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotTablesResponse>> CellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesGetWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTablesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTablesResponse)));
        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostPivotTableCellStyle(string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostPivotTableCellStyleWithHttpInfo(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostPivotTableCellStyleWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableCellStyleAsync (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsApi->CellsPivotTablesPostPivotTableCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostPivotTableFieldHideItem(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'itemIndex' is set
            if (itemIndex == null)
                throw new ApiException(400, "Missing required parameter 'itemIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'isHide' is set
            if (isHide == null)
                throw new ApiException(400, "Missing required parameter 'isHide' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (itemIndex != null) localVarQueryParams.Add("itemIndex", Configuration.ApiClient.ParameterToString(itemIndex)); // query parameter
            if (isHide != null) localVarQueryParams.Add("isHide", Configuration.ApiClient.ParameterToString(isHide)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldHideItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableFieldHideItemAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'itemIndex' is set
            if (itemIndex == null)
                throw new ApiException(400, "Missing required parameter 'itemIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'isHide' is set
            if (isHide == null)
                throw new ApiException(400, "Missing required parameter 'isHide' when calling CellsApi->CellsPivotTablesPostPivotTableFieldHideItem");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (itemIndex != null) localVarQueryParams.Add("itemIndex", Configuration.ApiClient.ParameterToString(itemIndex)); // query parameter
            if (isHide != null) localVarQueryParams.Add("isHide", Configuration.ApiClient.ParameterToString(isHide)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldHideItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostPivotTableFieldMoveTo(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableFieldMoveToAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CellsApi->CellsPivotTablesPostPivotTableFieldMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostPivotTableStyle(string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostPivotTableStyleWithHttpInfo(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostPivotTableStyleWithHttpInfo(string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableStyleAsync (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostPivotTableUpdatePivotField(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, pivotField, needReCalculate, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotFieldIndex' is set
            if (pivotFieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldIndex' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotField' is set
            if (pivotField == null)
                throw new ApiException(400, "Missing required parameter 'pivotField' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields/{pivotFieldIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldIndex != null) localVarPathParams.Add("pivotFieldIndex", Configuration.ApiClient.ParameterToString(pivotFieldIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (pivotField != null && pivotField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pivotField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pivotField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableUpdatePivotField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableUpdatePivotFieldAsync (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostPivotTableUpdatePivotFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, pivotField, needReCalculate, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableUpdatePivotFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotFieldIndex' is set
            if (pivotFieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldIndex' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");
            // verify the required parameter 'pivotField' is set
            if (pivotField == null)
                throw new ApiException(400, "Missing required parameter 'pivotField' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields/{pivotFieldIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldIndex != null) localVarPathParams.Add("pivotFieldIndex", Configuration.ApiClient.ParameterToString(pivotFieldIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (pivotField != null && pivotField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pivotField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pivotField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableUpdatePivotField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostPivotTableUpdatePivotFields(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, pivotField, needReCalculate, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'pivotField' is set
            if (pivotField == null)
                throw new ApiException(400, "Missing required parameter 'pivotField' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (pivotField != null && pivotField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pivotField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pivotField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableUpdatePivotFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostPivotTableUpdatePivotFieldsAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostPivotTableUpdatePivotFieldsAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, pivotField, needReCalculate, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="pivotField"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostPivotTableUpdatePivotFieldsAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotField pivotField, bool? needReCalculate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");
            // verify the required parameter 'pivotField' is set
            if (pivotField == null)
                throw new ApiException(400, "Missing required parameter 'pivotField' when calling CellsApi->CellsPivotTablesPostPivotTableUpdatePivotFields");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (pivotField != null && pivotField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pivotField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pivotField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableUpdatePivotFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostWorksheetPivotTableCalculate(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostWorksheetPivotTableCalculateAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPostWorksheetPivotTableMove(string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableMove");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPostWorksheetPivotTableMoveAsync (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPostWorksheetPivotTableMove");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPutPivotTableField(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPutPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPutPivotTableFieldWithHttpInfo(string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPutPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPutPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsApi->CellsPivotTablesPutPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPutWorksheetPivotTable(string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPutWorksheetPivotTableWithHttpInfo(name, sheetName, request, folder, storageName, sourceData, destCellName, tableName, useSameSource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPutWorksheetPivotTableWithHttpInfo(string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (sourceData != null) localVarQueryParams.Add("sourceData", Configuration.ApiClient.ParameterToString(sourceData)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (tableName != null) localVarQueryParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // query parameter
            if (useSameSource != null) localVarQueryParams.Add("useSameSource", Configuration.ApiClient.ParameterToString(useSameSource)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPutWorksheetPivotTableAsync (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo(name, sheetName, request, folder, storageName, sourceData, destCellName, tableName, useSameSource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storageName = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (sourceData != null) localVarQueryParams.Add("sourceData", Configuration.ApiClient.ParameterToString(sourceData)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (tableName != null) localVarQueryParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // query parameter
            if (useSameSource != null) localVarQueryParams.Add("useSameSource", Configuration.ApiClient.ParameterToString(useSameSource)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPivotTablesPutWorksheetPivotTableFilter(string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPivotTablesPutWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsApi->CellsPivotTablesPutWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostCellCalculate(string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostCellCalculateWithHttpInfo(name, sheetName, cellName, options, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostCellCalculateWithHttpInfo(string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCellCalculateAsync (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostCellCalculateAsyncWithHttpInfo(name, sheetName, cellName, options, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cell calculate formula 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCellCalculateAsyncWithHttpInfo (string name, string sheetName, string cellName, CalculationOptions options = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCalculate");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostCellCharacters(string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostCellCharactersWithHttpInfo(name, sheetName, cellName, options, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostCellCharactersWithHttpInfo(string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCharacters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCharacters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCellCharactersAsync (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostCellCharactersAsyncWithHttpInfo(name, sheetName, cellName, options, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set cell characters  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellName"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCellCharactersAsyncWithHttpInfo (string name, string sheetName, string cellName, List<FontSetting> options = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCellCharacters");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostCellCharacters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCellCharacters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostClearContents(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostClearContentsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostClearContentsWithHttpInfo(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearContents");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearContents");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostClearContentsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostClearContentsAsyncWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostClearContentsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearContents");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearContents");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostClearFormats(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostClearFormatsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostClearFormatsWithHttpInfo(string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearFormats");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearFormats");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearformats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearFormats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostClearFormatsAsync (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostClearFormatsAsyncWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear cells contents. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range. (optional)</param>
        /// <param name="startRow">The start row. (optional)</param>
        /// <param name="startColumn">The start column. (optional)</param>
        /// <param name="endRow">The end row. (optional)</param>
        /// <param name="endColumn">The end column. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostClearFormatsAsyncWithHttpInfo (string name, string sheetName, string range = null, int? startRow = null, int? startColumn = null, int? endRow = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostClearFormats");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostClearFormats");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearformats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostClearFormats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostColumnStyle(string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostColumnStyleWithHttpInfo(name, sheetName, columnIndex, style, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostColumnStyleWithHttpInfo(string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostColumnStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostColumnStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostColumnStyleAsync (string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostColumnStyleAsyncWithHttpInfo(name, sheetName, columnIndex, style, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set column style 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostColumnStyleAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostColumnStyle");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostColumnStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostColumnStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostCopyCellIntoCell(string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostCopyCellIntoCellWithHttpInfo(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostCopyCellIntoCellWithHttpInfo(string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'destCellName' is set
            if (destCellName == null)
                throw new ApiException(400, "Missing required parameter 'destCellName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'worksheet' is set
            if (worksheet == null)
                throw new ApiException(400, "Missing required parameter 'worksheet' when calling CellsApi->CellsPostCopyCellIntoCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destCellName != null) localVarPathParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyCellIntoCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCopyCellIntoCellAsync (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostCopyCellIntoCellAsyncWithHttpInfo(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy cell into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="destCellName">Destination cell name</param>
        /// <param name="sheetName">Destination worksheet name.</param>
        /// <param name="worksheet">Source worksheet name.</param>
        /// <param name="cellname">Source cell name (optional)</param>
        /// <param name="row">Source row (optional)</param>
        /// <param name="column">Source column (optional)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCopyCellIntoCellAsyncWithHttpInfo (string name, string destCellName, string sheetName, string worksheet, string cellname = null, int? row = null, int? column = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'destCellName' is set
            if (destCellName == null)
                throw new ApiException(400, "Missing required parameter 'destCellName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyCellIntoCell");
            // verify the required parameter 'worksheet' is set
            if (worksheet == null)
                throw new ApiException(400, "Missing required parameter 'worksheet' when calling CellsApi->CellsPostCopyCellIntoCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destCellName != null) localVarPathParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (cellname != null) localVarQueryParams.Add("cellname", Configuration.ApiClient.ParameterToString(cellname)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyCellIntoCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostCopyWorksheetColumns(string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostCopyWorksheetColumnsWithHttpInfo(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostCopyWorksheetColumnsWithHttpInfo(string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sourceColumnIndex' is set
            if (sourceColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'destinationColumnIndex' is set
            if (destinationColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'columnNumber' is set
            if (columnNumber == null)
                throw new ApiException(400, "Missing required parameter 'columnNumber' when calling CellsApi->CellsPostCopyWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceColumnIndex != null) localVarQueryParams.Add("sourceColumnIndex", Configuration.ApiClient.ParameterToString(sourceColumnIndex)); // query parameter
            if (destinationColumnIndex != null) localVarQueryParams.Add("destinationColumnIndex", Configuration.ApiClient.ParameterToString(destinationColumnIndex)); // query parameter
            if (columnNumber != null) localVarQueryParams.Add("columnNumber", Configuration.ApiClient.ParameterToString(columnNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCopyWorksheetColumnsAsync (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostCopyWorksheetColumnsAsyncWithHttpInfo(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceColumnIndex">Source column index</param>
        /// <param name="destinationColumnIndex">Destination column index</param>
        /// <param name="columnNumber">The copied column number</param>
        /// <param name="worksheet">The Worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCopyWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? sourceColumnIndex, int? destinationColumnIndex, int? columnNumber, string worksheet = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'sourceColumnIndex' is set
            if (sourceColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'destinationColumnIndex' is set
            if (destinationColumnIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationColumnIndex' when calling CellsApi->CellsPostCopyWorksheetColumns");
            // verify the required parameter 'columnNumber' is set
            if (columnNumber == null)
                throw new ApiException(400, "Missing required parameter 'columnNumber' when calling CellsApi->CellsPostCopyWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceColumnIndex != null) localVarQueryParams.Add("sourceColumnIndex", Configuration.ApiClient.ParameterToString(sourceColumnIndex)); // query parameter
            if (destinationColumnIndex != null) localVarQueryParams.Add("destinationColumnIndex", Configuration.ApiClient.ParameterToString(destinationColumnIndex)); // query parameter
            if (columnNumber != null) localVarQueryParams.Add("columnNumber", Configuration.ApiClient.ParameterToString(columnNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostCopyWorksheetRows(string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostCopyWorksheetRowsWithHttpInfo(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostCopyWorksheetRowsWithHttpInfo(string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sourceRowIndex' is set
            if (sourceRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'destinationRowIndex' is set
            if (destinationRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'rowNumber' is set
            if (rowNumber == null)
                throw new ApiException(400, "Missing required parameter 'rowNumber' when calling CellsApi->CellsPostCopyWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceRowIndex != null) localVarQueryParams.Add("sourceRowIndex", Configuration.ApiClient.ParameterToString(sourceRowIndex)); // query parameter
            if (destinationRowIndex != null) localVarQueryParams.Add("destinationRowIndex", Configuration.ApiClient.ParameterToString(destinationRowIndex)); // query parameter
            if (rowNumber != null) localVarQueryParams.Add("rowNumber", Configuration.ApiClient.ParameterToString(rowNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostCopyWorksheetRowsAsync (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostCopyWorksheetRowsAsyncWithHttpInfo(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="sourceRowIndex">Source row index</param>
        /// <param name="destinationRowIndex">Destination row index</param>
        /// <param name="rowNumber">The copied row number</param>
        /// <param name="worksheet">worksheet (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostCopyWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? sourceRowIndex, int? destinationRowIndex, int? rowNumber, string worksheet = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'sourceRowIndex' is set
            if (sourceRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'sourceRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'destinationRowIndex' is set
            if (destinationRowIndex == null)
                throw new ApiException(400, "Missing required parameter 'destinationRowIndex' when calling CellsApi->CellsPostCopyWorksheetRows");
            // verify the required parameter 'rowNumber' is set
            if (rowNumber == null)
                throw new ApiException(400, "Missing required parameter 'rowNumber' when calling CellsApi->CellsPostCopyWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceRowIndex != null) localVarQueryParams.Add("sourceRowIndex", Configuration.ApiClient.ParameterToString(sourceRowIndex)); // query parameter
            if (destinationRowIndex != null) localVarQueryParams.Add("destinationRowIndex", Configuration.ApiClient.ParameterToString(destinationRowIndex)); // query parameter
            if (rowNumber != null) localVarQueryParams.Add("rowNumber", Configuration.ApiClient.ParameterToString(rowNumber)); // query parameter
            if (worksheet != null) localVarQueryParams.Add("worksheet", Configuration.ApiClient.ParameterToString(worksheet)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostCopyWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostGroupWorksheetColumns(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostGroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostGroupWorksheetColumnsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostGroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostGroupWorksheetColumnsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Group worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="hide">columns visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostGroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostGroupWorksheetRows(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostGroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostGroupWorksheetRowsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostGroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostGroupWorksheetRowsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Group worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="hide">rows visible state (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostGroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? hide = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostGroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostGroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (hide != null) localVarQueryParams.Add("hide", Configuration.ApiClient.ParameterToString(hide)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostGroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostHideWorksheetColumns(string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostHideWorksheetColumnsWithHttpInfo(name, sheetName, startColumn, totalColumns, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostHideWorksheetColumnsWithHttpInfo(string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostHideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostHideWorksheetColumnsAsync (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostHideWorksheetColumnsAsyncWithHttpInfo(name, sheetName, startColumn, totalColumns, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startColumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostHideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startColumn, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostHideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostHideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostHideWorksheetRows(string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostHideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostHideWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostHideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostHideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostHideWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostHideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostHideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostHideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostHideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostRowStyle(string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostRowStyleWithHttpInfo(name, sheetName, rowIndex, style, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostRowStyleWithHttpInfo(string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostRowStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostRowStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostRowStyleAsync (string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostRowStyleAsyncWithHttpInfo(name, sheetName, rowIndex, style, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set row style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="style">Style dto (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostRowStyleAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostRowStyle");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostRowStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostRowStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostSetCellHtmlString(string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostSetCellHtmlStringWithHttpInfo(name, sheetName, cellName, htmlString, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostSetCellHtmlStringWithHttpInfo(string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'htmlString' is set
            if (htmlString == null)
                throw new ApiException(400, "Missing required parameter 'htmlString' when calling CellsApi->CellsPostSetCellHtmlString");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (htmlString != null && htmlString.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(htmlString); // http body (model) parameter
            }
            else
            {
                localVarPostBody = htmlString; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellHtmlString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostSetCellHtmlStringAsync (string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostSetCellHtmlStringAsyncWithHttpInfo(name, sheetName, cellName, htmlString, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set htmlstring value into cell 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="htmlString"></param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostSetCellHtmlStringAsyncWithHttpInfo (string name, string sheetName, string cellName, byte[] htmlString, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostSetCellHtmlString");
            // verify the required parameter 'htmlString' is set
            if (htmlString == null)
                throw new ApiException(400, "Missing required parameter 'htmlString' when calling CellsApi->CellsPostSetCellHtmlString");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (htmlString != null && htmlString.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(htmlString); // http body (model) parameter
            }
            else
            {
                localVarPostBody = htmlString; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellHtmlString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostSetCellRangeValue(string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostSetCellRangeValueWithHttpInfo(name, sheetName, cellarea, value, type, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostSetCellRangeValueWithHttpInfo(string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'cellarea' is set
            if (cellarea == null)
                throw new ApiException(400, "Missing required parameter 'cellarea' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsPostSetCellRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellarea != null) localVarQueryParams.Add("cellarea", Configuration.ApiClient.ParameterToString(cellarea)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostSetCellRangeValueAsync (string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostSetCellRangeValueAsyncWithHttpInfo(name, sheetName, cellarea, value, type, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set cell range value  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellarea">Cell area (like \&quot;A1:C2\&quot;)</param>
        /// <param name="value">Range value</param>
        /// <param name="type">Value data type (like \&quot;int\&quot;)</param>
        /// <param name="folder">Folder name (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostSetCellRangeValueAsyncWithHttpInfo (string name, string sheetName, string cellarea, string value, string type, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'cellarea' is set
            if (cellarea == null)
                throw new ApiException(400, "Missing required parameter 'cellarea' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsPostSetCellRangeValue");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsPostSetCellRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellarea != null) localVarQueryParams.Add("cellarea", Configuration.ApiClient.ParameterToString(cellarea)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetCellRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostSetWorksheetColumnWidth(string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostSetWorksheetColumnWidthWithHttpInfo(name, sheetName, columnIndex, width, count, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostSetWorksheetColumnWidthWithHttpInfo(string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling CellsApi->CellsPostSetWorksheetColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetWorksheetColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostSetWorksheetColumnWidthAsync (string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostSetWorksheetColumnWidthAsyncWithHttpInfo(name, sheetName, columnIndex, width, count, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set worksheet column width. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="width">The width.</param>
        /// <param name="count">column number.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostSetWorksheetColumnWidthAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, double? width, int? count, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling CellsApi->CellsPostSetWorksheetColumnWidth");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling CellsApi->CellsPostSetWorksheetColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostSetWorksheetColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostUngroupWorksheetColumns(string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostUngroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostUngroupWorksheetColumnsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUngroupWorksheetColumnsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostUngroupWorksheetColumnsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ungroup worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first column index to be operated.</param>
        /// <param name="lastIndex">The last column index to be operated.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUngroupWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostUngroupWorksheetRows(string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostUngroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, isAll, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostUngroupWorksheetRowsWithHttpInfo(string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (isAll != null) localVarQueryParams.Add("isAll", Configuration.ApiClient.ParameterToString(isAll)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUngroupWorksheetRowsAsync (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostUngroupWorksheetRowsAsyncWithHttpInfo(name, sheetName, firstIndex, lastIndex, isAll, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ungroup worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="firstIndex">The first row index to be operated.</param>
        /// <param name="lastIndex">The last row index to be operated.</param>
        /// <param name="isAll">Is all row to be operated (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUngroupWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? firstIndex, int? lastIndex, bool? isAll = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'firstIndex' is set
            if (firstIndex == null)
                throw new ApiException(400, "Missing required parameter 'firstIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");
            // verify the required parameter 'lastIndex' is set
            if (lastIndex == null)
                throw new ApiException(400, "Missing required parameter 'lastIndex' when calling CellsApi->CellsPostUngroupWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstIndex != null) localVarQueryParams.Add("firstIndex", Configuration.ApiClient.ParameterToString(firstIndex)); // query parameter
            if (lastIndex != null) localVarQueryParams.Add("lastIndex", Configuration.ApiClient.ParameterToString(lastIndex)); // query parameter
            if (isAll != null) localVarQueryParams.Add("isAll", Configuration.ApiClient.ParameterToString(isAll)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUngroupWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostUnhideWorksheetColumns(string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostUnhideWorksheetColumnsWithHttpInfo(name, sheetName, startcolumn, totalColumns, width, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostUnhideWorksheetColumnsWithHttpInfo(string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'startcolumn' is set
            if (startcolumn == null)
                throw new ApiException(400, "Missing required parameter 'startcolumn' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostUnhideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startcolumn != null) localVarQueryParams.Add("startcolumn", Configuration.ApiClient.ParameterToString(startcolumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUnhideWorksheetColumnsAsync (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostUnhideWorksheetColumnsAsyncWithHttpInfo(name, sheetName, startcolumn, totalColumns, width, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unhide worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startcolumn">The begin column index to be operated.</param>
        /// <param name="totalColumns">Number of columns to be operated.</param>
        /// <param name="width">The new column width. (optional, default to 50.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUnhideWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? startcolumn, int? totalColumns, double? width = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'startcolumn' is set
            if (startcolumn == null)
                throw new ApiException(400, "Missing required parameter 'startcolumn' when calling CellsApi->CellsPostUnhideWorksheetColumns");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostUnhideWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startcolumn != null) localVarQueryParams.Add("startcolumn", Configuration.ApiClient.ParameterToString(startcolumn)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostUnhideWorksheetRows(string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostUnhideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, height, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostUnhideWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostUnhideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUnhideWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostUnhideWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, height, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unhide worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated.</param>
        /// <param name="height">The new row height. (optional, default to 15.0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUnhideWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows, double? height = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPostUnhideWorksheetRows");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostUnhideWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUnhideWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>StyleResponse</returns>
        public StyleResponse CellsPostUpdateWorksheetCellStyle(string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<StyleResponse> localVarResponse = CellsPostUpdateWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, style, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        public ApiResponse< StyleResponse > CellsPostUpdateWorksheetCellStyleWithHttpInfo(string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        public async System.Threading.Tasks.Task<StyleResponse> CellsPostUpdateWorksheetCellStyleAsync (string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null)
        {
             ApiResponse<StyleResponse> localVarResponse = await CellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo(name, sheetName, cellName, style, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cell&#39;s style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsPostUpdateWorksheetCellStyleAsyncWithHttpInfo (string name, string sheetName, string cellName, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostUpdateWorksheetCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostUpdateWorksheetRangeStyle(string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostUpdateWorksheetRangeStyleWithHttpInfo(name, sheetName, range, style, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostUpdateWorksheetRangeStyleWithHttpInfo(string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUpdateWorksheetRangeStyleAsync (string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo(name, sheetName, range, style, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cell&#39;s range style. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">The range.</param>
        /// <param name="style">with update style settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUpdateWorksheetRangeStyleAsyncWithHttpInfo (string name, string sheetName, string range, Style style = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsPostUpdateWorksheetRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="count">row number. (optional, default to 0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostUpdateWorksheetRow(string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostUpdateWorksheetRowWithHttpInfo(name, sheetName, rowIndex, height, count, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="count">row number. (optional, default to 0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostUpdateWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostUpdateWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="count">row number. (optional, default to 0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostUpdateWorksheetRowAsync (string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostUpdateWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, height, count, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The row index.</param>
        /// <param name="height">The new row height. (optional, default to 0.0)</param>
        /// <param name="count">row number. (optional, default to 0)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostUpdateWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, double? height = null, int? count = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostUpdateWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPostUpdateWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostUpdateWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellResponse</returns>
        public CellResponse CellsPostWorksheetCellSetValue(string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellResponse> localVarResponse = CellsPostWorksheetCellSetValueWithHttpInfo(name, sheetName, cellName, value, type, formula, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellResponse</returns>
        public ApiResponse< CellResponse > CellsPostWorksheetCellSetValueWithHttpInfo(string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostWorksheetCellSetValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (formula != null) localVarQueryParams.Add("formula", Configuration.ApiClient.ParameterToString(formula)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetCellSetValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellResponse)));
        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellResponse</returns>
        public async System.Threading.Tasks.Task<CellResponse> CellsPostWorksheetCellSetValueAsync (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellResponse> localVarResponse = await CellsPostWorksheetCellSetValueAsyncWithHttpInfo(name, sheetName, cellName, value, type, formula, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set cell value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name.</param>
        /// <param name="value">The cell value. (optional)</param>
        /// <param name="type">The value type. (optional)</param>
        /// <param name="formula">Formula for cell (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellResponse>> CellsPostWorksheetCellSetValueAsyncWithHttpInfo (string name, string sheetName, string cellName, string value = null, string type = null, string formula = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetCellSetValue");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsPostWorksheetCellSetValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (formula != null) localVarQueryParams.Add("formula", Configuration.ApiClient.ParameterToString(formula)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetCellSetValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellResponse)));
        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostWorksheetMerge(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostWorksheetMergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostWorksheetMergeWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostWorksheetMergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostWorksheetMergeAsyncWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostWorksheetMergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetMerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPostWorksheetUnmerge(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPostWorksheetUnmergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPostWorksheetUnmergeWithHttpInfo(string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPostWorksheetUnmergeAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPostWorksheetUnmergeAsyncWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmerge cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startRow">The start row.</param>
        /// <param name="startColumn">The start column.</param>
        /// <param name="totalRows">The total rows</param>
        /// <param name="totalColumns">The total columns.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPostWorksheetUnmergeAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsApi->CellsPostWorksheetUnmerge");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsApi->CellsPostWorksheetUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPostWorksheetUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPropertiesDeleteDocumentProperties(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPropertiesDeleteDocumentPropertiesWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPropertiesDeleteDocumentPropertiesWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesDeleteDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPropertiesDeleteDocumentPropertiesAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all custom document properties and clean built-in ones. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPropertiesDeleteDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesDeleteDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPropertiesDeleteDocumentProperty(string name, string propertyName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPropertiesDeleteDocumentPropertyWithHttpInfo(name, propertyName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPropertiesDeleteDocumentPropertyWithHttpInfo(string name, string propertyName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesDeleteDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsApi->CellsPropertiesDeleteDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPropertiesDeleteDocumentPropertyAsync (string name, string propertyName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo(name, propertyName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPropertiesDeleteDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesDeleteDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsApi->CellsPropertiesDeleteDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesDeleteDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertiesResponse</returns>
        public CellsDocumentPropertiesResponse CellsPropertiesGetDocumentProperties(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = CellsPropertiesGetDocumentPropertiesWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertiesResponse</returns>
        public ApiResponse< CellsDocumentPropertiesResponse > CellsPropertiesGetDocumentPropertiesWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesGetDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertiesResponse> CellsPropertiesGetDocumentPropertiesAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<CellsDocumentPropertiesResponse> localVarResponse = await CellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document properties. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertiesResponse>> CellsPropertiesGetDocumentPropertiesAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesGetDocumentProperties");

            var localVarPath = "/cells/{name}/documentproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsDocumentPropertyResponse</returns>
        public CellsDocumentPropertyResponse CellsPropertiesGetDocumentProperty(string name, string propertyName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsDocumentPropertyResponse> localVarResponse = CellsPropertiesGetDocumentPropertyWithHttpInfo(name, propertyName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsDocumentPropertyResponse</returns>
        public ApiResponse< CellsDocumentPropertyResponse > CellsPropertiesGetDocumentPropertyWithHttpInfo(string name, string propertyName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesGetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsApi->CellsPropertiesGetDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsDocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<CellsDocumentPropertyResponse> CellsPropertiesGetDocumentPropertyAsync (string name, string propertyName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsDocumentPropertyResponse> localVarResponse = await CellsPropertiesGetDocumentPropertyAsyncWithHttpInfo(name, propertyName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document property by name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsDocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsDocumentPropertyResponse>> CellsPropertiesGetDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesGetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsApi->CellsPropertiesGetDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesGetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsDocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsDocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsDocumentPropertyResponse)));
        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPropertiesPutDocumentProperty(string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPropertiesPutDocumentPropertyWithHttpInfo(name, propertyName, property, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPropertiesPutDocumentPropertyWithHttpInfo(string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesPutDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsApi->CellsPropertiesPutDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesPutDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPropertiesPutDocumentPropertyAsync (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPropertiesPutDocumentPropertyAsyncWithHttpInfo(name, propertyName, property, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set/create document property. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">with new property value. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPropertiesPutDocumentPropertyAsyncWithHttpInfo (string name, string propertyName, CellsDocumentProperty property = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPropertiesPutDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling CellsApi->CellsPropertiesPutDocumentProperty");

            var localVarPath = "/cells/{name}/documentproperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPropertiesPutDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPutInsertWorksheetColumns(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPutInsertWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPutInsertWorksheetColumnsWithHttpInfo(string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsPutInsertWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPutInsertWorksheetColumnsAsync (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPutInsertWorksheetColumnsAsyncWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert worksheet columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="columnIndex">The column index.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="updateReference">The update reference. (optional, default to true)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPutInsertWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? columnIndex, int? columns, bool? updateReference = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columnIndex' is set
            if (columnIndex == null)
                throw new ApiException(400, "Missing required parameter 'columnIndex' when calling CellsApi->CellsPutInsertWorksheetColumns");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling CellsApi->CellsPutInsertWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (columnIndex != null) localVarPathParams.Add("columnIndex", Configuration.ApiClient.ParameterToString(columnIndex)); // path parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPutInsertWorksheetRow(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPutInsertWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPutInsertWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPutInsertWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPutInsertWorksheetRowAsync (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPutInsertWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert new worksheet row. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="rowIndex">The new row index.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPutInsertWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsPutInsertWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarPathParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsPutInsertWorksheetRows(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsPutInsertWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsPutInsertWorksheetRowsWithHttpInfo(string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPutInsertWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsPutInsertWorksheetRowsAsync (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsPutInsertWorksheetRowsAsyncWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert several new worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="startrow">The begin row index to be operated.</param>
        /// <param name="totalRows">Number of rows to be operated. (optional, default to 1)</param>
        /// <param name="updateReference">Indicates if update references in other worksheets. (optional, default to true)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsPutInsertWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, int? startrow, int? totalRows = null, bool? updateReference = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsPutInsertWorksheetRows");
            // verify the required parameter 'startrow' is set
            if (startrow == null)
                throw new ApiException(400, "Missing required parameter 'startrow' when calling CellsApi->CellsPutInsertWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startrow != null) localVarQueryParams.Add("startrow", Configuration.ApiClient.ParameterToString(startrow)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (updateReference != null) localVarQueryParams.Add("updateReference", Configuration.ApiClient.ParameterToString(updateReference)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPutInsertWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesDeleteWorksheetCellsRange(string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesDeleteWorksheetCellsRangeWithHttpInfo(name, sheetName, range, shift, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesDeleteWorksheetCellsRangeWithHttpInfo(string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");
            // verify the required parameter 'shift' is set
            if (shift == null)
                throw new ApiException(400, "Missing required parameter 'shift' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (shift != null) localVarQueryParams.Add("shift", Configuration.ApiClient.ParameterToString(shift)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesDeleteWorksheetCellsRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesDeleteWorksheetCellsRangeAsync (string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesDeleteWorksheetCellsRangeAsyncWithHttpInfo(name, sheetName, range, shift, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Left,Up) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesDeleteWorksheetCellsRangeAsyncWithHttpInfo (string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");
            // verify the required parameter 'shift' is set
            if (shift == null)
                throw new ApiException(400, "Missing required parameter 'shift' when calling CellsApi->CellsRangesDeleteWorksheetCellsRange");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (shift != null) localVarQueryParams.Add("shift", Configuration.ApiClient.ParameterToString(shift)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesDeleteWorksheetCellsRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        public RangeValueResponse CellsRangesGetWorksheetCellsRangeValue(string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<RangeValueResponse> localVarResponse = CellsRangesGetWorksheetCellsRangeValueWithHttpInfo(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        public ApiResponse< RangeValueResponse > CellsRangesGetWorksheetCellsRangeValueWithHttpInfo(string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesGetWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesGetWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (namerange != null) localVarQueryParams.Add("namerange", Configuration.ApiClient.ParameterToString(namerange)); // query parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (rowCount != null) localVarQueryParams.Add("rowCount", Configuration.ApiClient.ParameterToString(rowCount)); // query parameter
            if (columnCount != null) localVarQueryParams.Add("columnCount", Configuration.ApiClient.ParameterToString(columnCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesGetWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        public async System.Threading.Tasks.Task<RangeValueResponse> CellsRangesGetWorksheetCellsRangeValueAsync (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null)
        {
             ApiResponse<RangeValueResponse> localVarResponse = await CellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesGetWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesGetWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (namerange != null) localVarQueryParams.Add("namerange", Configuration.ApiClient.ParameterToString(namerange)); // query parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (rowCount != null) localVarQueryParams.Add("rowCount", Configuration.ApiClient.ParameterToString(rowCount)); // query parameter
            if (columnCount != null) localVarQueryParams.Add("columnCount", Configuration.ApiClient.ParameterToString(columnCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesGetWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeColumnWidth(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(name, sheetName, value, range, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsRangesPostWorksheetCellsRangeColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeColumnWidthAsync (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo(name, sheetName, value, range, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsRangesPostWorksheetCellsRangeColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeMerge(string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(name, sheetName, range, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeMergeAsync (string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo(name, sheetName, range, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeMoveTo(string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(name, sheetName, destRow, destColumn, range, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destRow' is set
            if (destRow == null)
                throw new ApiException(400, "Missing required parameter 'destRow' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destColumn' is set
            if (destColumn == null)
                throw new ApiException(400, "Missing required parameter 'destColumn' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/moveto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (destRow != null) localVarQueryParams.Add("destRow", Configuration.ApiClient.ParameterToString(destRow)); // query parameter
            if (destColumn != null) localVarQueryParams.Add("destColumn", Configuration.ApiClient.ParameterToString(destColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeMoveToAsync (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo(name, sheetName, destRow, destColumn, range, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destRow' is set
            if (destRow == null)
                throw new ApiException(400, "Missing required parameter 'destRow' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destColumn' is set
            if (destColumn == null)
                throw new ApiException(400, "Missing required parameter 'destColumn' when calling CellsApi->CellsRangesPostWorksheetCellsRangeMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/moveto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (destRow != null) localVarQueryParams.Add("destRow", Configuration.ApiClient.ParameterToString(destRow)); // query parameter
            if (destColumn != null) localVarQueryParams.Add("destColumn", Configuration.ApiClient.ParameterToString(destColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeOutlineBorder(string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeOutlineBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeOutlineBorderAsync (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeOutlineBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeRowHeight(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(name, sheetName, value, range, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsRangesPostWorksheetCellsRangeRowHeight");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeRowHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeRowHeightAsync (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo(name, sheetName, value, range, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsRangesPostWorksheetCellsRangeRowHeight");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeRowHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeStyle(string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeStyleAsync (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeUnmerge(string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(name, sheetName, range, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeUnmergeAsync (string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo(name, sheetName, range, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRangeValue(string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeValueWithHttpInfo(name, sheetName, value, range, isConverted, setStyle, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangeValueWithHttpInfo(string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsRangesPostWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (isConverted != null) localVarQueryParams.Add("isConverted", Configuration.ApiClient.ParameterToString(isConverted)); // query parameter
            if (setStyle != null) localVarQueryParams.Add("setStyle", Configuration.ApiClient.ParameterToString(setStyle)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangeValueAsync (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo(name, sheetName, value, range, isConverted, setStyle, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsRangesPostWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (isConverted != null) localVarQueryParams.Add("isConverted", Configuration.ApiClient.ParameterToString(isConverted)); // query parameter
            if (setStyle != null) localVarQueryParams.Add("setStyle", Configuration.ApiClient.ParameterToString(setStyle)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPostWorksheetCellsRanges(string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPostWorksheetCellsRangesWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPostWorksheetCellsRangesWithHttpInfo(string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRanges");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRanges");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPostWorksheetCellsRangesAsync (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPostWorksheetCellsRanges");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPostWorksheetCellsRanges");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsRangesPutWorksheetCellsRange(string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsRangesPutWorksheetCellsRangeWithHttpInfo(name, sheetName, range, shift, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsRangesPutWorksheetCellsRangeWithHttpInfo(string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPutWorksheetCellsRange");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPutWorksheetCellsRange");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsRangesPutWorksheetCellsRange");
            // verify the required parameter 'shift' is set
            if (shift == null)
                throw new ApiException(400, "Missing required parameter 'shift' when calling CellsApi->CellsRangesPutWorksheetCellsRange");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (shift != null) localVarQueryParams.Add("shift", Configuration.ApiClient.ParameterToString(shift)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPutWorksheetCellsRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Insert range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsRangesPutWorksheetCellsRangeAsync (string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsRangesPutWorksheetCellsRangeAsyncWithHttpInfo(name, sheetName, range, shift, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range</param>
        /// <param name="shift">Represent the shift options when deleting a range of cells. (Right,Down) </param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsRangesPutWorksheetCellsRangeAsyncWithHttpInfo (string name, string sheetName, string range, string shift, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsRangesPutWorksheetCellsRange");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsRangesPutWorksheetCellsRange");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling CellsApi->CellsRangesPutWorksheetCellsRange");
            // verify the required parameter 'shift' is set
            if (shift == null)
                throw new ApiException(400, "Missing required parameter 'shift' when calling CellsApi->CellsRangesPutWorksheetCellsRange");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (shift != null) localVarQueryParams.Add("shift", Configuration.ApiClient.ParameterToString(shift)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPutWorksheetCellsRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>SaveResponse</returns>
        public SaveResponse CellsSaveAsPostDocumentSaveAs(string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null)
        {
             checkAccessToken();
             ApiResponse<SaveResponse> localVarResponse = CellsSaveAsPostDocumentSaveAsWithHttpInfo(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storageName, outStorageName,extendedQueryParameters,checkExcelRestriction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of SaveResponse</returns>
        public ApiResponse< SaveResponse > CellsSaveAsPostDocumentSaveAsWithHttpInfo(string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSaveAsPostDocumentSaveAs");

            var localVarPath = "/cells/{name}/SaveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (isAutoFitRows != null) localVarQueryParams.Add("isAutoFitRows", Configuration.ApiClient.ParameterToString(isAutoFitRows)); // query parameter
            if (isAutoFitColumns != null) localVarQueryParams.Add("isAutoFitColumns", Configuration.ApiClient.ParameterToString(isAutoFitColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter
            if (checkExcelRestriction !=null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter

            if (extendedQueryParameters != null)
            {
                foreach (KeyValuePair<string, string> keyValuePair in extendedQueryParameters)
                {
                    localVarQueryParams.Add(keyValuePair.Key, Configuration.ApiClient.ParameterToString(keyValuePair.Value));
                }
            }
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSaveAsPostDocumentSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of SaveResponse</returns>
        public async System.Threading.Tasks.Task<SaveResponse> CellsSaveAsPostDocumentSaveAsAsync (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null)
        {
             ApiResponse<SaveResponse> localVarResponse = await CellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storageName, outStorageName,extendedQueryParameters ,checkExcelRestriction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document and save result to storage. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Save options. (optional)</param>
        /// <param name="newfilename">The new file name. (optional)</param>
        /// <param name="isAutoFitRows">Autofit rows. (optional, default to false)</param>
        /// <param name="isAutoFitColumns">Autofit columns. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveResponse>> CellsSaveAsPostDocumentSaveAsAsyncWithHttpInfo (string name, SaveOptions saveOptions = null, string newfilename = null, bool? isAutoFitRows = null, bool? isAutoFitColumns = null, string folder = null, string storageName = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSaveAsPostDocumentSaveAs");

            var localVarPath = "/cells/{name}/SaveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newfilename != null) localVarQueryParams.Add("newfilename", Configuration.ApiClient.ParameterToString(newfilename)); // query parameter
            if (isAutoFitRows != null) localVarQueryParams.Add("isAutoFitRows", Configuration.ApiClient.ParameterToString(isAutoFitRows)); // query parameter
            if (isAutoFitColumns != null) localVarQueryParams.Add("isAutoFitColumns", Configuration.ApiClient.ParameterToString(isAutoFitColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter
            if (checkExcelRestriction!= null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (extendedQueryParameters != null)
            {
                foreach (KeyValuePair<string, string> keyValuePair in extendedQueryParameters)
                {
                    localVarQueryParams.Add(keyValuePair.Key, Configuration.ApiClient.ParameterToString(keyValuePair.Value));
                }
            }
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSaveAsPostDocumentSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsShapesDeleteWorksheetShape(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsShapesDeleteWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsShapesDeleteWorksheetShapeWithHttpInfo(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesDeleteWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesDeleteWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsShapesDeleteWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesDeleteWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesDeleteWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesDeleteWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsShapesDeleteWorksheetShapes(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsShapesDeleteWorksheetShapesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsShapesDeleteWorksheetShapesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesDeleteWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesDeleteWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesDeleteWorksheetShapesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsShapesDeleteWorksheetShapesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete all shapes in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesDeleteWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesDeleteWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesDeleteWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesDeleteWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ShapeResponse</returns>
        public ShapeResponse CellsShapesGetWorksheetShape(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ShapeResponse> localVarResponse = CellsShapesGetWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ShapeResponse</returns>
        public ApiResponse< ShapeResponse > CellsShapesGetWorksheetShapeWithHttpInfo(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesGetWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapeResponse)));
        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ShapeResponse</returns>
        public async System.Threading.Tasks.Task<ShapeResponse> CellsShapesGetWorksheetShapeAsync (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
             ApiResponse<ShapeResponse> localVarResponse = await CellsShapesGetWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet shape 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ShapeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShapeResponse>> CellsShapesGetWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesGetWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesGetWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapeResponse)));
        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ShapesResponse</returns>
        public ShapesResponse CellsShapesGetWorksheetShapes(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ShapesResponse> localVarResponse = CellsShapesGetWorksheetShapesWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ShapesResponse</returns>
        public ApiResponse< ShapesResponse > CellsShapesGetWorksheetShapesWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesGetWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesGetWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapesResponse)));
        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ShapesResponse</returns>
        public async System.Threading.Tasks.Task<ShapesResponse> CellsShapesGetWorksheetShapesAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<ShapesResponse> localVarResponse = await CellsShapesGetWorksheetShapesAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet shapes  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ShapesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShapesResponse>> CellsShapesGetWorksheetShapesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesGetWorksheetShapes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesGetWorksheetShapes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesGetWorksheetShapes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShapesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShapesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShapesResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsShapesPostWorksheetGroupShape(string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsShapesPostWorksheetGroupShapeWithHttpInfo(name, sheetName, listShape, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsShapesPostWorksheetGroupShapeWithHttpInfo(string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPostWorksheetGroupShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPostWorksheetGroupShape");
            // verify the required parameter 'listShape' is set
            if (listShape == null)
                throw new ApiException(400, "Missing required parameter 'listShape' when calling CellsApi->CellsShapesPostWorksheetGroupShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listShape != null && listShape.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listShape); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listShape; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetGroupShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPostWorksheetGroupShapeAsync (string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsShapesPostWorksheetGroupShapeAsyncWithHttpInfo(name, sheetName, listShape, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="listShape">group shape indexs in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPostWorksheetGroupShapeAsyncWithHttpInfo (string name, string sheetName, List<int?> listShape, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPostWorksheetGroupShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPostWorksheetGroupShape");
            // verify the required parameter 'listShape' is set
            if (listShape == null)
                throw new ApiException(400, "Missing required parameter 'listShape' when calling CellsApi->CellsShapesPostWorksheetGroupShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (listShape != null && listShape.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listShape); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listShape; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetGroupShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsShapesPostWorksheetShape(string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsShapesPostWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, dto, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsShapesPostWorksheetShapeWithHttpInfo(string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesPostWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dto != null && dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPostWorksheetShapeAsync (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsShapesPostWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeindex, dto, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="dto"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPostWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, Shape dto = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPostWorksheetShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesPostWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dto != null && dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsShapesPostWorksheetUngroupShape(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsShapesPostWorksheetUngroupShapeWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsShapesPostWorksheetUngroupShapeWithHttpInfo(string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPostWorksheetUngroupShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPostWorksheetUngroupShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesPostWorksheetUngroupShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetUngroupShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPostWorksheetUngroupShapeAsync (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsShapesPostWorksheetUngroupShapeAsyncWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeindex">shape index in worksheet shapes.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPostWorksheetUngroupShapeAsyncWithHttpInfo (string name, string sheetName, int? shapeindex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPostWorksheetUngroupShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPostWorksheetUngroupShape");
            // verify the required parameter 'shapeindex' is set
            if (shapeindex == null)
                throw new ApiException(400, "Missing required parameter 'shapeindex' when calling CellsApi->CellsShapesPostWorksheetUngroupShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}/ungroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (shapeindex != null) localVarPathParams.Add("shapeindex", Configuration.ApiClient.ParameterToString(shapeindex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPostWorksheetUngroupShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO"> (optional)</param>
        /// <param name="drawingType">shape object type (optional)</param>
        /// <param name="upperLeftRow">Upper left row index. (optional)</param>
        /// <param name="upperLeftColumn">Upper left column index. (optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel. (optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsShapesPutWorksheetShape(string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsShapesPutWorksheetShapeWithHttpInfo(name, sheetName, shapeDTO, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO"> (optional)</param>
        /// <param name="drawingType">shape object type (optional)</param>
        /// <param name="upperLeftRow">Upper left row index. (optional)</param>
        /// <param name="upperLeftColumn">Upper left column index. (optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel. (optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsShapesPutWorksheetShapeWithHttpInfo(string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPutWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (drawingType != null) localVarQueryParams.Add("drawingType", Configuration.ApiClient.ParameterToString(drawingType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (left != null) localVarQueryParams.Add("left", Configuration.ApiClient.ParameterToString(left)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (shapeDTO != null && shapeDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shapeDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shapeDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPutWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO"> (optional)</param>
        /// <param name="drawingType">shape object type (optional)</param>
        /// <param name="upperLeftRow">Upper left row index. (optional)</param>
        /// <param name="upperLeftColumn">Upper left column index. (optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel. (optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsShapesPutWorksheetShapeAsync (string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsShapesPutWorksheetShapeAsyncWithHttpInfo(name, sheetName, shapeDTO, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add shape in worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">document name.</param>
        /// <param name="sheetName">worksheet name.</param>
        /// <param name="shapeDTO"> (optional)</param>
        /// <param name="drawingType">shape object type (optional)</param>
        /// <param name="upperLeftRow">Upper left row index. (optional)</param>
        /// <param name="upperLeftColumn">Upper left column index. (optional)</param>
        /// <param name="top">Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)</param>
        /// <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)</param>
        /// <param name="width">Represents the height of Spinner, in unit of pixel. (optional)</param>
        /// <param name="height">Represents the width of Spinner, in unit of pixel. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsShapesPutWorksheetShapeAsyncWithHttpInfo (string name, string sheetName, Shape shapeDTO = null, string drawingType = null, int? upperLeftRow = null, int? upperLeftColumn = null, int? top = null, int? left = null, int? width = null, int? height = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsShapesPutWorksheetShape");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsShapesPutWorksheetShape");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (drawingType != null) localVarQueryParams.Add("drawingType", Configuration.ApiClient.ParameterToString(drawingType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (top != null) localVarQueryParams.Add("top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (left != null) localVarQueryParams.Add("left", Configuration.ApiClient.ParameterToString(left)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (shapeDTO != null && shapeDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shapeDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shapeDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsShapesPutWorksheetShape", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsSparklineGroupsDeleteWorksheetSparklineGroup(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo(name, sheetName, sparklineGroupIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroupIndex' is set
            if (sparklineGroupIndex == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroupIndex' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sparklineGroupIndex != null) localVarPathParams.Add("sparklineGroupIndex", Configuration.ApiClient.ParameterToString(sparklineGroupIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsDeleteWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsDeleteWorksheetSparklineGroupAsync (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsSparklineGroupsDeleteWorksheetSparklineGroupAsyncWithHttpInfo(name, sheetName, sparklineGroupIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsDeleteWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroupIndex' is set
            if (sparklineGroupIndex == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroupIndex' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sparklineGroupIndex != null) localVarPathParams.Add("sparklineGroupIndex", Configuration.ApiClient.ParameterToString(sparklineGroupIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsDeleteWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsSparklineGroupsDeleteWorksheetSparklineGroups(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroups");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroups");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsDeleteWorksheetSparklineGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsDeleteWorksheetSparklineGroupsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsSparklineGroupsDeleteWorksheetSparklineGroupsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsDeleteWorksheetSparklineGroupsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroups");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsDeleteWorksheetSparklineGroups");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsDeleteWorksheetSparklineGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>SparklineGroupResponse</returns>
        public SparklineGroupResponse CellsSparklineGroupsGetWorksheetSparklineGroup(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<SparklineGroupResponse> localVarResponse = CellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo(name, sheetName, sparklineGroupIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of SparklineGroupResponse</returns>
        public ApiResponse< SparklineGroupResponse > CellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroupIndex' is set
            if (sparklineGroupIndex == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroupIndex' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sparklineGroupIndex != null) localVarPathParams.Add("sparklineGroupIndex", Configuration.ApiClient.ParameterToString(sparklineGroupIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsGetWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SparklineGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SparklineGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SparklineGroupResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of SparklineGroupResponse</returns>
        public async System.Threading.Tasks.Task<SparklineGroupResponse> CellsSparklineGroupsGetWorksheetSparklineGroupAsync (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
             ApiResponse<SparklineGroupResponse> localVarResponse = await CellsSparklineGroupsGetWorksheetSparklineGroupAsyncWithHttpInfo(name, sheetName, sparklineGroupIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SparklineGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SparklineGroupResponse>> CellsSparklineGroupsGetWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, int? sparklineGroupIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroupIndex' is set
            if (sparklineGroupIndex == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroupIndex' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sparklineGroupIndex != null) localVarPathParams.Add("sparklineGroupIndex", Configuration.ApiClient.ParameterToString(sparklineGroupIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsGetWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SparklineGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SparklineGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SparklineGroupResponse)));
        }

        /// <summary>
        /// Get worksheet charts description. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>SparklineGroupsResponse</returns>
        public SparklineGroupsResponse CellsSparklineGroupsGetWorksheetSparklineGroups(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<SparklineGroupsResponse> localVarResponse = CellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet charts description. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of SparklineGroupsResponse</returns>
        public ApiResponse< SparklineGroupsResponse > CellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroups");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroups");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsGetWorksheetSparklineGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SparklineGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SparklineGroupsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SparklineGroupsResponse)));
        }

        /// <summary>
        /// Get worksheet charts description. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of SparklineGroupsResponse</returns>
        public async System.Threading.Tasks.Task<SparklineGroupsResponse> CellsSparklineGroupsGetWorksheetSparklineGroupsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<SparklineGroupsResponse> localVarResponse = await CellsSparklineGroupsGetWorksheetSparklineGroupsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet charts description. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SparklineGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SparklineGroupsResponse>> CellsSparklineGroupsGetWorksheetSparklineGroupsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroups");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsGetWorksheetSparklineGroups");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsGetWorksheetSparklineGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SparklineGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SparklineGroupsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SparklineGroupsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsSparklineGroupsPostWorksheetSparklineGroup(string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo(name, sheetName, sparklineGroupIndex, sparklineGroup, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroupIndex' is set
            if (sparklineGroupIndex == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroupIndex' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroup' is set
            if (sparklineGroup == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroup' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sparklineGroupIndex != null) localVarPathParams.Add("sparklineGroupIndex", Configuration.ApiClient.ParameterToString(sparklineGroupIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (sparklineGroup != null && sparklineGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sparklineGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sparklineGroup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsPostWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsPostWorksheetSparklineGroupAsync (string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsSparklineGroupsPostWorksheetSparklineGroupAsyncWithHttpInfo(name, sheetName, sparklineGroupIndex, sparklineGroup, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sparklineGroupIndex"></param>
        /// <param name="sparklineGroup"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsPostWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, int? sparklineGroupIndex, SparklineGroup sparklineGroup, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroupIndex' is set
            if (sparklineGroupIndex == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroupIndex' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");
            // verify the required parameter 'sparklineGroup' is set
            if (sparklineGroup == null)
                throw new ApiException(400, "Missing required parameter 'sparklineGroup' when calling CellsApi->CellsSparklineGroupsPostWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sparklineGroupIndex != null) localVarPathParams.Add("sparklineGroupIndex", Configuration.ApiClient.ParameterToString(sparklineGroupIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (sparklineGroup != null && sparklineGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sparklineGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sparklineGroup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsPostWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsSparklineGroupsPutWorksheetSparklineGroup(string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo(name, sheetName, type, dataRange, isVertical, locationRange, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo(string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'dataRange' is set
            if (dataRange == null)
                throw new ApiException(400, "Missing required parameter 'dataRange' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'isVertical' is set
            if (isVertical == null)
                throw new ApiException(400, "Missing required parameter 'isVertical' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'locationRange' is set
            if (locationRange == null)
                throw new ApiException(400, "Missing required parameter 'locationRange' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (dataRange != null) localVarQueryParams.Add("dataRange", Configuration.ApiClient.ParameterToString(dataRange)); // query parameter
            if (isVertical != null) localVarQueryParams.Add("isVertical", Configuration.ApiClient.ParameterToString(isVertical)); // query parameter
            if (locationRange != null) localVarQueryParams.Add("locationRange", Configuration.ApiClient.ParameterToString(locationRange)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsPutWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsSparklineGroupsPutWorksheetSparklineGroupAsync (string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsSparklineGroupsPutWorksheetSparklineGroupAsyncWithHttpInfo(name, sheetName, type, dataRange, isVertical, locationRange, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="type"></param>
        /// <param name="dataRange"></param>
        /// <param name="isVertical"></param>
        /// <param name="locationRange"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsSparklineGroupsPutWorksheetSparklineGroupAsyncWithHttpInfo (string name, string sheetName, string type, string dataRange, bool? isVertical, string locationRange, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'dataRange' is set
            if (dataRange == null)
                throw new ApiException(400, "Missing required parameter 'dataRange' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'isVertical' is set
            if (isVertical == null)
                throw new ApiException(400, "Missing required parameter 'isVertical' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");
            // verify the required parameter 'locationRange' is set
            if (locationRange == null)
                throw new ApiException(400, "Missing required parameter 'locationRange' when calling CellsApi->CellsSparklineGroupsPutWorksheetSparklineGroup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (dataRange != null) localVarQueryParams.Add("dataRange", Configuration.ApiClient.ParameterToString(dataRange)); // query parameter
            if (isVertical != null) localVarQueryParams.Add("isVertical", Configuration.ApiClient.ParameterToString(isVertical)); // query parameter
            if (locationRange != null) localVarQueryParams.Add("locationRange", Configuration.ApiClient.ParameterToString(locationRange)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsSparklineGroupsPutWorksheetSparklineGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Run tasks   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>Object</returns>
        public Object CellsTaskPostRunTask(TaskData taskData)
        {
             checkAccessToken();
             ApiResponse<Object> localVarResponse = CellsTaskPostRunTaskWithHttpInfo(taskData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run tasks   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CellsTaskPostRunTaskWithHttpInfo(TaskData taskData)
        {
            // verify the required parameter 'taskData' is set
            if (taskData == null)
                throw new ApiException(400, "Missing required parameter 'taskData' when calling CellsApi->CellsTaskPostRunTask");

            var localVarPath = "/cells/task/runtask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskData != null && taskData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsTaskPostRunTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Run tasks   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CellsTaskPostRunTaskAsync (TaskData taskData)
        {
             ApiResponse<Object> localVarResponse = await CellsTaskPostRunTaskAsyncWithHttpInfo(taskData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run tasks   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskData"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CellsTaskPostRunTaskAsyncWithHttpInfo (TaskData taskData)
        {
            // verify the required parameter 'taskData' is set
            if (taskData == null)
                throw new ApiException(400, "Missing required parameter 'taskData' when calling CellsApi->CellsTaskPostRunTask");

            var localVarPath = "/cells/task/runtask";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskData != null && taskData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsTaskPostRunTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookDeleteDecryptDocument(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookDeleteDecryptDocumentWithHttpInfo(name, encryption, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookDeleteDecryptDocumentWithHttpInfo(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteDecryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDecryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteDecryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo(name, encryption, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteDecryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDecryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookDeleteDocumentUnprotectFromChanges(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteDocumentUnprotectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDocumentUnprotectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteDocumentUnprotectFromChangesAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteDocumentUnprotectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDocumentUnprotectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookDeleteUnprotectDocument(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookDeleteUnprotectDocumentWithHttpInfo(name, protection, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookDeleteUnprotectDocumentWithHttpInfo(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteUnprotectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteUnprotectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteUnprotectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo(name, protection, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteUnprotectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteUnprotectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookDeleteWorkbookBackground(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookDeleteWorkbookBackgroundWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookDeleteWorkbookBackgroundWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteWorkbookBackground");

            var localVarPath = "/cells/{name}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteWorkbookBackgroundAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookDeleteWorkbookBackgroundAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteWorkbookBackgroundAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteWorkbookBackground");

            var localVarPath = "/cells/{name}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookDeleteWorkbookName(string name, string nameName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookDeleteWorkbookNameWithHttpInfo(name, nameName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookDeleteWorkbookNameWithHttpInfo(string name, string nameName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsApi->CellsWorkbookDeleteWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteWorkbookNameAsync (string name, string nameName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo(name, nameName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsApi->CellsWorkbookDeleteWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookDeleteWorkbookNames(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookDeleteWorkbookNamesWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookDeleteWorkbookNamesWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookDeleteWorkbookNamesAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookDeleteWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get page count for workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        public Object CellsWorkbookGetPageCount(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<Object> localVarResponse = CellsWorkbookGetPageCountWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get page count for workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CellsWorkbookGetPageCountWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetPageCount");

            var localVarPath = "/cells/{name}/pagecount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetPageCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get page count for workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CellsWorkbookGetPageCountAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<Object> localVarResponse = await CellsWorkbookGetPageCountAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get page count for workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CellsWorkbookGetPageCountAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetPageCount");

            var localVarPath = "/cells/{name}/pagecount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetPageCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">The document output folder. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorkbookGetWorkbook(string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorkbookGetWorkbookWithHttpInfo(name, password, format, isAutoFit, onlySaveTable, folder, storageName, outPath, outStorageName,extendedQueryParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">The document output folder. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorkbookGetWorkbookWithHttpInfo(string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbook");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (isAutoFit != null) localVarQueryParams.Add("isAutoFit", Configuration.ApiClient.ParameterToString(isAutoFit)); // query parameter
            if (onlySaveTable != null) localVarQueryParams.Add("onlySaveTable", Configuration.ApiClient.ParameterToString(onlySaveTable)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter
            if (extendedQueryParameters != null)
            {
                foreach (KeyValuePair<string, string> keyValuePair in extendedQueryParameters)
                {
                    localVarQueryParams.Add(keyValuePair.Key, Configuration.ApiClient.ParameterToString(keyValuePair.Value));
                }
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">The document output folder. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookGetWorkbookAsync (string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorkbookGetWorkbookAsyncWithHttpInfo(name, password, format, isAutoFit, onlySaveTable, folder, storageName, outPath, outStorageName,extendedQueryParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="onlySaveTable">Only save table data. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">The document output folder. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookGetWorkbookAsyncWithHttpInfo (string name, string password = null, string format = null, bool? isAutoFit = null, bool? onlySaveTable = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbook");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (isAutoFit != null) localVarQueryParams.Add("isAutoFit", Configuration.ApiClient.ParameterToString(isAutoFit)); // query parameter
            if (onlySaveTable != null) localVarQueryParams.Add("onlySaveTable", Configuration.ApiClient.ParameterToString(onlySaveTable)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter
            if (extendedQueryParameters != null)
            {
                foreach (KeyValuePair<string, string> keyValuePair in extendedQueryParameters)
                {
                    localVarQueryParams.Add(keyValuePair.Key, Configuration.ApiClient.ParameterToString(keyValuePair.Value));
                }
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>StyleResponse</returns>
        public StyleResponse CellsWorkbookGetWorkbookDefaultStyle(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<StyleResponse> localVarResponse = CellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        public ApiResponse< StyleResponse > CellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookDefaultStyle");

            var localVarPath = "/cells/{name}/defaultstyle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookDefaultStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        public async System.Threading.Tasks.Task<StyleResponse> CellsWorkbookGetWorkbookDefaultStyleAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<StyleResponse> localVarResponse = await CellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookDefaultStyle");

            var localVarPath = "/cells/{name}/defaultstyle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookDefaultStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>NameResponse</returns>
        public NameResponse CellsWorkbookGetWorkbookName(string name, string nameName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<NameResponse> localVarResponse = CellsWorkbookGetWorkbookNameWithHttpInfo(name, nameName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of NameResponse</returns>
        public ApiResponse< NameResponse > CellsWorkbookGetWorkbookNameWithHttpInfo(string name, string nameName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsApi->CellsWorkbookGetWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NameResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NameResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NameResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of NameResponse</returns>
        public async System.Threading.Tasks.Task<NameResponse> CellsWorkbookGetWorkbookNameAsync (string name, string nameName, string folder = null, string storageName = null)
        {
             ApiResponse<NameResponse> localVarResponse = await CellsWorkbookGetWorkbookNameAsyncWithHttpInfo(name, nameName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (NameResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NameResponse>> CellsWorkbookGetWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsApi->CellsWorkbookGetWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NameResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NameResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NameResponse)));
        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        public RangeValueResponse CellsWorkbookGetWorkbookNameValue(string name, string nameName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<RangeValueResponse> localVarResponse = CellsWorkbookGetWorkbookNameValueWithHttpInfo(name, nameName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        public ApiResponse< RangeValueResponse > CellsWorkbookGetWorkbookNameValueWithHttpInfo(string name, string nameName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookNameValue");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsApi->CellsWorkbookGetWorkbookNameValue");

            var localVarPath = "/cells/{name}/names/{nameName}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNameValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        public async System.Threading.Tasks.Task<RangeValueResponse> CellsWorkbookGetWorkbookNameValueAsync (string name, string nameName, string folder = null, string storageName = null)
        {
             ApiResponse<RangeValueResponse> localVarResponse = await CellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo(name, nameName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo (string name, string nameName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookNameValue");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsApi->CellsWorkbookGetWorkbookNameValue");

            var localVarPath = "/cells/{name}/names/{nameName}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNameValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>NamesResponse</returns>
        public NamesResponse CellsWorkbookGetWorkbookNames(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<NamesResponse> localVarResponse = CellsWorkbookGetWorkbookNamesWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of NamesResponse</returns>
        public ApiResponse< NamesResponse > CellsWorkbookGetWorkbookNamesWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamesResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of NamesResponse</returns>
        public async System.Threading.Tasks.Task<NamesResponse> CellsWorkbookGetWorkbookNamesAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<NamesResponse> localVarResponse = await CellsWorkbookGetWorkbookNamesAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (NamesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NamesResponse>> CellsWorkbookGetWorkbookNamesAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamesResponse)));
        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorkbookSettingsResponse</returns>
        public WorkbookSettingsResponse CellsWorkbookGetWorkbookSettings(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<WorkbookSettingsResponse> localVarResponse = CellsWorkbookGetWorkbookSettingsWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookSettingsResponse</returns>
        public ApiResponse< WorkbookSettingsResponse > CellsWorkbookGetWorkbookSettingsWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookSettingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookSettingsResponse)));
        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of WorkbookSettingsResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookSettingsResponse> CellsWorkbookGetWorkbookSettingsAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<WorkbookSettingsResponse> localVarResponse = await CellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookSettingsResponse>> CellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookSettingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookSettingsResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse CellsWorkbookGetWorkbookTextItems(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<TextItemsResponse> localVarResponse = CellsWorkbookGetWorkbookTextItemsWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > CellsWorkbookGetWorkbookTextItemsWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookTextItems");

            var localVarPath = "/cells/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookGetWorkbookTextItemsAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await CellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookGetWorkbookTextItems");

            var localVarPath = "/cells/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Autofit workbook columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startColumn">Start column. (optional)</param>
        /// <param name="endColumn">End column. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostAutofitWorkbookColumns(string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostAutofitWorkbookColumnsWithHttpInfo(name, autoFitterOptions, startColumn, endColumn, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autofit workbook columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startColumn">Start column. (optional)</param>
        /// <param name="endColumn">End column. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostAutofitWorkbookColumnsWithHttpInfo(string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostAutofitWorkbookColumns");

            var localVarPath = "/cells/{name}/autofitcolumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostAutofitWorkbookColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Autofit workbook columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startColumn">Start column. (optional)</param>
        /// <param name="endColumn">End column. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostAutofitWorkbookColumnsAsync (string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostAutofitWorkbookColumnsAsyncWithHttpInfo(name, autoFitterOptions, startColumn, endColumn, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autofit workbook columns. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startColumn">Start column. (optional)</param>
        /// <param name="endColumn">End column. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostAutofitWorkbookColumnsAsyncWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startColumn = null, int? endColumn = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostAutofitWorkbookColumns");

            var localVarPath = "/cells/{name}/autofitcolumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (endColumn != null) localVarQueryParams.Add("endColumn", Configuration.ApiClient.ParameterToString(endColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostAutofitWorkbookColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostAutofitWorkbookRows(string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostAutofitWorkbookRows");

            var localVarPath = "/cells/{name}/autofitrows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (onlyAuto != null) localVarQueryParams.Add("onlyAuto", Configuration.ApiClient.ParameterToString(onlyAuto)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostAutofitWorkbookRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostAutofitWorkbookRowsAsync (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostAutofitWorkbookRows");

            var localVarPath = "/cells/{name}/autofitrows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (onlyAuto != null) localVarQueryParams.Add("onlyAuto", Configuration.ApiClient.ParameterToString(onlyAuto)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostAutofitWorkbookRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add digital signature. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostDigitalSignature(string name, string digitalsignaturefile, string password, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostDigitalSignatureWithHttpInfo(name, digitalsignaturefile, password, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add digital signature. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostDigitalSignatureWithHttpInfo(string name, string digitalsignaturefile, string password, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostDigitalSignature");
            // verify the required parameter 'digitalsignaturefile' is set
            if (digitalsignaturefile == null)
                throw new ApiException(400, "Missing required parameter 'digitalsignaturefile' when calling CellsApi->CellsWorkbookPostDigitalSignature");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling CellsApi->CellsWorkbookPostDigitalSignature");

            var localVarPath = "/cells/{name}/digitalsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (digitalsignaturefile != null) localVarQueryParams.Add("digitalsignaturefile", Configuration.ApiClient.ParameterToString(digitalsignaturefile)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostDigitalSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add digital signature. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostDigitalSignatureAsync (string name, string digitalsignaturefile, string password, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostDigitalSignatureAsyncWithHttpInfo(name, digitalsignaturefile, password, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add digital signature. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="digitalsignaturefile">Digital signature file parameters.</param>
        /// <param name="password"></param>
        /// <param name="folder">Workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostDigitalSignatureAsyncWithHttpInfo (string name, string digitalsignaturefile, string password, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostDigitalSignature");
            // verify the required parameter 'digitalsignaturefile' is set
            if (digitalsignaturefile == null)
                throw new ApiException(400, "Missing required parameter 'digitalsignaturefile' when calling CellsApi->CellsWorkbookPostDigitalSignature");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling CellsApi->CellsWorkbookPostDigitalSignature");

            var localVarPath = "/cells/{name}/digitalsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (digitalsignaturefile != null) localVarQueryParams.Add("digitalsignaturefile", Configuration.ApiClient.ParameterToString(digitalsignaturefile)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostDigitalSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostEncryptDocument(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostEncryptDocumentWithHttpInfo(name, encryption, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostEncryptDocumentWithHttpInfo(string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostEncryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostEncryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostEncryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostEncryptDocumentAsyncWithHttpInfo(name, encryption, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostEncryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostEncryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostEncryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostImportData(string name, ImportOption importData, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostImportDataWithHttpInfo(name, importData, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostImportDataWithHttpInfo(string name, ImportOption importData, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostImportData");
            // verify the required parameter 'importData' is set
            if (importData == null)
                throw new ApiException(400, "Missing required parameter 'importData' when calling CellsApi->CellsWorkbookPostImportData");

            var localVarPath = "/cells/{name}/importdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (importData != null && importData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostImportData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostImportDataAsync (string name, ImportOption importData, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostImportDataAsyncWithHttpInfo(name, importData, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importData"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostImportDataAsyncWithHttpInfo (string name, ImportOption importData, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostImportData");
            // verify the required parameter 'importData' is set
            if (importData == null)
                throw new ApiException(400, "Missing required parameter 'importData' when calling CellsApi->CellsWorkbookPostImportData");

            var localVarPath = "/cells/{name}/importdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (importData != null && importData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostImportData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostProtectDocument(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostProtectDocumentWithHttpInfo(name, protection, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostProtectDocumentWithHttpInfo(string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostProtectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostProtectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostProtectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostProtectDocumentAsyncWithHttpInfo(name, protection, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostProtectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostProtectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostProtectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostWorkbookCalculateFormula(string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(name, options, ignoreError, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookCalculateFormula");

            var localVarPath = "/cells/{name}/calculateformula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (ignoreError != null) localVarQueryParams.Add("ignoreError", Configuration.ApiClient.ParameterToString(ignoreError)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookCalculateFormula", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostWorkbookCalculateFormulaAsync (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo(name, options, ignoreError, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookCalculateFormula");

            var localVarPath = "/cells/{name}/calculateformula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (ignoreError != null) localVarQueryParams.Add("ignoreError", Configuration.ApiClient.ParameterToString(ignoreError)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookCalculateFormula", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorkbookPostWorkbookGetSmartMarkerResult(string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(name, xmlFile, folder, storageName, outPath, outStorageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookGetSmartMarkerResult");

            var localVarPath = "/cells/{name}/smartmarker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xmlFile != null) localVarQueryParams.Add("xmlFile", Configuration.ApiClient.ParameterToString(xmlFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookGetSmartMarkerResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPostWorkbookGetSmartMarkerResultAsync (string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo(name, xmlFile, folder, storageName, outPath, outStorageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo (string name, string xmlFile = null, string folder = null, string storageName = null, string outPath = null, string outStorageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookGetSmartMarkerResult");

            var localVarPath = "/cells/{name}/smartmarker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xmlFile != null) localVarQueryParams.Add("xmlFile", Configuration.ApiClient.ParameterToString(xmlFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookGetSmartMarkerResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPostWorkbookSettings(string name, WorkbookSettings settings = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPostWorkbookSettingsWithHttpInfo(name, settings, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPostWorkbookSettingsWithHttpInfo(string name, WorkbookSettings settings = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPostWorkbookSettingsAsync (string name, WorkbookSettings settings = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo(name, settings, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo (string name, WorkbookSettings settings = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="outFolder">out Folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        public SplitResultResponse CellsWorkbookPostWorkbookSplit(string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null)
        {
             checkAccessToken();
             ApiResponse<SplitResultResponse> localVarResponse = CellsWorkbookPostWorkbookSplitWithHttpInfo(name, format, from, to, horizontalResolution, verticalResolution, folder, outFolder, storageName, outStorageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="outFolder">out Folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        public ApiResponse< SplitResultResponse > CellsWorkbookPostWorkbookSplitWithHttpInfo(string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookSplit");

            var localVarPath = "/cells/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (horizontalResolution != null) localVarQueryParams.Add("horizontalResolution", Configuration.ApiClient.ParameterToString(horizontalResolution)); // query parameter
            if (verticalResolution != null) localVarQueryParams.Add("verticalResolution", Configuration.ApiClient.ParameterToString(verticalResolution)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (outFolder != null) localVarQueryParams.Add("outFolder", Configuration.ApiClient.ParameterToString(outFolder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSplit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="outFolder">out Folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        public async System.Threading.Tasks.Task<SplitResultResponse> CellsWorkbookPostWorkbookSplitAsync (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = await CellsWorkbookPostWorkbookSplitAsyncWithHttpInfo(name, format, from, to, horizontalResolution, verticalResolution, folder, outFolder, storageName, outStorageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="outFolder">out Folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="outStorageName">output storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> CellsWorkbookPostWorkbookSplitAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null, string outFolder = null, string storageName = null, string outStorageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbookSplit");

            var localVarPath = "/cells/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (horizontalResolution != null) localVarQueryParams.Add("horizontalResolution", Configuration.ApiClient.ParameterToString(horizontalResolution)); // query parameter
            if (verticalResolution != null) localVarQueryParams.Add("verticalResolution", Configuration.ApiClient.ParameterToString(verticalResolution)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (outFolder != null) localVarQueryParams.Add("outFolder", Configuration.ApiClient.ParameterToString(outFolder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (outStorageName != null) localVarQueryParams.Add("outStorageName", Configuration.ApiClient.ParameterToString(outStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSplit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="mergedStorageName">merged file storage name. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        public WorkbookResponse CellsWorkbookPostWorkbooksMerge(string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null)
        {
             checkAccessToken();
             ApiResponse<WorkbookResponse> localVarResponse = CellsWorkbookPostWorkbooksMergeWithHttpInfo(name, mergeWith, folder, storageName, mergedStorageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="mergedStorageName">merged file storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        public ApiResponse< WorkbookResponse > CellsWorkbookPostWorkbooksMergeWithHttpInfo(string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbooksMerge");
            // verify the required parameter 'mergeWith' is set
            if (mergeWith == null)
                throw new ApiException(400, "Missing required parameter 'mergeWith' when calling CellsApi->CellsWorkbookPostWorkbooksMerge");

            var localVarPath = "/cells/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (mergeWith != null) localVarQueryParams.Add("mergeWith", Configuration.ApiClient.ParameterToString(mergeWith)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (mergedStorageName != null) localVarQueryParams.Add("mergedStorageName", Configuration.ApiClient.ParameterToString(mergedStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="mergedStorageName">merged file storage name. (optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPostWorkbooksMergeAsync (string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null)
        {
             ApiResponse<WorkbookResponse> localVarResponse = await CellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo(name, mergeWith, folder, storageName, mergedStorageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="mergedStorageName">merged file storage name. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo (string name, string mergeWith, string folder = null, string storageName = null, string mergedStorageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbooksMerge");
            // verify the required parameter 'mergeWith' is set
            if (mergeWith == null)
                throw new ApiException(400, "Missing required parameter 'mergeWith' when calling CellsApi->CellsWorkbookPostWorkbooksMerge");

            var localVarPath = "/cells/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (mergeWith != null) localVarQueryParams.Add("mergeWith", Configuration.ApiClient.ParameterToString(mergeWith)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (mergedStorageName != null) localVarQueryParams.Add("mergedStorageName", Configuration.ApiClient.ParameterToString(mergedStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorkbookReplaceResponse</returns>
        public WorkbookReplaceResponse CellsWorkbookPostWorkbooksTextReplace(string name, string oldValue, string newValue, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<WorkbookReplaceResponse> localVarResponse = CellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(name, oldValue, newValue, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookReplaceResponse</returns>
        public ApiResponse< WorkbookReplaceResponse > CellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(string name, string oldValue, string newValue, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'oldValue' is set
            if (oldValue == null)
                throw new ApiException(400, "Missing required parameter 'oldValue' when calling CellsApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'newValue' is set
            if (newValue == null)
                throw new ApiException(400, "Missing required parameter 'newValue' when calling CellsApi->CellsWorkbookPostWorkbooksTextReplace");

            var localVarPath = "/cells/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (oldValue != null) localVarQueryParams.Add("oldValue", Configuration.ApiClient.ParameterToString(oldValue)); // query parameter
            if (newValue != null) localVarQueryParams.Add("newValue", Configuration.ApiClient.ParameterToString(newValue)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookReplaceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookReplaceResponse)));
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of WorkbookReplaceResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookReplaceResponse> CellsWorkbookPostWorkbooksTextReplaceAsync (string name, string oldValue, string newValue, string folder = null, string storageName = null)
        {
             ApiResponse<WorkbookReplaceResponse> localVarResponse = await CellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo(name, oldValue, newValue, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookReplaceResponse>> CellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo (string name, string oldValue, string newValue, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'oldValue' is set
            if (oldValue == null)
                throw new ApiException(400, "Missing required parameter 'oldValue' when calling CellsApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'newValue' is set
            if (newValue == null)
                throw new ApiException(400, "Missing required parameter 'newValue' when calling CellsApi->CellsWorkbookPostWorkbooksTextReplace");

            var localVarPath = "/cells/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (oldValue != null) localVarQueryParams.Add("oldValue", Configuration.ApiClient.ParameterToString(oldValue)); // query parameter
            if (newValue != null) localVarQueryParams.Add("newValue", Configuration.ApiClient.ParameterToString(newValue)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookReplaceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookReplaceResponse)));
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse CellsWorkbookPostWorkbooksTextSearch(string name, string text, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<TextItemsResponse> localVarResponse = CellsWorkbookPostWorkbooksTextSearchWithHttpInfo(name, text, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > CellsWorkbookPostWorkbooksTextSearchWithHttpInfo(string name, string text, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbooksTextSearch");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling CellsApi->CellsWorkbookPostWorkbooksTextSearch");

            var localVarPath = "/cells/{name}/findText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookPostWorkbooksTextSearchAsync (string name, string text, string folder = null, string storageName = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await CellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo(name, text, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo (string name, string text, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPostWorkbooksTextSearch");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling CellsApi->CellsWorkbookPostWorkbooksTextSearch");

            var localVarPath = "/cells/{name}/findText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorkbookPutConvertWorkbook(System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorkbookPutConvertWorkbookWithHttpInfo(file, format, password, outPath, storageName,extendedQueryParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorkbookPutConvertWorkbookWithHttpInfo(System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->CellsWorkbookPutConvertWorkbook");

            var localVarPath = "/cells/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            if (extendedQueryParameters != null)
            {
                foreach (KeyValuePair<string, string> keyValuePair in extendedQueryParameters)
                {
                    localVarQueryParams.Add(keyValuePair.Key, Configuration.ApiClient.ParameterToString(keyValuePair.Value));
                }
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutConvertWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPutConvertWorkbookAsync (System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorkbookPutConvertWorkbookAsyncWithHttpInfo(file, format, password, outPath, storageName,extendedQueryParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPutConvertWorkbookAsyncWithHttpInfo (System.IO.Stream file, string format = null, string password = null, string outPath = null, string storageName = null, IDictionary<string, string> extendedQueryParameters = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->CellsWorkbookPutConvertWorkbook");

            var localVarPath = "/cells/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (extendedQueryParameters != null)
            {
                foreach (KeyValuePair<string, string> keyValuePair in extendedQueryParameters)
                {
                    localVarQueryParams.Add(keyValuePair.Key, Configuration.ApiClient.ParameterToString(keyValuePair.Value));
                }
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutConvertWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPutDocumentProtectFromChanges(string name, PasswordRequest password = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(name, password, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(string name, PasswordRequest password = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutDocumentProtectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (password != null && password.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(password); // http body (model) parameter
            }
            else
            {
                localVarPostBody = password; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutDocumentProtectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPutDocumentProtectFromChangesAsync (string name, PasswordRequest password = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo(name, password, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo (string name, PasswordRequest password = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutDocumentProtectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (password != null && password.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(password); // http body (model) parameter
            }
            else
            {
                localVarPostBody = password; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutDocumentProtectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPutWorkbookBackground(string name, byte[] png, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPutWorkbookBackgroundWithHttpInfo(name, png, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPutWorkbookBackgroundWithHttpInfo(string name, byte[] png, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutWorkbookBackground");
            // verify the required parameter 'png' is set
            if (png == null)
                throw new ApiException(400, "Missing required parameter 'png' when calling CellsApi->CellsWorkbookPutWorkbookBackground");

            var localVarPath = "/cells/{name}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (png != null && png.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(png); // http body (model) parameter
            }
            else
            {
                localVarPostBody = png; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPutWorkbookBackgroundAsync (string name, byte[] png, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPutWorkbookBackgroundAsyncWithHttpInfo(name, png, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPutWorkbookBackgroundAsyncWithHttpInfo (string name, byte[] png, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutWorkbookBackground");
            // verify the required parameter 'png' is set
            if (png == null)
                throw new ApiException(400, "Missing required parameter 'png' when calling CellsApi->CellsWorkbookPutWorkbookBackground");

            var localVarPath = "/cells/{name}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (png != null && png.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(png); // http body (model) parameter
            }
            else
            {
                localVarPostBody = png; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="isWriteOver">write over file. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        public WorkbookResponse CellsWorkbookPutWorkbookCreate(string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<WorkbookResponse> localVarResponse = CellsWorkbookPutWorkbookCreateWithHttpInfo(name, templateFile, dataFile, isWriteOver, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="isWriteOver">write over file. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        public ApiResponse< WorkbookResponse > CellsWorkbookPutWorkbookCreateWithHttpInfo(string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutWorkbookCreate");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (templateFile != null) localVarQueryParams.Add("templateFile", Configuration.ApiClient.ParameterToString(templateFile)); // query parameter
            if (dataFile != null) localVarQueryParams.Add("dataFile", Configuration.ApiClient.ParameterToString(dataFile)); // query parameter
            if (isWriteOver != null) localVarQueryParams.Add("isWriteOver", Configuration.ApiClient.ParameterToString(isWriteOver)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="isWriteOver">write over file. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPutWorkbookCreateAsync (string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null)
        {
             ApiResponse<WorkbookResponse> localVarResponse = await CellsWorkbookPutWorkbookCreateAsyncWithHttpInfo(name, templateFile, dataFile, isWriteOver, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="isWriteOver">write over file. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPutWorkbookCreateAsyncWithHttpInfo (string name, string templateFile = null, string dataFile = null, bool? isWriteOver = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutWorkbookCreate");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (templateFile != null) localVarQueryParams.Add("templateFile", Configuration.ApiClient.ParameterToString(templateFile)); // query parameter
            if (dataFile != null) localVarQueryParams.Add("dataFile", Configuration.ApiClient.ParameterToString(dataFile)); // query parameter
            if (isWriteOver != null) localVarQueryParams.Add("isWriteOver", Configuration.ApiClient.ParameterToString(isWriteOver)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorkbookPutWorkbookWaterMarker(string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorkbookPutWorkbookWaterMarkerWithHttpInfo(name, folder, storageName, textWaterMarkerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorkbookPutWorkbookWaterMarkerWithHttpInfo(string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutWorkbookWaterMarker");

            var localVarPath = "/cells/{name}/watermarker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (textWaterMarkerRequest != null && textWaterMarkerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(textWaterMarkerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textWaterMarkerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookWaterMarker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorkbookPutWorkbookWaterMarkerAsync (string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorkbookPutWorkbookWaterMarkerAsyncWithHttpInfo(name, folder, storageName, textWaterMarkerRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set workbook background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <param name="textWaterMarkerRequest">The text water marker request. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorkbookPutWorkbookWaterMarkerAsyncWithHttpInfo (string name, string folder = null, string storageName = null, TextWaterMarkerRequest textWaterMarkerRequest = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorkbookPutWorkbookWaterMarker");

            var localVarPath = "/cells/{name}/watermarker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (textWaterMarkerRequest != null && textWaterMarkerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(textWaterMarkerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textWaterMarkerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookWaterMarker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetValidationsDeleteWorksheetValidation(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsDeleteWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetValidationsDeleteWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo(name, sheetName, validationIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsDeleteWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear all validation in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetValidationsDeleteWorksheetValidations(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear all validation in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidations");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidations");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsDeleteWorksheetValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Clear all validation in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetValidationsDeleteWorksheetValidationsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetValidationsDeleteWorksheetValidationsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear all validation in worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetValidationsDeleteWorksheetValidationsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidations");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsDeleteWorksheetValidations");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsDeleteWorksheetValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsGetWorksheetValidation(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsGetWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo(name, sheetName, validationIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationsResponse</returns>
        public ValidationsResponse CellsWorksheetValidationsGetWorksheetValidations(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ValidationsResponse> localVarResponse = CellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationsResponse</returns>
        public ApiResponse< ValidationsResponse > CellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidations");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidations");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationsResponse)));
        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ValidationsResponse</returns>
        public async System.Threading.Tasks.Task<ValidationsResponse> CellsWorksheetValidationsGetWorksheetValidationsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<ValidationsResponse> localVarResponse = await CellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationsResponse>> CellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidations");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsGetWorksheetValidations");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationsResponse)));
        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsPostWorksheetValidation(string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, validation, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsApi->CellsWorksheetValidationsPostWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (validation != null && validation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPostWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPostWorksheetValidationAsync (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo(name, sheetName, validationIndex, validation, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsApi->CellsWorksheetValidationsPostWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (validation != null && validation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPostWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="validation">validation (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsPutWorksheetValidation(string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(name, sheetName, range, validation, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="validation">validation (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsPutWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsPutWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (validation != null && validation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPutWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="validation">validation (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPutWorksheetValidationAsync (string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo(name, sheetName, range, validation, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="validation">validation (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, string range = null, Validation validation = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetValidationsPutWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetValidationsPutWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (validation != null && validation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPutWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Unprotect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteUnprotectWorksheet(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(name, sheetName, protectParameter, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unprotect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteUnprotectWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteUnprotectWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protectParameter != null && protectParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteUnprotectWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unprotect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteUnprotectWorksheetAsync (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo(name, sheetName, protectParameter, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unprotect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. Only password is used here. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteUnprotectWorksheetAsyncWithHttpInfo (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteUnprotectWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteUnprotectWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protectParameter != null && protectParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteUnprotectWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteWorksheet(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteWorksheetWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteWorksheetWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteWorksheetAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteWorksheetBackground(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetBackground");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetBackground");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetBackgroundAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetBackgroundAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetBackground");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetBackground");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteWorksheetComment(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteWorksheetCommentWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsDeleteWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetCommentAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsDeleteWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all comments for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteWorksheetComments(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all comments for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetComments");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetComments");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Delete all comments for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetCommentsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete all comments for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetCommentsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetComments");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetComments");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unfreeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteWorksheetFreezePanes(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unfreeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'freezedRows' is set
            if (freezedRows == null)
                throw new ApiException(400, "Missing required parameter 'freezedRows' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'freezedColumns' is set
            if (freezedColumns == null)
                throw new ApiException(400, "Missing required parameter 'freezedColumns' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (freezedRows != null) localVarQueryParams.Add("freezedRows", Configuration.ApiClient.ParameterToString(freezedRows)); // query parameter
            if (freezedColumns != null) localVarQueryParams.Add("freezedColumns", Configuration.ApiClient.ParameterToString(freezedColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetFreezePanes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Unfreeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetFreezePanesAsync (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unfreeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetFreezePanesAsyncWithHttpInfo (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'freezedRows' is set
            if (freezedRows == null)
                throw new ApiException(400, "Missing required parameter 'freezedRows' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");
            // verify the required parameter 'freezedColumns' is set
            if (freezedColumns == null)
                throw new ApiException(400, "Missing required parameter 'freezedColumns' when calling CellsApi->CellsWorksheetsDeleteWorksheetFreezePanes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (freezedRows != null) localVarQueryParams.Add("freezedRows", Configuration.ApiClient.ParameterToString(freezedRows)); // query parameter
            if (freezedColumns != null) localVarQueryParams.Add("freezedColumns", Configuration.ApiClient.ParameterToString(freezedColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheetFreezePanes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName"> (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsDeleteWorksheets(string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsDeleteWorksheetsWithHttpInfo(name, matchCondition, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName"> (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsDeleteWorksheetsWithHttpInfo(string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheets");
            // verify the required parameter 'matchCondition' is set
            if (matchCondition == null)
                throw new ApiException(400, "Missing required parameter 'matchCondition' when calling CellsApi->CellsWorksheetsDeleteWorksheets");

            var localVarPath = "/cells/{name}/worksheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (matchCondition != null && matchCondition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(matchCondition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matchCondition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName"> (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsDeleteWorksheetsAsync (string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsDeleteWorksheetsAsyncWithHttpInfo(name, matchCondition, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="matchCondition"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName"> (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsDeleteWorksheetsAsyncWithHttpInfo (string name, MatchConditionRequest matchCondition, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsDeleteWorksheets");
            // verify the required parameter 'matchCondition' is set
            if (matchCondition == null)
                throw new ApiException(400, "Missing required parameter 'matchCondition' when calling CellsApi->CellsWorksheetsDeleteWorksheets");

            var localVarPath = "/cells/{name}/worksheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (matchCondition != null && matchCondition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(matchCondition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matchCondition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsDeleteWorksheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Read worksheets ranges info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>RangesResponse</returns>
        public RangesResponse CellsWorksheetsGetNamedRanges(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<RangesResponse> localVarResponse = CellsWorksheetsGetNamedRangesWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheets ranges info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of RangesResponse</returns>
        public ApiResponse< RangesResponse > CellsWorksheetsGetNamedRangesWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetNamedRanges");

            var localVarPath = "/cells/{name}/worksheets/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetNamedRanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangesResponse)));
        }

        /// <summary>
        /// Read worksheets ranges info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of RangesResponse</returns>
        public async System.Threading.Tasks.Task<RangesResponse> CellsWorksheetsGetNamedRangesAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<RangesResponse> localVarResponse = await CellsWorksheetsGetNamedRangesAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheets ranges info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (RangesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangesResponse>> CellsWorksheetsGetNamedRangesAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetNamedRanges");

            var localVarPath = "/cells/{name}/worksheets/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetNamedRanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangesResponse)));
        }

        /// <summary>
        /// Get page count for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Object</returns>
        public Object CellsWorksheetsGetPageCount(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<Object> localVarResponse = CellsWorksheetsGetPageCountWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get page count for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CellsWorksheetsGetPageCountWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetPageCount");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetPageCount");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagecount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetPageCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get page count for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CellsWorksheetsGetPageCountAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<Object> localVarResponse = await CellsWorksheetsGetPageCountAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get page count for worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CellsWorksheetsGetPageCountAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetPageCount");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetPageCount");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagecount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetPageCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read worksheet info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="area">Exported area. (optional)</param>
        /// <param name="pageIndex">Exported page index. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorksheetsGetWorksheet(string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorksheetsGetWorksheetWithHttpInfo(name, sheetName, format, verticalResolution, horizontalResolution, area, pageIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheet info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="area">Exported area. (optional)</param>
        /// <param name="pageIndex">Exported page index. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorksheetsGetWorksheetWithHttpInfo(string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (verticalResolution != null) localVarQueryParams.Add("verticalResolution", Configuration.ApiClient.ParameterToString(verticalResolution)); // query parameter
            if (horizontalResolution != null) localVarQueryParams.Add("horizontalResolution", Configuration.ApiClient.ParameterToString(horizontalResolution)); // query parameter
            if (area != null) localVarQueryParams.Add("area", Configuration.ApiClient.ParameterToString(area)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", Configuration.ApiClient.ParameterToString(pageIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read worksheet info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="area">Exported area. (optional)</param>
        /// <param name="pageIndex">Exported page index. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorksheetsGetWorksheetAsync (string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorksheetsGetWorksheetAsyncWithHttpInfo(name, sheetName, format, verticalResolution, horizontalResolution, area, pageIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheet info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="area">Exported area. (optional)</param>
        /// <param name="pageIndex">Exported page index. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorksheetsGetWorksheetAsyncWithHttpInfo (string name, string sheetName, string format = null, int? verticalResolution = null, int? horizontalResolution = null, string area = null, int? pageIndex = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (verticalResolution != null) localVarQueryParams.Add("verticalResolution", Configuration.ApiClient.ParameterToString(verticalResolution)); // query parameter
            if (horizontalResolution != null) localVarQueryParams.Add("horizontalResolution", Configuration.ApiClient.ParameterToString(horizontalResolution)); // query parameter
            if (area != null) localVarQueryParams.Add("area", Configuration.ApiClient.ParameterToString(area)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", Configuration.ApiClient.ParameterToString(pageIndex)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Calculate formula value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>SingleValueResponse</returns>
        public SingleValueResponse CellsWorksheetsGetWorksheetCalculateFormula(string name, string sheetName, string formula, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<SingleValueResponse> localVarResponse = CellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(name, sheetName, formula, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate formula value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of SingleValueResponse</returns>
        public ApiResponse< SingleValueResponse > CellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(string name, string sheetName, string formula, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetCalculateFormula");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetCalculateFormula");
            // verify the required parameter 'formula' is set
            if (formula == null)
                throw new ApiException(400, "Missing required parameter 'formula' when calling CellsApi->CellsWorksheetsGetWorksheetCalculateFormula");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/formulaResult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (formula != null) localVarQueryParams.Add("formula", Configuration.ApiClient.ParameterToString(formula)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetCalculateFormula", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleValueResponse)));
        }

        /// <summary>
        /// Calculate formula value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of SingleValueResponse</returns>
        public async System.Threading.Tasks.Task<SingleValueResponse> CellsWorksheetsGetWorksheetCalculateFormulaAsync (string name, string sheetName, string formula, string folder = null, string storageName = null)
        {
             ApiResponse<SingleValueResponse> localVarResponse = await CellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo(name, sheetName, formula, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate formula value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SingleValueResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleValueResponse>> CellsWorksheetsGetWorksheetCalculateFormulaAsyncWithHttpInfo (string name, string sheetName, string formula, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetCalculateFormula");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetCalculateFormula");
            // verify the required parameter 'formula' is set
            if (formula == null)
                throw new ApiException(400, "Missing required parameter 'formula' when calling CellsApi->CellsWorksheetsGetWorksheetCalculateFormula");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/formulaResult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (formula != null) localVarQueryParams.Add("formula", Configuration.ApiClient.ParameterToString(formula)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetCalculateFormula", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleValueResponse)));
        }

        /// <summary>
        /// Get worksheet comment by cell name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse CellsWorksheetsGetWorksheetComment(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CommentResponse> localVarResponse = CellsWorksheetsGetWorksheetCommentWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet comment by cell name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > CellsWorksheetsGetWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsGetWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Get worksheet comment by cell name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> CellsWorksheetsGetWorksheetCommentAsync (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await CellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo(name, sheetName, cellName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet comment by cell name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CellsWorksheetsGetWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsGetWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Get worksheet comments. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CommentsResponse</returns>
        public CommentsResponse CellsWorksheetsGetWorksheetComments(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CommentsResponse> localVarResponse = CellsWorksheetsGetWorksheetCommentsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet comments. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CommentsResponse</returns>
        public ApiResponse< CommentsResponse > CellsWorksheetsGetWorksheetCommentsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetComments");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetComments");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentsResponse)));
        }

        /// <summary>
        /// Get worksheet comments. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CommentsResponse</returns>
        public async System.Threading.Tasks.Task<CommentsResponse> CellsWorksheetsGetWorksheetCommentsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<CommentsResponse> localVarResponse = await CellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet comments. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CommentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentsResponse>> CellsWorksheetsGetWorksheetCommentsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetComments");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetComments");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentsResponse)));
        }

        /// <summary>
        /// Get worksheet merged cell by its index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>MergedCellResponse</returns>
        public MergedCellResponse CellsWorksheetsGetWorksheetMergedCell(string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<MergedCellResponse> localVarResponse = CellsWorksheetsGetWorksheetMergedCellWithHttpInfo(name, sheetName, mergedCellIndex, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet merged cell by its index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of MergedCellResponse</returns>
        public ApiResponse< MergedCellResponse > CellsWorksheetsGetWorksheetMergedCellWithHttpInfo(string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCell");
            // verify the required parameter 'mergedCellIndex' is set
            if (mergedCellIndex == null)
                throw new ApiException(400, "Missing required parameter 'mergedCellIndex' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (mergedCellIndex != null) localVarPathParams.Add("mergedCellIndex", Configuration.ApiClient.ParameterToString(mergedCellIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetMergedCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergedCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergedCellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergedCellResponse)));
        }

        /// <summary>
        /// Get worksheet merged cell by its index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of MergedCellResponse</returns>
        public async System.Threading.Tasks.Task<MergedCellResponse> CellsWorksheetsGetWorksheetMergedCellAsync (string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null)
        {
             ApiResponse<MergedCellResponse> localVarResponse = await CellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo(name, sheetName, mergedCellIndex, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet merged cell by its index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="mergedCellIndex">Merged cell index.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (MergedCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergedCellResponse>> CellsWorksheetsGetWorksheetMergedCellAsyncWithHttpInfo (string name, string sheetName, int? mergedCellIndex, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCell");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCell");
            // verify the required parameter 'mergedCellIndex' is set
            if (mergedCellIndex == null)
                throw new ApiException(400, "Missing required parameter 'mergedCellIndex' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCell");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (mergedCellIndex != null) localVarPathParams.Add("mergedCellIndex", Configuration.ApiClient.ParameterToString(mergedCellIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetMergedCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergedCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergedCellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergedCellResponse)));
        }

        /// <summary>
        /// Get worksheet merged cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>MergedCellsResponse</returns>
        public MergedCellsResponse CellsWorksheetsGetWorksheetMergedCells(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<MergedCellsResponse> localVarResponse = CellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet merged cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of MergedCellsResponse</returns>
        public ApiResponse< MergedCellsResponse > CellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCells");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCells");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetMergedCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergedCellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergedCellsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergedCellsResponse)));
        }

        /// <summary>
        /// Get worksheet merged cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of MergedCellsResponse</returns>
        public async System.Threading.Tasks.Task<MergedCellsResponse> CellsWorksheetsGetWorksheetMergedCellsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<MergedCellsResponse> localVarResponse = await CellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet merged cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The workseet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (MergedCellsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergedCellsResponse>> CellsWorksheetsGetWorksheetMergedCellsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCells");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetMergedCells");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetMergedCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergedCellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergedCellsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergedCellsResponse)));
        }

        /// <summary>
        /// Get worksheet text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse CellsWorksheetsGetWorksheetTextItems(string name, string sheetName, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<TextItemsResponse> localVarResponse = CellsWorksheetsGetWorksheetTextItemsWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > CellsWorksheetsGetWorksheetTextItemsWithHttpInfo(string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetTextItems");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetTextItems");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Get worksheet text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> CellsWorksheetsGetWorksheetTextItemsAsync (string name, string sheetName, string folder = null, string storageName = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await CellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo(name, sheetName, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorksheetsGetWorksheetTextItemsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheetTextItems");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsGetWorksheetTextItems");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheetTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorksheetsResponse</returns>
        public WorksheetsResponse CellsWorksheetsGetWorksheets(string name, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<WorksheetsResponse> localVarResponse = CellsWorksheetsGetWorksheetsWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorksheetsResponse</returns>
        public ApiResponse< WorksheetsResponse > CellsWorksheetsGetWorksheetsWithHttpInfo(string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheets");

            var localVarPath = "/cells/{name}/worksheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorksheetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorksheetsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorksheetsResponse)));
        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of WorksheetsResponse</returns>
        public async System.Threading.Tasks.Task<WorksheetsResponse> CellsWorksheetsGetWorksheetsAsync (string name, string folder = null, string storageName = null)
        {
             ApiResponse<WorksheetsResponse> localVarResponse = await CellsWorksheetsGetWorksheetsAsyncWithHttpInfo(name, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read worksheets info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (WorksheetsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorksheetsResponse>> CellsWorksheetsGetWorksheetsAsyncWithHttpInfo (string name, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsGetWorksheets");

            var localVarPath = "/cells/{name}/worksheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsGetWorksheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorksheetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorksheetsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorksheetsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="firstRow"> (optional)</param>
        /// <param name="lastRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostAutofitWorksheetColumns(string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="firstRow"> (optional)</param>
        /// <param name="lastRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");
            // verify the required parameter 'firstColumn' is set
            if (firstColumn == null)
                throw new ApiException(400, "Missing required parameter 'firstColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");
            // verify the required parameter 'lastColumn' is set
            if (lastColumn == null)
                throw new ApiException(400, "Missing required parameter 'lastColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitcolumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (lastColumn != null) localVarQueryParams.Add("lastColumn", Configuration.ApiClient.ParameterToString(lastColumn)); // query parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (lastRow != null) localVarQueryParams.Add("lastRow", Configuration.ApiClient.ParameterToString(lastRow)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostAutofitWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="firstRow"> (optional)</param>
        /// <param name="lastRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetColumnsAsync (string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="firstRow"> (optional)</param>
        /// <param name="lastRow"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostAutofitWorksheetColumnsAsyncWithHttpInfo (string name, string sheetName, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, int? firstRow = null, int? lastRow = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");
            // verify the required parameter 'firstColumn' is set
            if (firstColumn == null)
                throw new ApiException(400, "Missing required parameter 'firstColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");
            // verify the required parameter 'lastColumn' is set
            if (lastColumn == null)
                throw new ApiException(400, "Missing required parameter 'lastColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetColumns");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitcolumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (lastColumn != null) localVarQueryParams.Add("lastColumn", Configuration.ApiClient.ParameterToString(lastColumn)); // query parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (lastRow != null) localVarQueryParams.Add("lastRow", Configuration.ApiClient.ParameterToString(lastRow)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostAutofitWorksheetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostAutofitWorksheetRow(string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'firstColumn' is set
            if (firstColumn == null)
                throw new ApiException(400, "Missing required parameter 'firstColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'lastColumn' is set
            if (lastColumn == null)
                throw new ApiException(400, "Missing required parameter 'lastColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarQueryParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (lastColumn != null) localVarQueryParams.Add("lastColumn", Configuration.ApiClient.ParameterToString(lastColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostAutofitWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetRowAsync (string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="rowIndex"></param>
        /// <param name="firstColumn"></param>
        /// <param name="lastColumn"></param>
        /// <param name="autoFitterOptions"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostAutofitWorksheetRowAsyncWithHttpInfo (string name, string sheetName, int? rowIndex, int? firstColumn, int? lastColumn, AutoFitterOptions autoFitterOptions = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'rowIndex' is set
            if (rowIndex == null)
                throw new ApiException(400, "Missing required parameter 'rowIndex' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'firstColumn' is set
            if (firstColumn == null)
                throw new ApiException(400, "Missing required parameter 'firstColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");
            // verify the required parameter 'lastColumn' is set
            if (lastColumn == null)
                throw new ApiException(400, "Missing required parameter 'lastColumn' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRow");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (rowIndex != null) localVarQueryParams.Add("rowIndex", Configuration.ApiClient.ParameterToString(rowIndex)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (lastColumn != null) localVarQueryParams.Add("lastColumn", Configuration.ApiClient.ParameterToString(lastColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostAutofitWorksheetRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Autofit worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostAutofitWorksheetRows(string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autofit worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (onlyAuto != null) localVarQueryParams.Add("onlyAuto", Configuration.ApiClient.ParameterToString(onlyAuto)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostAutofitWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Autofit worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostAutofitWorksheetRowsAsync (string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autofit worksheet rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostAutofitWorksheetRowsAsyncWithHttpInfo (string name, string sheetName, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRows");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostAutofitWorksheetRows");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (onlyAuto != null) localVarQueryParams.Add("onlyAuto", Configuration.ApiClient.ParameterToString(onlyAuto)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostAutofitWorksheetRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="sourceWorkbook"> (optional)</param>
        /// <param name="sourceFolder"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostCopyWorksheet(string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostCopyWorksheetWithHttpInfo(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="sourceWorkbook"> (optional)</param>
        /// <param name="sourceFolder"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostCopyWorksheetWithHttpInfo(string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostCopyWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostCopyWorksheet");
            // verify the required parameter 'sourceSheet' is set
            if (sourceSheet == null)
                throw new ApiException(400, "Missing required parameter 'sourceSheet' when calling CellsApi->CellsWorksheetsPostCopyWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceSheet != null) localVarQueryParams.Add("sourceSheet", Configuration.ApiClient.ParameterToString(sourceSheet)); // query parameter
            if (sourceWorkbook != null) localVarQueryParams.Add("sourceWorkbook", Configuration.ApiClient.ParameterToString(sourceWorkbook)); // query parameter
            if (sourceFolder != null) localVarQueryParams.Add("sourceFolder", Configuration.ApiClient.ParameterToString(sourceFolder)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostCopyWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="sourceWorkbook"> (optional)</param>
        /// <param name="sourceFolder"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostCopyWorksheetAsync (string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sourceSheet"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="sourceWorkbook"> (optional)</param>
        /// <param name="sourceFolder"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostCopyWorksheetAsyncWithHttpInfo (string name, string sheetName, string sourceSheet, CopyOptions options = null, string sourceWorkbook = null, string sourceFolder = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostCopyWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostCopyWorksheet");
            // verify the required parameter 'sourceSheet' is set
            if (sourceSheet == null)
                throw new ApiException(400, "Missing required parameter 'sourceSheet' when calling CellsApi->CellsWorksheetsPostCopyWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (sourceSheet != null) localVarQueryParams.Add("sourceSheet", Configuration.ApiClient.ParameterToString(sourceSheet)); // query parameter
            if (sourceWorkbook != null) localVarQueryParams.Add("sourceWorkbook", Configuration.ApiClient.ParameterToString(sourceWorkbook)); // query parameter
            if (sourceFolder != null) localVarQueryParams.Add("sourceFolder", Configuration.ApiClient.ParameterToString(sourceFolder)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostCopyWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Move worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostMoveWorksheet(string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostMoveWorksheetWithHttpInfo(name, sheetName, moving, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostMoveWorksheetWithHttpInfo(string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostMoveWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostMoveWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (moving != null && moving.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(moving); // http body (model) parameter
            }
            else
            {
                localVarPostBody = moving; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostMoveWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Move worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostMoveWorksheetAsync (string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo(name, sheetName, moving, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="moving">with moving parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostMoveWorksheetAsyncWithHttpInfo (string name, string sheetName, WorksheetMovingRequest moving = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostMoveWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostMoveWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (moving != null && moving.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(moving); // http body (model) parameter
            }
            else
            {
                localVarPostBody = moving; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostMoveWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Rename worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostRenameWorksheet(string name, string sheetName, string newname, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostRenameWorksheetWithHttpInfo(name, sheetName, newname, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rename worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostRenameWorksheetWithHttpInfo(string name, string sheetName, string newname, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostRenameWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostRenameWorksheet");
            // verify the required parameter 'newname' is set
            if (newname == null)
                throw new ApiException(400, "Missing required parameter 'newname' when calling CellsApi->CellsWorksheetsPostRenameWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (newname != null) localVarQueryParams.Add("newname", Configuration.ApiClient.ParameterToString(newname)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostRenameWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Rename worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostRenameWorksheetAsync (string name, string sheetName, string newname, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo(name, sheetName, newname, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rename worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="newname"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostRenameWorksheetAsyncWithHttpInfo (string name, string sheetName, string newname, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostRenameWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostRenameWorksheet");
            // verify the required parameter 'newname' is set
            if (newname == null)
                throw new ApiException(400, "Missing required parameter 'newname' when calling CellsApi->CellsWorksheetsPostRenameWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (newname != null) localVarQueryParams.Add("newname", Configuration.ApiClient.ParameterToString(newname)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostRenameWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet property 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostUpdateWorksheetProperty(string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(name, sheetName, sheet, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet property 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetProperty");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetProperty");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (sheet != null && sheet.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sheet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sheet; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostUpdateWorksheetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet property 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostUpdateWorksheetPropertyAsync (string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo(name, sheetName, sheet, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet property 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="sheet"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostUpdateWorksheetPropertyAsyncWithHttpInfo (string name, string sheetName, Worksheet sheet = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetProperty");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetProperty");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (sheet != null && sheet.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sheet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sheet; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostUpdateWorksheetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostUpdateWorksheetZoom(string name, string sheetName, int? value, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(name, sheetName, value, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(string name, string sheetName, int? value, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetZoom");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetZoom");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetZoom");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/zoom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostUpdateWorksheetZoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostUpdateWorksheetZoomAsync (string name, string sheetName, int? value, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo(name, sheetName, value, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostUpdateWorksheetZoomAsyncWithHttpInfo (string name, string sheetName, int? value, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetZoom");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetZoom");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsApi->CellsWorksheetsPostUpdateWorksheetZoom");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/zoom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostUpdateWorksheetZoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostWorksheetComment(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostWorksheetCommentWithHttpInfo(name, sheetName, cellName, comment, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsPostWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Update worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostWorksheetCommentAsync (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo(name, sheetName, cellName, comment, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsPostWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Sort worksheet range. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPostWorksheetRangeSort(string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPostWorksheetRangeSortWithHttpInfo(name, sheetName, cellArea, dataSorter, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sort worksheet range. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPostWorksheetRangeSortWithHttpInfo(string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorksheetRangeSort");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorksheetRangeSort");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsWorksheetsPostWorksheetRangeSort");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dataSorter != null && dataSorter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataSorter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSorter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorksheetRangeSort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Sort worksheet range. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPostWorksheetRangeSortAsync (string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo(name, sheetName, cellArea, dataSorter, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sort worksheet range. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellArea">The range to sort.</param>
        /// <param name="dataSorter">with sorting settings. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPostWorksheetRangeSortAsyncWithHttpInfo (string name, string sheetName, string cellArea, DataSorter dataSorter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorksheetRangeSort");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorksheetRangeSort");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsApi->CellsWorksheetsPostWorksheetRangeSort");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (dataSorter != null && dataSorter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataSorter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataSorter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorksheetRangeSort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse CellsWorksheetsPostWorksheetTextSearch(string name, string sheetName, string text, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<TextItemsResponse> localVarResponse = CellsWorksheetsPostWorksheetTextSearchWithHttpInfo(name, sheetName, text, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > CellsWorksheetsPostWorksheetTextSearchWithHttpInfo(string name, string sheetName, string text, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorksheetTextSearch");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorksheetTextSearch");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling CellsApi->CellsWorksheetsPostWorksheetTextSearch");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/findText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorksheetTextSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> CellsWorksheetsPostWorksheetTextSearchAsync (string name, string sheetName, string text, string folder = null, string storageName = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await CellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo(name, sheetName, text, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="text">Text to search.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorksheetsPostWorksheetTextSearchAsyncWithHttpInfo (string name, string sheetName, string text, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorksheetTextSearch");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorksheetTextSearch");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling CellsApi->CellsWorksheetsPostWorksheetTextSearch");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/findText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorksheetTextSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>WorksheetReplaceResponse</returns>
        public WorksheetReplaceResponse CellsWorksheetsPostWorsheetTextReplace(string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<WorksheetReplaceResponse> localVarResponse = CellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(name, sheetName, oldValue, newValue, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of WorksheetReplaceResponse</returns>
        public ApiResponse< WorksheetReplaceResponse > CellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");
            // verify the required parameter 'oldValue' is set
            if (oldValue == null)
                throw new ApiException(400, "Missing required parameter 'oldValue' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");
            // verify the required parameter 'newValue' is set
            if (newValue == null)
                throw new ApiException(400, "Missing required parameter 'newValue' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oldValue != null) localVarQueryParams.Add("oldValue", Configuration.ApiClient.ParameterToString(oldValue)); // query parameter
            if (newValue != null) localVarQueryParams.Add("newValue", Configuration.ApiClient.ParameterToString(newValue)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorsheetTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorksheetReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorksheetReplaceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorksheetReplaceResponse)));
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of WorksheetReplaceResponse</returns>
        public async System.Threading.Tasks.Task<WorksheetReplaceResponse> CellsWorksheetsPostWorsheetTextReplaceAsync (string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null)
        {
             ApiResponse<WorksheetReplaceResponse> localVarResponse = await CellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo(name, sheetName, oldValue, newValue, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="oldValue">The old text to replace.</param>
        /// <param name="newValue">The new text to replace by.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (WorksheetReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorksheetReplaceResponse>> CellsWorksheetsPostWorsheetTextReplaceAsyncWithHttpInfo (string name, string sheetName, string oldValue, string newValue, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");
            // verify the required parameter 'oldValue' is set
            if (oldValue == null)
                throw new ApiException(400, "Missing required parameter 'oldValue' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");
            // verify the required parameter 'newValue' is set
            if (newValue == null)
                throw new ApiException(400, "Missing required parameter 'newValue' when calling CellsApi->CellsWorksheetsPostWorsheetTextReplace");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (oldValue != null) localVarQueryParams.Add("oldValue", Configuration.ApiClient.ParameterToString(oldValue)); // query parameter
            if (newValue != null) localVarQueryParams.Add("newValue", Configuration.ApiClient.ParameterToString(newValue)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPostWorsheetTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorksheetReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorksheetReplaceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorksheetReplaceResponse)));
        }

        /// <summary>
        /// Add new worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position. (optional)</param>
        /// <param name="sheettype">The new sheet type. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPutAddNewWorksheet(string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPutAddNewWorksheetWithHttpInfo(name, sheetName, position, sheettype, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position. (optional)</param>
        /// <param name="sheettype">The new sheet type. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPutAddNewWorksheetWithHttpInfo(string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutAddNewWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutAddNewWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (position != null) localVarQueryParams.Add("position", Configuration.ApiClient.ParameterToString(position)); // query parameter
            if (sheettype != null) localVarQueryParams.Add("sheettype", Configuration.ApiClient.ParameterToString(sheettype)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutAddNewWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add new worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position. (optional)</param>
        /// <param name="sheettype">The new sheet type. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutAddNewWorksheetAsync (string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo(name, sheetName, position, sheettype, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The new sheet name.</param>
        /// <param name="position">The new sheet position. (optional)</param>
        /// <param name="sheettype">The new sheet type. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutAddNewWorksheetAsyncWithHttpInfo (string name, string sheetName, int? position = null, string sheettype = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutAddNewWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutAddNewWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (position != null) localVarQueryParams.Add("position", Configuration.ApiClient.ParameterToString(position)); // query parameter
            if (sheettype != null) localVarQueryParams.Add("sheettype", Configuration.ApiClient.ParameterToString(sheettype)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutAddNewWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Change worksheet visibility. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPutChangeVisibilityWorksheet(string name, string sheetName, bool? isVisible, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(name, sheetName, isVisible, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change worksheet visibility. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(string name, string sheetName, bool? isVisible, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutChangeVisibilityWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutChangeVisibilityWorksheet");
            // verify the required parameter 'isVisible' is set
            if (isVisible == null)
                throw new ApiException(400, "Missing required parameter 'isVisible' when calling CellsApi->CellsWorksheetsPutChangeVisibilityWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/visible";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (isVisible != null) localVarQueryParams.Add("isVisible", Configuration.ApiClient.ParameterToString(isVisible)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutChangeVisibilityWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Change worksheet visibility. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutChangeVisibilityWorksheetAsync (string name, string sheetName, bool? isVisible, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo(name, sheetName, isVisible, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change worksheet visibility. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="isVisible">New worksheet visibility value.</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutChangeVisibilityWorksheetAsyncWithHttpInfo (string name, string sheetName, bool? isVisible, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutChangeVisibilityWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutChangeVisibilityWorksheet");
            // verify the required parameter 'isVisible' is set
            if (isVisible == null)
                throw new ApiException(400, "Missing required parameter 'isVisible' when calling CellsApi->CellsWorksheetsPutChangeVisibilityWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/visible";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (isVisible != null) localVarQueryParams.Add("isVisible", Configuration.ApiClient.ParameterToString(isVisible)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutChangeVisibilityWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Protect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPutProtectWorksheet(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPutProtectWorksheetWithHttpInfo(name, sheetName, protectParameter, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPutProtectWorksheetWithHttpInfo(string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutProtectWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutProtectWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protectParameter != null && protectParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutProtectWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Protect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutProtectWorksheetAsync (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo(name, sheetName, protectParameter, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="protectParameter">with protection settings. (optional)</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutProtectWorksheetAsyncWithHttpInfo (string name, string sheetName, ProtectSheetParameter protectParameter = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutProtectWorksheet");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutProtectWorksheet");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (protectParameter != null && protectParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutProtectWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPutWorksheetBackground(string name, string sheetName, byte[] png, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPutWorksheetBackgroundWithHttpInfo(name, sheetName, png, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPutWorksheetBackgroundWithHttpInfo(string name, string sheetName, byte[] png, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutWorksheetBackground");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutWorksheetBackground");
            // verify the required parameter 'png' is set
            if (png == null)
                throw new ApiException(400, "Missing required parameter 'png' when calling CellsApi->CellsWorksheetsPutWorksheetBackground");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (png != null && png.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(png); // http body (model) parameter
            }
            else
            {
                localVarPostBody = png; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutWorksheetBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutWorksheetBackgroundAsync (string name, string sheetName, byte[] png, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo(name, sheetName, png, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set worksheet background image. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="png"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutWorksheetBackgroundAsyncWithHttpInfo (string name, string sheetName, byte[] png, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutWorksheetBackground");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutWorksheetBackground");
            // verify the required parameter 'png' is set
            if (png == null)
                throw new ApiException(400, "Missing required parameter 'png' when calling CellsApi->CellsWorksheetsPutWorksheetBackground");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/background";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (png != null && png.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(png); // http body (model) parameter
            }
            else
            {
                localVarPostBody = png; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutWorksheetBackground", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Add worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse CellsWorksheetsPutWorksheetComment(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CommentResponse> localVarResponse = CellsWorksheetsPutWorksheetCommentWithHttpInfo(name, sheetName, cellName, comment, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > CellsWorksheetsPutWorksheetCommentWithHttpInfo(string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsPutWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Add worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> CellsWorksheetsPutWorksheetCommentAsync (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await CellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo(name, sheetName, cellName, comment, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add worksheet&#39;s cell comment. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="cellName">The cell name</param>
        /// <param name="comment">Comment object (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CellsWorksheetsPutWorksheetCommentAsyncWithHttpInfo (string name, string sheetName, string cellName, Comment comment = null, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutWorksheetComment");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutWorksheetComment");
            // verify the required parameter 'cellName' is set
            if (cellName == null)
                throw new ApiException(400, "Missing required parameter 'cellName' when calling CellsApi->CellsWorksheetsPutWorksheetComment");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellName != null) localVarPathParams.Add("cellName", Configuration.ApiClient.ParameterToString(cellName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutWorksheetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Set freeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>CellsCloudResponse</returns>
        public CellsCloudResponse CellsWorksheetsPutWorksheetFreezePanes(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<CellsCloudResponse> localVarResponse = CellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set freeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>ApiResponse of CellsCloudResponse</returns>
        public ApiResponse< CellsCloudResponse > CellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'freezedRows' is set
            if (freezedRows == null)
                throw new ApiException(400, "Missing required parameter 'freezedRows' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'freezedColumns' is set
            if (freezedColumns == null)
                throw new ApiException(400, "Missing required parameter 'freezedColumns' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (freezedRows != null) localVarQueryParams.Add("freezedRows", Configuration.ApiClient.ParameterToString(freezedRows)); // query parameter
            if (freezedColumns != null) localVarQueryParams.Add("freezedColumns", Configuration.ApiClient.ParameterToString(freezedColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutWorksheetFreezePanes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Set freeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of CellsCloudResponse</returns>
        public async System.Threading.Tasks.Task<CellsCloudResponse> CellsWorksheetsPutWorksheetFreezePanesAsync (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
             ApiResponse<CellsCloudResponse> localVarResponse = await CellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set freeze panes 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="freezedRows"></param>
        /// <param name="freezedColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storageName">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (CellsCloudResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CellsCloudResponse>> CellsWorksheetsPutWorksheetFreezePanesAsyncWithHttpInfo (string name, string sheetName, int? row, int? column, int? freezedRows, int? freezedColumns, string folder = null, string storageName = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'freezedRows' is set
            if (freezedRows == null)
                throw new ApiException(400, "Missing required parameter 'freezedRows' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");
            // verify the required parameter 'freezedColumns' is set
            if (freezedColumns == null)
                throw new ApiException(400, "Missing required parameter 'freezedColumns' when calling CellsApi->CellsWorksheetsPutWorksheetFreezePanes");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (freezedRows != null) localVarQueryParams.Add("freezedRows", Configuration.ApiClient.ParameterToString(freezedRows)); // query parameter
            if (freezedColumns != null) localVarQueryParams.Add("freezedColumns", Configuration.ApiClient.ParameterToString(freezedColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetsPutWorksheetFreezePanes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CellsCloudResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CellsCloudResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CellsCloudResponse)));
        }

        /// <summary>
        /// Copy file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to copy (optional)</param>
        /// <returns></returns>
        public void CopyFile(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
             checkAccessToken();
             CopyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }

        /// <summary>
        /// Copy file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to copy (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CopyFileWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->CopyFile");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->CopyFile");

            var localVarPath = "/cells/storage/file/copy/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to copy (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CopyFileAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
             await CopyFileAsyncWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);

        }

        /// <summary>
        /// Copy file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="destPath">Destination file path</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to copy (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CopyFileAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->CopyFile");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->CopyFile");

            var localVarPath = "/cells/storage/file/copy/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns></returns>
        public void CopyFolder(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
             checkAccessToken();
             CopyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }

        /// <summary>
        /// Copy folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CopyFolderWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->CopyFolder");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->CopyFolder");

            var localVarPath = "/cells/storage/folder/copy/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CopyFolderAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
             await CopyFolderAsyncWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);

        }

        /// <summary>
        /// Copy folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source folder path e.g. &#39;/src&#39;</param>
        /// <param name="destPath">Destination folder path e.g. &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CopyFolderAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->CopyFolder");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->CopyFolder");

            var localVarPath = "/cells/storage/folder/copy/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create the folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns></returns>
        public void CreateFolder(string path, string storageName = null)
        {
             checkAccessToken();
             CreateFolderWithHttpInfo(path, storageName);
        }

        /// <summary>
        /// Create the folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateFolderWithHttpInfo(string path, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->CreateFolder");

            var localVarPath = "/cells/storage/folder/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create the folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateFolderAsync (string path, string storageName = null)
        {
             await CreateFolderAsyncWithHttpInfo(path, storageName);

        }

        /// <summary>
        /// Create the folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path to create e.g. &#39;folder_1/folder_2/&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateFolderAsyncWithHttpInfo (string path, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->CreateFolder");

            var localVarPath = "/cells/storage/folder/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to delete (optional)</param>
        /// <returns></returns>
        public void DeleteFile(string path, string storageName = null, string versionId = null)
        {
             checkAccessToken();
             DeleteFileWithHttpInfo(path, storageName, versionId);
        }

        /// <summary>
        /// Delete file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileWithHttpInfo(string path, string storageName = null, string versionId = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->DeleteFile");

            var localVarPath = "/cells/storage/file/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to delete (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync (string path, string storageName = null, string versionId = null)
        {
             await DeleteFileAsyncWithHttpInfo(path, storageName, versionId);

        }

        /// <summary>
        /// Delete file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to delete (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string path, string storageName = null, string versionId = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->DeleteFile");

            var localVarPath = "/cells/storage/file/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteFolder(string path, string storageName = null, bool? recursive = null)
        {
             checkAccessToken();
             DeleteFolderWithHttpInfo(path, storageName, recursive);
        }

        /// <summary>
        /// Delete folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFolderWithHttpInfo(string path, string storageName = null, bool? recursive = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->DeleteFolder");

            var localVarPath = "/cells/storage/folder/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (recursive != null) localVarQueryParams.Add("recursive", Configuration.ApiClient.ParameterToString(recursive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFolderAsync (string path, string storageName = null, bool? recursive = null)
        {
             await DeleteFolderAsyncWithHttpInfo(path, storageName, recursive);

        }

        /// <summary>
        /// Delete folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="recursive">Enable to delete folders, subfolders and files (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string path, string storageName = null, bool? recursive = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->DeleteFolder");

            var localVarPath = "/cells/storage/folder/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (recursive != null) localVarQueryParams.Add("recursive", Configuration.ApiClient.ParameterToString(recursive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to download (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadFile(string path, string storageName = null, string versionId = null)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = DownloadFileWithHttpInfo(path, storageName, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to download (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DownloadFileWithHttpInfo(string path, string storageName = null, string versionId = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->DownloadFile");

            var localVarPath = "/cells/storage/file/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to download (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync (string path, string storageName = null, string versionId = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DownloadFileAsyncWithHttpInfo(path, storageName, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/folder/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID to download (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileAsyncWithHttpInfo (string path, string storageName = null, string versionId = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->DownloadFile");

            var localVarPath = "/cells/storage/file/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "multipart/form-data"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get disc usage 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>DiscUsage</returns>
        public DiscUsage GetDiscUsage(string storageName = null)
        {
             checkAccessToken();
             ApiResponse<DiscUsage> localVarResponse = GetDiscUsageWithHttpInfo(storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get disc usage 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of DiscUsage</returns>
        public ApiResponse< DiscUsage > GetDiscUsageWithHttpInfo(string storageName = null)
        {

            var localVarPath = "/cells/storage/disc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiscUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DiscUsage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiscUsage)));
        }

        /// <summary>
        /// Get disc usage 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of DiscUsage</returns>
        public async System.Threading.Tasks.Task<DiscUsage> GetDiscUsageAsync (string storageName = null)
        {
             ApiResponse<DiscUsage> localVarResponse = await GetDiscUsageAsyncWithHttpInfo(storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get disc usage 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of ApiResponse (DiscUsage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiscUsage>> GetDiscUsageAsyncWithHttpInfo (string storageName = null)
        {

            var localVarPath = "/cells/storage/disc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiscUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiscUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DiscUsage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiscUsage)));
        }

        /// <summary>
        /// Get file versions 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>FileVersions</returns>
        public FileVersions GetFileVersions(string path, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<FileVersions> localVarResponse = GetFileVersionsWithHttpInfo(path, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file versions 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of FileVersions</returns>
        public ApiResponse< FileVersions > GetFileVersionsWithHttpInfo(string path, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->GetFileVersions");

            var localVarPath = "/cells/storage/version/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileVersions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileVersions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileVersions)));
        }

        /// <summary>
        /// Get file versions 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of FileVersions</returns>
        public async System.Threading.Tasks.Task<FileVersions> GetFileVersionsAsync (string path, string storageName = null)
        {
             ApiResponse<FileVersions> localVarResponse = await GetFileVersionsAsyncWithHttpInfo(path, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get file versions 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File path e.g. &#39;/file.ext&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of ApiResponse (FileVersions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileVersions>> GetFileVersionsAsyncWithHttpInfo (string path, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->GetFileVersions");

            var localVarPath = "/cells/storage/version/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileVersions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileVersions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileVersions)));
        }

        /// <summary>
        /// Get all files and folders within a folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>FilesList</returns>
        public FilesList GetFilesList(string path, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<FilesList> localVarResponse = GetFilesListWithHttpInfo(path, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all files and folders within a folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of FilesList</returns>
        public ApiResponse< FilesList > GetFilesListWithHttpInfo(string path, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->GetFilesList");

            var localVarPath = "/cells/storage/folder/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesList)));
        }

        /// <summary>
        /// Get all files and folders within a folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of FilesList</returns>
        public async System.Threading.Tasks.Task<FilesList> GetFilesListAsync (string path, string storageName = null)
        {
             ApiResponse<FilesList> localVarResponse = await GetFilesListAsyncWithHttpInfo(path, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all files and folders within a folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Folder path e.g. &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of ApiResponse (FilesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesList>> GetFilesListAsyncWithHttpInfo (string path, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->GetFilesList");

            var localVarPath = "/cells/storage/folder/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFilesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesList)));
        }

        /// <summary>
        /// Move file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to move (optional)</param>
        /// <returns></returns>
        public void MoveFile(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
             checkAccessToken();
             MoveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }

        /// <summary>
        /// Move file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to move (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MoveFileWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->MoveFile");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->MoveFile");

            var localVarPath = "/cells/storage/file/move/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to move (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveFileAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
             await MoveFileAsyncWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);

        }

        /// <summary>
        /// Move file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Source file path e.g. &#39;/src.ext&#39;</param>
        /// <param name="destPath">Destination file path e.g. &#39;/dest.ext&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <param name="versionId">File version ID to move (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MoveFileAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null, string versionId = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->MoveFile");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->MoveFile");

            var localVarPath = "/cells/storage/file/move/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns></returns>
        public void MoveFolder(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
             checkAccessToken();
             MoveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }

        /// <summary>
        /// Move folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MoveFolderWithHttpInfo(string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->MoveFolder");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->MoveFolder");

            var localVarPath = "/cells/storage/folder/move/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveFolderAsync (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
             await MoveFolderAsyncWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);

        }

        /// <summary>
        /// Move folder 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srcPath">Folder path to move e.g. &#39;/folder&#39;</param>
        /// <param name="destPath">Destination folder path to move to e.g &#39;/dst&#39;</param>
        /// <param name="srcStorageName">Source storage name (optional)</param>
        /// <param name="destStorageName">Destination storage name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MoveFolderAsyncWithHttpInfo (string srcPath, string destPath, string srcStorageName = null, string destStorageName = null)
        {
            // verify the required parameter 'srcPath' is set
            if (srcPath == null)
                throw new ApiException(400, "Missing required parameter 'srcPath' when calling CellsApi->MoveFolder");
            // verify the required parameter 'destPath' is set
            if (destPath == null)
                throw new ApiException(400, "Missing required parameter 'destPath' when calling CellsApi->MoveFolder");

            var localVarPath = "/cells/storage/folder/move/{srcPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (srcPath != null) localVarPathParams.Add("srcPath", Configuration.ApiClient.ParameterToString(srcPath)); // path parameter
            if (destPath != null) localVarQueryParams.Add("destPath", Configuration.ApiClient.ParameterToString(destPath)); // query parameter
            if (srcStorageName != null) localVarQueryParams.Add("srcStorageName", Configuration.ApiClient.ParameterToString(srcStorageName)); // query parameter
            if (destStorageName != null) localVarQueryParams.Add("destStorageName", Configuration.ApiClient.ParameterToString(destStorageName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Access token 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse OAuthPost(string grantType, string clientId, string clientSecret)
        {
             checkAccessToken();
             ApiResponse<AccessTokenResponse> localVarResponse = OAuthPostWithHttpInfo(grantType, clientId, clientSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Access token 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > OAuthPostWithHttpInfo(string grantType, string clientId, string clientSecret)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling CellsApi->OAuthPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CellsApi->OAuthPost");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling CellsApi->OAuthPost");

            var localVarPath = "/connect/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("client_secret", Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuthPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        /// Get Access token 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> OAuthPostAsync (string grantType, string clientId, string clientSecret)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await OAuthPostAsyncWithHttpInfo(grantType, clientId, clientSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Access token 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">Grant Type</param>
        /// <param name="clientId">App SID</param>
        /// <param name="clientSecret">App Key</param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> OAuthPostAsyncWithHttpInfo (string grantType, string clientId, string clientSecret)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling CellsApi->OAuthPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CellsApi->OAuthPost");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling CellsApi->OAuthPost");

            var localVarPath = "/connect/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("client_secret", Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuthPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        /// Check if file or folder exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID (optional)</param>
        /// <returns>ObjectExist</returns>
        public ObjectExist ObjectExists(string path, string storageName = null, string versionId = null)
        {
             checkAccessToken();
             ApiResponse<ObjectExist> localVarResponse = ObjectExistsWithHttpInfo(path, storageName, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if file or folder exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID (optional)</param>
        /// <returns>ApiResponse of ObjectExist</returns>
        public ApiResponse< ObjectExist > ObjectExistsWithHttpInfo(string path, string storageName = null, string versionId = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->ObjectExists");

            var localVarPath = "/cells/storage/exist/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObjectExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectExist>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ObjectExist) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectExist)));
        }

        /// <summary>
        /// Check if file or folder exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID (optional)</param>
        /// <returns>Task of ObjectExist</returns>
        public async System.Threading.Tasks.Task<ObjectExist> ObjectExistsAsync (string path, string storageName = null, string versionId = null)
        {
             ApiResponse<ObjectExist> localVarResponse = await ObjectExistsAsyncWithHttpInfo(path, storageName, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if file or folder exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <param name="versionId">File version ID (optional)</param>
        /// <returns>Task of ApiResponse (ObjectExist)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ObjectExist>> ObjectExistsAsyncWithHttpInfo (string path, string storageName = null, string versionId = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->ObjectExists");

            var localVarPath = "/cells/storage/exist/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (versionId != null) localVarQueryParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObjectExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectExist>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ObjectExist) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectExist)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostBatchConvert(BatchConvertRequest batchConvertRequest)
        {
             checkAccessToken();
             ApiResponse<System.IO.Stream> localVarResponse = PostBatchConvertWithHttpInfo(batchConvertRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PostBatchConvertWithHttpInfo(BatchConvertRequest batchConvertRequest)
        {
            // verify the required parameter 'batchConvertRequest' is set
            if (batchConvertRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchConvertRequest' when calling CellsApi->PostBatchConvert");

            var localVarPath = "/cells/batch/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchConvertRequest != null && batchConvertRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(batchConvertRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchConvertRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBatchConvert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostBatchConvertAsync (BatchConvertRequest batchConvertRequest)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostBatchConvertAsyncWithHttpInfo(batchConvertRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchConvertRequest"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostBatchConvertAsyncWithHttpInfo (BatchConvertRequest batchConvertRequest)
        {
            // verify the required parameter 'batchConvertRequest' is set
            if (batchConvertRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchConvertRequest' when calling CellsApi->PostBatchConvert");

            var localVarPath = "/cells/batch/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchConvertRequest != null && batchConvertRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(batchConvertRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchConvertRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBatchConvert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>FileInfo</returns>
        public FileInfo PostConvertWorkbookToDocx(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            checkAccessToken();
            ApiResponse<FileInfo> localVarResponse = PostConvertWorkbookToDocxWithHttpInfo(file, password, checkExcelRestriction);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>ApiResponse of FileInfo</returns>
        public ApiResponse<FileInfo> PostConvertWorkbookToDocxWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->PostConvertWorkbookToDocx");

            var localVarPath = "/cells/convert/docx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (checkExcelRestriction != null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertWorkbookToDocx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>Task of FileInfo</returns>
        public async System.Threading.Tasks.Task<FileInfo> PostConvertWorkbookToDocxAsync(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            ApiResponse<FileInfo> localVarResponse = await PostConvertWorkbookToDocxAsyncWithHttpInfo(file, password, checkExcelRestriction);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostConvertWorkbookToDocxAsyncWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->PostConvertWorkbookToDocx");

            var localVarPath = "/cells/convert/docx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (checkExcelRestriction != null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertWorkbookToDocx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>FileInfo</returns>
        public FileInfo PostConvertWorkbookToPDF(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            checkAccessToken();
            ApiResponse<FileInfo> localVarResponse = PostConvertWorkbookToPDFWithHttpInfo(file, password, checkExcelRestriction);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>ApiResponse of FileInfo</returns>
        public ApiResponse<FileInfo> PostConvertWorkbookToPDFWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->PostConvertWorkbookToPDF");

            var localVarPath = "/cells/convert/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (checkExcelRestriction != null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertWorkbookToPDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>Task of FileInfo</returns>
        public async System.Threading.Tasks.Task<FileInfo> PostConvertWorkbookToPDFAsync(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            ApiResponse<FileInfo> localVarResponse = await PostConvertWorkbookToPDFAsyncWithHttpInfo(file, password, checkExcelRestriction);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostConvertWorkbookToPDFAsyncWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->PostConvertWorkbookToPDF");

            var localVarPath = "/cells/convert/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (checkExcelRestriction != null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertWorkbookToPDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>FileInfo</returns>
        public FileInfo PostConvertWorkbookToPNG(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            checkAccessToken();
            ApiResponse<FileInfo> localVarResponse = PostConvertWorkbookToPNGWithHttpInfo(file, password, checkExcelRestriction);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>ApiResponse of FileInfo</returns>
        public ApiResponse<FileInfo> PostConvertWorkbookToPNGWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->PostConvertWorkbookToPNG");

            var localVarPath = "/cells/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (checkExcelRestriction != null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertWorkbookToPNG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfo)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>Task of FileInfo</returns>
        public async System.Threading.Tasks.Task<FileInfo> PostConvertWorkbookToPNGAsync(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            ApiResponse<FileInfo> localVarResponse = await PostConvertWorkbookToPNGAsyncWithHttpInfo(file, password, checkExcelRestriction);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="password"></param>
        /// <param name="checkExcelRestriction"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostConvertWorkbookToPNGAsyncWithHttpInfo(System.IO.Stream file, string password = null, bool? checkExcelRestriction = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->PostConvertWorkbookToPNG");

            var localVarPath = "/cells/convert/png";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (checkExcelRestriction != null) localVarQueryParams.Add("checkExcelRestriction", Configuration.ApiClient.ParameterToString(checkExcelRestriction)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConvertWorkbookToPNG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileInfo)));
        }

        /// <summary>
        /// Check if storage exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>StorageExist</returns>
        public StorageExist StorageExists(string storageName)
        {
             checkAccessToken();
             ApiResponse<StorageExist> localVarResponse = StorageExistsWithHttpInfo(storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if storage exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>ApiResponse of StorageExist</returns>
        public ApiResponse< StorageExist > StorageExistsWithHttpInfo(string storageName)
        {
            // verify the required parameter 'storageName' is set
            if (storageName == null)
                throw new ApiException(400, "Missing required parameter 'storageName' when calling CellsApi->StorageExists");

            var localVarPath = "/cells/storage/{storageName}/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageName != null) localVarPathParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageExist>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageExist) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageExist)));
        }

        /// <summary>
        /// Check if storage exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>Task of StorageExist</returns>
        public async System.Threading.Tasks.Task<StorageExist> StorageExistsAsync (string storageName)
        {
             ApiResponse<StorageExist> localVarResponse = await StorageExistsAsyncWithHttpInfo(storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if storage exists 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storageName">Storage name</param>
        /// <returns>Task of ApiResponse (StorageExist)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageExist>> StorageExistsAsyncWithHttpInfo (string storageName)
        {
            // verify the required parameter 'storageName' is set
            if (storageName == null)
                throw new ApiException(400, "Missing required parameter 'storageName' when calling CellsApi->StorageExists");

            var localVarPath = "/cells/storage/{storageName}/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storageName != null) localVarPathParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageExist>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageExist) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageExist)));
        }

        /// <summary>
        /// Upload file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>FilesUploadResult</returns>
        public FilesUploadResult UploadFile(string path, System.IO.Stream file, string storageName = null)
        {
             checkAccessToken();
             ApiResponse<FilesUploadResult> localVarResponse = UploadFileWithHttpInfo(path, file, storageName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>ApiResponse of FilesUploadResult</returns>
        public ApiResponse< FilesUploadResult > UploadFileWithHttpInfo(string path, System.IO.Stream file, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->UploadFile");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->UploadFile");

            var localVarPath = "/cells/storage/file/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesUploadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesUploadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesUploadResult)));
        }

        /// <summary>
        /// Upload file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of FilesUploadResult</returns>
        public async System.Threading.Tasks.Task<FilesUploadResult> UploadFileAsync (string path, System.IO.Stream file, string storageName = null)
        {
             ApiResponse<FilesUploadResult> localVarResponse = await UploadFileAsyncWithHttpInfo(path, file, storageName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload file 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             </param>
        /// <param name="file">File to upload</param>
        /// <param name="storageName">Storage name (optional)</param>
        /// <returns>Task of ApiResponse (FilesUploadResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesUploadResult>> UploadFileAsyncWithHttpInfo (string path, System.IO.Stream file, string storageName = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CellsApi->UploadFile");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CellsApi->UploadFile");

            var localVarPath = "/cells/storage/file/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (storageName != null) localVarQueryParams.Add("storageName", Configuration.ApiClient.ParameterToString(storageName)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesUploadResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesUploadResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesUploadResult)));
        }

    }
}
