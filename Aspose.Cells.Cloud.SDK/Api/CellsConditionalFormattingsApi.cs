/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsConditionalFormattingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormatting (string name, string sheetName, int? index, string folder = null, string storage = null);

        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null);
        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null);

        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null);
        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattings (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ConditionalFormattingResponse</returns>
        ConditionalFormattingResponse CellsConditionalFormattingsGetWorksheetConditionalFormatting (string name, string sheetName, int? index, string folder = null, string storage = null);

        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingResponse</returns>
        ApiResponse<ConditionalFormattingResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null);
        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ConditionalFormattingsResponse</returns>
        ConditionalFormattingsResponse CellsConditionalFormattingsGetWorksheetConditionalFormattings (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingsResponse</returns>
        ApiResponse<ConditionalFormattingsResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsPutWorksheetConditionalFormatting (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null);

        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null);
        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsPutWorksheetFormatCondition (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);

        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);
        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsPutWorksheetFormatConditionArea (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null);

        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null);
        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsConditionalFormattingsPutWorksheetFormatConditionCondition (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);

        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storage = null);

        /// <summary>
        /// Remove conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null);
        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null);

        /// <summary>
        /// Remove cell area from conditional formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null);
        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Clear all condition formattings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ConditionalFormattingResponse</returns>
        System.Threading.Tasks.Task<ConditionalFormattingResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storage = null);

        /// <summary>
        /// Get conditional formatting
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null);
        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ConditionalFormattingsResponse</returns>
        System.Threading.Tasks.Task<ConditionalFormattingsResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get conditional formattings 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingsResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsync (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null);

        /// <summary>
        /// Add a condition formatting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null);
        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAsync (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);

        /// <summary>
        /// Add a format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);
        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null);

        /// <summary>
        /// add a cell area for format condition             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null);
        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);

        /// <summary>
        /// Add a condition for format condition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsConditionalFormattingsApi : ICellsConditionalFormattingsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsConditionalFormattingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsConditionalFormattingsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsConditionalFormattingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsConditionalFormattingsApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsConditionalFormattingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsConditionalFormattingsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsConditionalFormattingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsConditionalFormattingsApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormatting (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo(name, sheetName, index, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove cell area from conditional formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="startRow"></param>
        /// <param name="startColumn"></param>
        /// <param name="totalRows"></param>
        /// <param name="totalColumns"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsyncWithHttpInfo (string name, string sheetName, int? startRow, int? startColumn, int? totalRows, int? totalColumns, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startRow' is set
            if (startRow == null)
                throw new ApiException(400, "Missing required parameter 'startRow' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'startColumn' is set
            if (startColumn == null)
                throw new ApiException(400, "Missing required parameter 'startColumn' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalRows' is set
            if (totalRows == null)
                throw new ApiException(400, "Missing required parameter 'totalRows' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");
            // verify the required parameter 'totalColumns' is set
            if (totalColumns == null)
                throw new ApiException(400, "Missing required parameter 'totalColumns' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (startColumn != null) localVarQueryParams.Add("startColumn", Configuration.ApiClient.ParameterToString(startColumn)); // query parameter
            if (totalRows != null) localVarQueryParams.Add("totalRows", Configuration.ApiClient.ParameterToString(totalRows)); // query parameter
            if (totalColumns != null) localVarQueryParams.Add("totalColumns", Configuration.ApiClient.ParameterToString(totalColumns)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsDeleteWorksheetConditionalFormattings (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear all condition formattings 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsDeleteWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsDeleteWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ConditionalFormattingResponse</returns>
        public ConditionalFormattingResponse CellsConditionalFormattingsGetWorksheetConditionalFormatting (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
             ApiResponse<ConditionalFormattingResponse> localVarResponse = CellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingResponse</returns>
        public ApiResponse< ConditionalFormattingResponse > CellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingResponse)));
        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ConditionalFormattingResponse</returns>
        public async System.Threading.Tasks.Task<ConditionalFormattingResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsync (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
             ApiResponse<ConditionalFormattingResponse> localVarResponse = await CellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo(name, sheetName, index, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get conditional formatting 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, int? index, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingResponse)));
        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ConditionalFormattingsResponse</returns>
        public ConditionalFormattingsResponse CellsConditionalFormattingsGetWorksheetConditionalFormattings (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<ConditionalFormattingsResponse> localVarResponse = CellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of ConditionalFormattingsResponse</returns>
        public ApiResponse< ConditionalFormattingsResponse > CellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingsResponse)));
        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ConditionalFormattingsResponse</returns>
        public async System.Threading.Tasks.Task<ConditionalFormattingsResponse> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<ConditionalFormattingsResponse> localVarResponse = await CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get conditional formattings  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalFormattingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConditionalFormattingsResponse>> CellsConditionalFormattingsGetWorksheetConditionalFormattingsAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsGetWorksheetConditionalFormattings");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsGetWorksheetConditionalFormattings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConditionalFormattingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConditionalFormattingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConditionalFormattingsResponse)));
        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsPutWorksheetConditionalFormatting (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(name, sheetName, cellArea, formatcondition, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (formatcondition != null && formatcondition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formatcondition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formatcondition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsync (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo(name, sheetName, cellArea, formatcondition, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a condition formatting. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="cellArea"></param>
        /// <param name="formatcondition"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetConditionalFormattingAsyncWithHttpInfo (string name, string sheetName, string cellArea, FormatCondition formatcondition = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetConditionalFormatting");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (formatcondition != null && formatcondition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formatcondition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formatcondition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetConditionalFormatting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsPutWorksheetFormatCondition (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAsync (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsPutWorksheetFormatConditionArea (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(name, sheetName, index, cellArea, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo(name, sheetName, index, cellArea, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// add a cell area for format condition              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="cellArea"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionAreaAsyncWithHttpInfo (string name, string sheetName, int? index, string cellArea, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");
            // verify the required parameter 'cellArea' is set
            if (cellArea == null)
                throw new ApiException(400, "Missing required parameter 'cellArea' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (cellArea != null) localVarQueryParams.Add("cellArea", Configuration.ApiClient.ParameterToString(cellArea)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsConditionalFormattingsPutWorksheetFormatConditionCondition (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(name, sheetName, index, type, operatorType, formula1, formula2, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo(name, sheetName, index, type, operatorType, formula1, formula2, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a condition for format condition. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="operatorType"></param>
        /// <param name="formula1"></param>
        /// <param name="formula2"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsConditionalFormattingsPutWorksheetFormatConditionConditionAsyncWithHttpInfo (string name, string sheetName, int? index, string type, string operatorType, string formula1, string formula2, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'operatorType' is set
            if (operatorType == null)
                throw new ApiException(400, "Missing required parameter 'operatorType' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula1' is set
            if (formula1 == null)
                throw new ApiException(400, "Missing required parameter 'formula1' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");
            // verify the required parameter 'formula2' is set
            if (formula2 == null)
                throw new ApiException(400, "Missing required parameter 'formula2' when calling CellsConditionalFormattingsApi->CellsConditionalFormattingsPutWorksheetFormatConditionCondition");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (operatorType != null) localVarQueryParams.Add("operatorType", Configuration.ApiClient.ParameterToString(operatorType)); // query parameter
            if (formula1 != null) localVarQueryParams.Add("formula1", Configuration.ApiClient.ParameterToString(formula1)); // query parameter
            if (formula2 != null) localVarQueryParams.Add("formula2", Configuration.ApiClient.ParameterToString(formula2)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsConditionalFormattingsPutWorksheetFormatConditionCondition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
