/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsChartAreaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ChartAreaResponse</returns>
        ChartAreaResponse CellsChartAreaGetChartArea (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of ChartAreaResponse</returns>
        ApiResponse<ChartAreaResponse> CellsChartAreaGetChartAreaWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>LineResponse</returns>
        LineResponse CellsChartAreaGetChartAreaBorder (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of LineResponse</returns>
        ApiResponse<LineResponse> CellsChartAreaGetChartAreaBorderWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>FillFormatResponse</returns>
        FillFormatResponse CellsChartAreaGetChartAreaFillFormat (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of FillFormatResponse</returns>
        ApiResponse<FillFormatResponse> CellsChartAreaGetChartAreaFillFormatWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ChartAreaResponse</returns>
        System.Threading.Tasks.Task<ChartAreaResponse> CellsChartAreaGetChartAreaAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart area info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartAreaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChartAreaResponse>> CellsChartAreaGetChartAreaAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of LineResponse</returns>
        System.Threading.Tasks.Task<LineResponse> CellsChartAreaGetChartAreaBorderAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart area border info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineResponse>> CellsChartAreaGetChartAreaBorderAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of FillFormatResponse</returns>
        System.Threading.Tasks.Task<FillFormatResponse> CellsChartAreaGetChartAreaFillFormatAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart area fill format info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (FillFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FillFormatResponse>> CellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsChartAreaApi : ICellsChartAreaApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsChartAreaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsChartAreaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsChartAreaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsChartAreaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ChartAreaResponse</returns>
        public ChartAreaResponse CellsChartAreaGetChartArea (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<ChartAreaResponse> localVarResponse = CellsChartAreaGetChartAreaWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of ChartAreaResponse</returns>
        public ApiResponse< ChartAreaResponse > CellsChartAreaGetChartAreaWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartAreaApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartAreaApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartAreaApi->CellsChartAreaGetChartArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartAreaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartAreaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartAreaResponse)));
        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ChartAreaResponse</returns>
        public async System.Threading.Tasks.Task<ChartAreaResponse> CellsChartAreaGetChartAreaAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<ChartAreaResponse> localVarResponse = await CellsChartAreaGetChartAreaAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartAreaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChartAreaResponse>> CellsChartAreaGetChartAreaAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartAreaApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartAreaApi->CellsChartAreaGetChartArea");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartAreaApi->CellsChartAreaGetChartArea");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartAreaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartAreaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartAreaResponse)));
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>LineResponse</returns>
        public LineResponse CellsChartAreaGetChartAreaBorder (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<LineResponse> localVarResponse = CellsChartAreaGetChartAreaBorderWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of LineResponse</returns>
        public ApiResponse< LineResponse > CellsChartAreaGetChartAreaBorderWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineResponse)));
        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of LineResponse</returns>
        public async System.Threading.Tasks.Task<LineResponse> CellsChartAreaGetChartAreaBorderAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<LineResponse> localVarResponse = await CellsChartAreaGetChartAreaBorderAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area border info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (LineResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineResponse>> CellsChartAreaGetChartAreaBorderAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaBorder");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineResponse)));
        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>FillFormatResponse</returns>
        public FillFormatResponse CellsChartAreaGetChartAreaFillFormat (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<FillFormatResponse> localVarResponse = CellsChartAreaGetChartAreaFillFormatWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of FillFormatResponse</returns>
        public ApiResponse< FillFormatResponse > CellsChartAreaGetChartAreaFillFormatWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaFillFormat");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaFillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FillFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FillFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FillFormatResponse)));
        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of FillFormatResponse</returns>
        public async System.Threading.Tasks.Task<FillFormatResponse> CellsChartAreaGetChartAreaFillFormatAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<FillFormatResponse> localVarResponse = await CellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart area fill format info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (FillFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FillFormatResponse>> CellsChartAreaGetChartAreaFillFormatAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaFillFormat");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartAreaApi->CellsChartAreaGetChartAreaFillFormat");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartAreaGetChartAreaFillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FillFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FillFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FillFormatResponse)));
        }

    }
}
