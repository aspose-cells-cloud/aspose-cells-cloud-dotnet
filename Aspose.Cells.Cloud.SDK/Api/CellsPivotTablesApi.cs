/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsPivotTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesDeletePivotTableField (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null);

        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesDeletePivotTableFieldWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null);
        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTable (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);

        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);
        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTableFilter (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTableFilters (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTables (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotFieldResponse</returns>
        PivotFieldResponse CellsPivotTablesGetPivotTableField (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null);

        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFieldResponse</returns>
        ApiResponse<PivotFieldResponse> CellsPivotTablesGetPivotTableFieldWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null);
        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotTableResponse</returns>
        PivotTableResponse CellsPivotTablesGetWorksheetPivotTable (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null);

        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTableResponse</returns>
        ApiResponse<PivotTableResponse> CellsPivotTablesGetWorksheetPivotTableWithHttpInfo (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotFilterResponse</returns>
        PivotFilterResponse CellsPivotTablesGetWorksheetPivotTableFilter (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFilterResponse</returns>
        ApiResponse<PivotFilterResponse> CellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotFiltersResponse</returns>
        PivotFiltersResponse CellsPivotTablesGetWorksheetPivotTableFilters (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFiltersResponse</returns>
        ApiResponse<PivotFiltersResponse> CellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);
        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotTablesResponse</returns>
        PivotTablesResponse CellsPivotTablesGetWorksheetPivotTables (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTablesResponse</returns>
        ApiResponse<PivotTablesResponse> CellsPivotTablesGetWorksheetPivotTablesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPostPivotTableCellStyle (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPostPivotTableCellStyleWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPostPivotTableFieldHideItem (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPostPivotTableFieldMoveTo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null);
        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPostPivotTableStyle (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPostPivotTableStyleWithHttpInfo (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPostWorksheetPivotTableCalculate (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);

        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPostWorksheetPivotTableMove (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null);
        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPutPivotTableField (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPutPivotTableFieldWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>PivotTableResponse</returns>
        PivotTableResponse CellsPivotTablesPutWorksheetPivotTable (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);

        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>ApiResponse of PivotTableResponse</returns>
        ApiResponse<PivotTableResponse> CellsPivotTablesPutWorksheetPivotTableWithHttpInfo (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);
        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPivotTablesPutWorksheetPivotTableFilter (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeletePivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null);

        /// <summary>
        /// Delete pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null);
        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);

        /// <summary>
        /// Delete worksheet pivot table by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);
        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// delete  pivot filter for piovt table             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// delete all pivot filters for piovt table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Delete worksheet pivot tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotFieldResponse</returns>
        System.Threading.Tasks.Task<PivotFieldResponse> CellsPivotTablesGetPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null);

        /// <summary>
        /// Get pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotFieldResponse>> CellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null);
        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotTableResponse</returns>
        System.Threading.Tasks.Task<PivotTableResponse> CellsPivotTablesGetWorksheetPivotTableAsync (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null);

        /// <summary>
        /// Get worksheet pivottable info by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotTableResponse>> CellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotFilterResponse</returns>
        System.Threading.Tasks.Task<PivotFilterResponse> CellsPivotTablesGetWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotFilterResponse>> CellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotFiltersResponse</returns>
        System.Threading.Tasks.Task<PivotFiltersResponse> CellsPivotTablesGetWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFiltersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotFiltersResponse>> CellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);
        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotTablesResponse</returns>
        System.Threading.Tasks.Task<PivotTablesResponse> CellsPivotTablesGetWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storage = null);

        /// <summary>
        /// Get worksheet pivottables info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTablesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotTablesResponse>> CellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null);
        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableCellStyleAsync (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Update cell style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableFieldHideItemAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableFieldMoveToAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null);
        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableStyleAsync (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Update style for pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostWorksheetPivotTableCalculateAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);

        /// <summary>
        /// Calculates pivottable&#39;s data to cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostWorksheetPivotTableMoveAsync (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null);
        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPutPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Add pivot field into into pivot table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null);
        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>Task of PivotTableResponse</returns>
        System.Threading.Tasks.Task<PivotTableResponse> CellsPivotTablesPutWorksheetPivotTableAsync (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);

        /// <summary>
        /// Add a pivot table into worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PivotTableResponse>> CellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null);
        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPutWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null);

        /// <summary>
        /// Add pivot filter for piovt table index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsPivotTablesApi : ICellsPivotTablesApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPivotTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPivotTablesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsPivotTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPivotTablesApi(String basePath, String accesstoken)
        {
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + accesstoken);
            this.Configuration = new Configuration(new ApiClient(basePath),headerParameters);

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPivotTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPivotTablesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="CellsPivotTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPivotTablesApi(String grantType,String appSID,String appKey)
        {
            OAuthApi oauth2 = new OAuthApi("https://api.aspose.cloud");
            var oauth2response = oauth2.OAuthPost(grantType, appSID, appKey);
            Dictionary<string, string> headerParameters = new Dictionary<string, string>();
            headerParameters.Add("Authorization", "Bearer " + oauth2response.AccessToken);
            this.Configuration =  new Configuration(new ApiClient(), headerParameters);
            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesDeletePivotTableField (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesDeletePivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesDeletePivotTableFieldWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeletePivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeletePivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeletePivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesDeletePivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeletePivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTable (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet pivot table by index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTable");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTableFilter (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarPathParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete  pivot filter for piovt table              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarPathParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTableFilters (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo(name, sheetName, pivotTableIndex, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete all pivot filters for piovt table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesDeleteWorksheetPivotTables (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesDeleteWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet pivot tables 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesDeleteWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesDeleteWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesDeleteWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotFieldResponse</returns>
        public PivotFieldResponse CellsPivotTablesGetPivotTableField (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null)
        {
             ApiResponse<PivotFieldResponse> localVarResponse = CellsPivotTablesGetPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFieldResponse</returns>
        public ApiResponse< PivotFieldResponse > CellsPivotTablesGetPivotTableFieldWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldIndex' is set
            if (pivotFieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldIndex != null) localVarQueryParams.Add("pivotFieldIndex", Configuration.ApiClient.ParameterToString(pivotFieldIndex)); // query parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFieldResponse)));
        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotFieldResponse</returns>
        public async System.Threading.Tasks.Task<PivotFieldResponse> CellsPivotTablesGetPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null)
        {
             ApiResponse<PivotFieldResponse> localVarResponse = await CellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldIndex">The field index in the base fields.</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotFieldResponse>> CellsPivotTablesGetPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? pivotFieldIndex, string pivotFieldType, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldIndex' is set
            if (pivotFieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesGetPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldIndex != null) localVarQueryParams.Add("pivotFieldIndex", Configuration.ApiClient.ParameterToString(pivotFieldIndex)); // query parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFieldResponse)));
        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotTableResponse</returns>
        public PivotTableResponse CellsPivotTablesGetWorksheetPivotTable (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null)
        {
             ApiResponse<PivotTableResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTableWithHttpInfo(name, sheetName, pivottableIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTableResponse</returns>
        public ApiResponse< PivotTableResponse > CellsPivotTablesGetWorksheetPivotTableWithHttpInfo (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'pivottableIndex' is set
            if (pivottableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivottableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivottableIndex != null) localVarPathParams.Add("pivottableIndex", Configuration.ApiClient.ParameterToString(pivottableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTableResponse)));
        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotTableResponse</returns>
        public async System.Threading.Tasks.Task<PivotTableResponse> CellsPivotTablesGetWorksheetPivotTableAsync (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null)
        {
             ApiResponse<PivotTableResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo(name, sheetName, pivottableIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet pivottable info by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivottableIndex"></param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotTableResponse>> CellsPivotTablesGetWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, int? pivottableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTable");
            // verify the required parameter 'pivottableIndex' is set
            if (pivottableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivottableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivottableIndex != null) localVarPathParams.Add("pivottableIndex", Configuration.ApiClient.ParameterToString(pivottableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTableResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotFilterResponse</returns>
        public PivotFilterResponse CellsPivotTablesGetWorksheetPivotTableFilter (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null)
        {
             ApiResponse<PivotFilterResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filterIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFilterResponse</returns>
        public ApiResponse< PivotFilterResponse > CellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'filterIndex' is set
            if (filterIndex == null)
                throw new ApiException(400, "Missing required parameter 'filterIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (filterIndex != null) localVarPathParams.Add("filterIndex", Configuration.ApiClient.ParameterToString(filterIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFilterResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotFilterResponse</returns>
        public async System.Threading.Tasks.Task<PivotFilterResponse> CellsPivotTablesGetWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null)
        {
             ApiResponse<PivotFilterResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo(name, sheetName, pivotTableIndex, filterIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filterIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFilterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotFilterResponse>> CellsPivotTablesGetWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? filterIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");
            // verify the required parameter 'filterIndex' is set
            if (filterIndex == null)
                throw new ApiException(400, "Missing required parameter 'filterIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (filterIndex != null) localVarPathParams.Add("filterIndex", Configuration.ApiClient.ParameterToString(filterIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFilterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFilterResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotFiltersResponse</returns>
        public PivotFiltersResponse CellsPivotTablesGetWorksheetPivotTableFilters (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
             ApiResponse<PivotFiltersResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotFiltersResponse</returns>
        public ApiResponse< PivotFiltersResponse > CellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFiltersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFiltersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFiltersResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotFiltersResponse</returns>
        public async System.Threading.Tasks.Task<PivotFiltersResponse> CellsPivotTablesGetWorksheetPivotTableFiltersAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
             ApiResponse<PivotFiltersResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotFiltersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotFiltersResponse>> CellsPivotTablesGetWorksheetPivotTableFiltersAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilters");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTableFilters");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTableFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotFiltersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotFiltersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotFiltersResponse)));
        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>PivotTablesResponse</returns>
        public PivotTablesResponse CellsPivotTablesGetWorksheetPivotTables (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<PivotTablesResponse> localVarResponse = CellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of PivotTablesResponse</returns>
        public ApiResponse< PivotTablesResponse > CellsPivotTablesGetWorksheetPivotTablesWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTablesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTablesResponse)));
        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of PivotTablesResponse</returns>
        public async System.Threading.Tasks.Task<PivotTablesResponse> CellsPivotTablesGetWorksheetPivotTablesAsync (string name, string sheetName, string folder = null, string storage = null)
        {
             ApiResponse<PivotTablesResponse> localVarResponse = await CellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo(name, sheetName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet pivottables info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTablesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotTablesResponse>> CellsPivotTablesGetWorksheetPivotTablesAsyncWithHttpInfo (string name, string sheetName, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTables");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesGetWorksheetPivotTables");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesGetWorksheetPivotTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTablesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTablesResponse)));
        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPostPivotTableCellStyle (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPostPivotTableCellStyleWithHttpInfo(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPostPivotTableCellStyleWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableCellStyleAsync (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cell style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="column"></param>
        /// <param name="row"></param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableCellStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? column, int? row, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableCellStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableCellStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPostPivotTableFieldHideItem (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'itemIndex' is set
            if (itemIndex == null)
                throw new ApiException(400, "Missing required parameter 'itemIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'isHide' is set
            if (isHide == null)
                throw new ApiException(400, "Missing required parameter 'isHide' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (itemIndex != null) localVarQueryParams.Add("itemIndex", Configuration.ApiClient.ParameterToString(itemIndex)); // query parameter
            if (isHide != null) localVarQueryParams.Add("isHide", Configuration.ApiClient.ParameterToString(isHide)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldHideItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableFieldHideItemAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="pivotFieldType"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="itemIndex"></param>
        /// <param name="isHide"></param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableFieldHideItemAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, int? fieldIndex, int? itemIndex, bool? isHide, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'itemIndex' is set
            if (itemIndex == null)
                throw new ApiException(400, "Missing required parameter 'itemIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");
            // verify the required parameter 'isHide' is set
            if (isHide == null)
                throw new ApiException(400, "Missing required parameter 'isHide' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldHideItem");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (itemIndex != null) localVarQueryParams.Add("itemIndex", Configuration.ApiClient.ParameterToString(itemIndex)); // query parameter
            if (isHide != null) localVarQueryParams.Add("isHide", Configuration.ApiClient.ParameterToString(isHide)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldHideItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPostPivotTableFieldMoveTo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableFieldMoveToAsync (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="fieldIndex"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableFieldMoveToAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? fieldIndex, string from, string to, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'fieldIndex' is set
            if (fieldIndex == null)
                throw new ApiException(400, "Missing required parameter 'fieldIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableFieldMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (fieldIndex != null) localVarQueryParams.Add("fieldIndex", Configuration.ApiClient.ParameterToString(fieldIndex)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableFieldMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPostPivotTableStyle (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPostPivotTableStyleWithHttpInfo(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPostPivotTableStyleWithHttpInfo (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostPivotTableStyleAsync (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update style for pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="style">Style dto in request body. (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostPivotTableStyleAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, Style style = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableStyle");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostPivotTableStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (style != null && style.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(style); // http body (model) parameter
            }
            else
            {
                localVarPostBody = style; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostPivotTableStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPostWorksheetPivotTableCalculate (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostWorksheetPivotTableCalculateAsync (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculates pivottable&#39;s data to cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostWorksheetPivotTableCalculateAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableCalculate");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableCalculate");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableCalculate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPostWorksheetPivotTableMove (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableMove");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPostWorksheetPivotTableMoveAsync (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="row"> (optional)</param>
        /// <param name="column"> (optional)</param>
        /// <param name="destCellName"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPostWorksheetPivotTableMoveAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, int? row = null, int? column = null, string destCellName = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableMove");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPostWorksheetPivotTableMove");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPostWorksheetPivotTableMove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPutPivotTableField (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPutPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPutPivotTableFieldWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPutPivotTableFieldAsync (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add pivot field into into pivot table 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="pivotTableIndex">Pivot table index</param>
        /// <param name="pivotFieldType">The fields area type.</param>
        /// <param name="request">Dto that conrains field indexes (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPutPivotTableFieldAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, string pivotFieldType, PivotTableFieldRequest request = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");
            // verify the required parameter 'pivotFieldType' is set
            if (pivotFieldType == null)
                throw new ApiException(400, "Missing required parameter 'pivotFieldType' when calling CellsPivotTablesApi->CellsPivotTablesPutPivotTableField");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (pivotFieldType != null) localVarQueryParams.Add("pivotFieldType", Configuration.ApiClient.ParameterToString(pivotFieldType)); // query parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutPivotTableField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>PivotTableResponse</returns>
        public PivotTableResponse CellsPivotTablesPutWorksheetPivotTable (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
             ApiResponse<PivotTableResponse> localVarResponse = CellsPivotTablesPutWorksheetPivotTableWithHttpInfo(name, sheetName, request, folder, storage, sourceData, destCellName, tableName, useSameSource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>ApiResponse of PivotTableResponse</returns>
        public ApiResponse< PivotTableResponse > CellsPivotTablesPutWorksheetPivotTableWithHttpInfo (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (sourceData != null) localVarQueryParams.Add("sourceData", Configuration.ApiClient.ParameterToString(sourceData)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (tableName != null) localVarQueryParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // query parameter
            if (useSameSource != null) localVarQueryParams.Add("useSameSource", Configuration.ApiClient.ParameterToString(useSameSource)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTableResponse)));
        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>Task of PivotTableResponse</returns>
        public async System.Threading.Tasks.Task<PivotTableResponse> CellsPivotTablesPutWorksheetPivotTableAsync (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
             ApiResponse<PivotTableResponse> localVarResponse = await CellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo(name, sheetName, request, folder, storage, sourceData, destCellName, tableName, useSameSource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a pivot table into worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="request">CreatePivotTableRequest dto in request body. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <param name="sourceData">The data for the new PivotTable cache. (optional)</param>
        /// <param name="destCellName">The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)</param>
        /// <param name="tableName">The name of the new PivotTable report. (optional)</param>
        /// <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)</param>
        /// <returns>Task of ApiResponse (PivotTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PivotTableResponse>> CellsPivotTablesPutWorksheetPivotTableAsyncWithHttpInfo (string name, string sheetName, CreatePivotTableRequest request = null, string folder = null, string storage = null, string sourceData = null, string destCellName = null, string tableName = null, bool? useSameSource = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTable");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTable");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (sourceData != null) localVarQueryParams.Add("sourceData", Configuration.ApiClient.ParameterToString(sourceData)); // query parameter
            if (destCellName != null) localVarQueryParams.Add("destCellName", Configuration.ApiClient.ParameterToString(destCellName)); // query parameter
            if (tableName != null) localVarQueryParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // query parameter
            if (useSameSource != null) localVarQueryParams.Add("useSameSource", Configuration.ApiClient.ParameterToString(useSameSource)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PivotTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PivotTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PivotTableResponse)));
        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPivotTablesPutWorksheetPivotTableFilter (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPivotTablesPutWorksheetPivotTableFilterAsync (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add pivot filter for piovt table index 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pivotTableIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="needReCalculate"> (optional, default to false)</param>
        /// <param name="folder"> (optional)</param>
        /// <param name="storage">storage name. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPivotTablesPutWorksheetPivotTableFilterAsyncWithHttpInfo (string name, string sheetName, int? pivotTableIndex, PivotFilter filter = null, bool? needReCalculate = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTableFilter");
            // verify the required parameter 'pivotTableIndex' is set
            if (pivotTableIndex == null)
                throw new ApiException(400, "Missing required parameter 'pivotTableIndex' when calling CellsPivotTablesApi->CellsPivotTablesPutWorksheetPivotTableFilter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (pivotTableIndex != null) localVarPathParams.Add("pivotTableIndex", Configuration.ApiClient.ParameterToString(pivotTableIndex)); // path parameter
            if (needReCalculate != null) localVarQueryParams.Add("needReCalculate", Configuration.ApiClient.ParameterToString(needReCalculate)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (filter != null && filter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(filter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPivotTablesPutWorksheetPivotTableFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
