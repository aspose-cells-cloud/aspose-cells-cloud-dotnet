/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsChartsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsChartsDeleteWorksheetChartLegend (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsChartsDeleteWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsChartsDeleteWorksheetChartTitle (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsChartsDeleteWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsChartsDeleteWorksheetClearCharts (string name, string sheetName, string folder = null);

        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsChartsDeleteWorksheetClearChartsWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ChartsResponse</returns>
        ChartsResponse CellsChartsDeleteWorksheetDeleteChart (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        ApiResponse<ChartsResponse> CellsChartsDeleteWorksheetDeleteChartWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsChartsGetWorksheetChart (string name, string sheetName, int? chartNumber, string format = null, string folder = null);

        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsChartsGetWorksheetChartWithHttpInfo (string name, string sheetName, int? chartNumber, string format = null, string folder = null);
        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>LegendResponse</returns>
        LegendResponse CellsChartsGetWorksheetChartLegend (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of LegendResponse</returns>
        ApiResponse<LegendResponse> CellsChartsGetWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TitleResponse</returns>
        TitleResponse CellsChartsGetWorksheetChartTitle (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        ApiResponse<TitleResponse> CellsChartsGetWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ChartsResponse</returns>
        ChartsResponse CellsChartsGetWorksheetCharts (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        ApiResponse<ChartsResponse> CellsChartsGetWorksheetChartsWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsChartsPostWorksheetChart (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null);

        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsChartsPostWorksheetChartWithHttpInfo (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null);
        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>LegendResponse</returns>
        LegendResponse CellsChartsPostWorksheetChartLegend (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null);

        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of LegendResponse</returns>
        ApiResponse<LegendResponse> CellsChartsPostWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null);
        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TitleResponse</returns>
        TitleResponse CellsChartsPostWorksheetChartTitle (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);

        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        ApiResponse<TitleResponse> CellsChartsPostWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);
        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ChartsResponse</returns>
        ChartsResponse CellsChartsPutWorksheetAddChart (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null);

        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        ApiResponse<ChartsResponse> CellsChartsPutWorksheetAddChartWithHttpInfo (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null);
        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsChartsPutWorksheetChartLegend (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsChartsPutWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TitleResponse</returns>
        TitleResponse CellsChartsPutWorksheetChartTitle (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);

        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        ApiResponse<TitleResponse> CellsChartsPutWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsDeleteWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Hide legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsDeleteWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Hide title in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsDeleteWorksheetClearChartsAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Clear the charts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        System.Threading.Tasks.Task<ChartsResponse> CellsChartsDeleteWorksheetDeleteChartAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Delete worksheet chart by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsChartsGetWorksheetChartAsync (string name, string sheetName, int? chartNumber, string format = null, string folder = null);

        /// <summary>
        /// Get chart info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsChartsGetWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartNumber, string format = null, string folder = null);
        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of LegendResponse</returns>
        System.Threading.Tasks.Task<LegendResponse> CellsChartsGetWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (LegendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegendResponse>> CellsChartsGetWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        System.Threading.Tasks.Task<TitleResponse> CellsChartsGetWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Get chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsGetWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        System.Threading.Tasks.Task<ChartsResponse> CellsChartsGetWorksheetChartsAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get worksheet charts info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsGetWorksheetChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsPostWorksheetChartAsync (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null);

        /// <summary>
        /// Update chart propreties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsPostWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null);
        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of LegendResponse</returns>
        System.Threading.Tasks.Task<LegendResponse> CellsChartsPostWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null);

        /// <summary>
        /// Update chart legend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (LegendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegendResponse>> CellsChartsPostWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null);
        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        System.Threading.Tasks.Task<TitleResponse> CellsChartsPostWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);

        /// <summary>
        /// Update chart title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsPostWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);
        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        System.Threading.Tasks.Task<ChartsResponse> CellsChartsPutWorksheetAddChartAsync (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null);

        /// <summary>
        /// Add new chart to worksheet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsPutWorksheetAddChartAsyncWithHttpInfo (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null);
        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsPutWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null);

        /// <summary>
        /// Show legend in chart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsPutWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null);
        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        System.Threading.Tasks.Task<TitleResponse> CellsChartsPutWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);

        /// <summary>
        /// Add chart title / Set chart title visible
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsPutWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsChartsApi : ICellsChartsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsChartsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsChartsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsChartsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsChartsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsChartsDeleteWorksheetChartLegend (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsChartsDeleteWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsChartsDeleteWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsDeleteWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsDeleteWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsChartsDeleteWorksheetChartTitle (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsChartsDeleteWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsChartsDeleteWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsDeleteWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide title in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsDeleteWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsDeleteWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsChartsDeleteWorksheetClearCharts (string name, string sheetName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsChartsDeleteWorksheetClearChartsWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsChartsDeleteWorksheetClearChartsWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetClearCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetClearCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetClearCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsDeleteWorksheetClearChartsAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear the charts. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsDeleteWorksheetClearChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetClearCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetClearCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetClearCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ChartsResponse</returns>
        public ChartsResponse CellsChartsDeleteWorksheetDeleteChart (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = CellsChartsDeleteWorksheetDeleteChartWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        public ApiResponse< ChartsResponse > CellsChartsDeleteWorksheetDeleteChartWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsDeleteWorksheetDeleteChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetDeleteChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        public async System.Threading.Tasks.Task<ChartsResponse> CellsChartsDeleteWorksheetDeleteChartAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = await CellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet chart by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsDeleteWorksheetDeleteChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsDeleteWorksheetDeleteChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsDeleteWorksheetDeleteChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsDeleteWorksheetDeleteChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsChartsGetWorksheetChart (string name, string sheetName, int? chartNumber, string format = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsChartsGetWorksheetChartWithHttpInfo(name, sheetName, chartNumber, format, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsChartsGetWorksheetChartWithHttpInfo (string name, string sheetName, int? chartNumber, string format = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'chartNumber' is set
            if (chartNumber == null)
                throw new ApiException(400, "Missing required parameter 'chartNumber' when calling CellsChartsApi->CellsChartsGetWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartNumber != null) localVarPathParams.Add("chartNumber", Configuration.ApiClient.ParameterToString(chartNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsChartsGetWorksheetChartAsync (string name, string sheetName, int? chartNumber, string format = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsChartsGetWorksheetChartAsyncWithHttpInfo(name, sheetName, chartNumber, format, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartNumber">The chart number.</param>
        /// <param name="format">The exported file format. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsChartsGetWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartNumber, string format = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetChart");
            // verify the required parameter 'chartNumber' is set
            if (chartNumber == null)
                throw new ApiException(400, "Missing required parameter 'chartNumber' when calling CellsChartsApi->CellsChartsGetWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartNumber != null) localVarPathParams.Add("chartNumber", Configuration.ApiClient.ParameterToString(chartNumber)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>LegendResponse</returns>
        public LegendResponse CellsChartsGetWorksheetChartLegend (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<LegendResponse> localVarResponse = CellsChartsGetWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of LegendResponse</returns>
        public ApiResponse< LegendResponse > CellsChartsGetWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsGetWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegendResponse)));
        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of LegendResponse</returns>
        public async System.Threading.Tasks.Task<LegendResponse> CellsChartsGetWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<LegendResponse> localVarResponse = await CellsChartsGetWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (LegendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegendResponse>> CellsChartsGetWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsGetWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegendResponse)));
        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TitleResponse</returns>
        public TitleResponse CellsChartsGetWorksheetChartTitle (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<TitleResponse> localVarResponse = CellsChartsGetWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        public ApiResponse< TitleResponse > CellsChartsGetWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsGetWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        public async System.Threading.Tasks.Task<TitleResponse> CellsChartsGetWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<TitleResponse> localVarResponse = await CellsChartsGetWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsGetWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsGetWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ChartsResponse</returns>
        public ChartsResponse CellsChartsGetWorksheetCharts (string name, string sheetName, string folder = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = CellsChartsGetWorksheetChartsWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        public ApiResponse< ChartsResponse > CellsChartsGetWorksheetChartsWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        public async System.Threading.Tasks.Task<ChartsResponse> CellsChartsGetWorksheetChartsAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = await CellsChartsGetWorksheetChartsAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet charts info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsGetWorksheetChartsAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsGetWorksheetCharts");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsGetWorksheetCharts");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsGetWorksheetCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsChartsPostWorksheetChart (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsChartsPostWorksheetChartWithHttpInfo(name, sheetName, chartIndex, chart, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsChartsPostWorksheetChartWithHttpInfo (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPostWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (chart != null && chart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chart; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsPostWorksheetChartAsync (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsChartsPostWorksheetChartAsyncWithHttpInfo(name, sheetName, chartIndex, chart, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update chart propreties 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="chartIndex"></param>
        /// <param name="chart"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsPostWorksheetChartAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Chart chart = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPostWorksheetChart");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPostWorksheetChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (chart != null && chart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chart; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>LegendResponse</returns>
        public LegendResponse CellsChartsPostWorksheetChartLegend (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null)
        {
             ApiResponse<LegendResponse> localVarResponse = CellsChartsPostWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, legend, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of LegendResponse</returns>
        public ApiResponse< LegendResponse > CellsChartsPostWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPostWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (legend != null && legend.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legend; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegendResponse)));
        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of LegendResponse</returns>
        public async System.Threading.Tasks.Task<LegendResponse> CellsChartsPostWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null)
        {
             ApiResponse<LegendResponse> localVarResponse = await CellsChartsPostWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, legend, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update chart legend 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="legend"> (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (LegendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegendResponse>> CellsChartsPostWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Legend legend = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPostWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPostWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (legend != null && legend.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legend; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegendResponse)));
        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TitleResponse</returns>
        public TitleResponse CellsChartsPostWorksheetChartTitle (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
             ApiResponse<TitleResponse> localVarResponse = CellsChartsPostWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        public ApiResponse< TitleResponse > CellsChartsPostWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPostWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        public async System.Threading.Tasks.Task<TitleResponse> CellsChartsPostWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
             ApiResponse<TitleResponse> localVarResponse = await CellsChartsPostWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, title, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update chart title 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsPostWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPostWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPostWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPostWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ChartsResponse</returns>
        public ChartsResponse CellsChartsPutWorksheetAddChart (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = CellsChartsPutWorksheetAddChartWithHttpInfo(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of ChartsResponse</returns>
        public ApiResponse< ChartsResponse > CellsChartsPutWorksheetAddChartWithHttpInfo (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'chartType' is set
            if (chartType == null)
                throw new ApiException(400, "Missing required parameter 'chartType' when calling CellsChartsApi->CellsChartsPutWorksheetAddChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartType != null) localVarQueryParams.Add("chartType", Configuration.ApiClient.ParameterToString(chartType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (area != null) localVarQueryParams.Add("area", Configuration.ApiClient.ParameterToString(area)); // query parameter
            if (isVertical != null) localVarQueryParams.Add("isVertical", Configuration.ApiClient.ParameterToString(isVertical)); // query parameter
            if (categoryData != null) localVarQueryParams.Add("categoryData", Configuration.ApiClient.ParameterToString(categoryData)); // query parameter
            if (isAutoGetSerialName != null) localVarQueryParams.Add("isAutoGetSerialName", Configuration.ApiClient.ParameterToString(isAutoGetSerialName)); // query parameter
            if (title != null) localVarQueryParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetAddChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ChartsResponse</returns>
        public async System.Threading.Tasks.Task<ChartsResponse> CellsChartsPutWorksheetAddChartAsync (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null)
        {
             ApiResponse<ChartsResponse> localVarResponse = await CellsChartsPutWorksheetAddChartAsyncWithHttpInfo(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new chart to worksheet. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">The worksheet name.</param>
        /// <param name="chartType">Chart type, please refer property Type in chart resource.</param>
        /// <param name="upperLeftRow">New chart upper left row. (optional, default to 0)</param>
        /// <param name="upperLeftColumn">New chart upperleft column. (optional, default to 0)</param>
        /// <param name="lowerRightRow">New chart lower right row. (optional, default to 0)</param>
        /// <param name="lowerRightColumn">New chart lower right column. (optional, default to 0)</param>
        /// <param name="area">Specifies values from which to plot the data series.  (optional)</param>
        /// <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)</param>
        /// <param name="categoryData">Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)</param>
        /// <param name="isAutoGetSerialName">Specifies whether auto update serial name.  (optional, default to true)</param>
        /// <param name="title">Specifies chart title name. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (ChartsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChartsResponse>> CellsChartsPutWorksheetAddChartAsyncWithHttpInfo (string name, string sheetName, string chartType, int? upperLeftRow = null, int? upperLeftColumn = null, int? lowerRightRow = null, int? lowerRightColumn = null, string area = null, bool? isVertical = null, string categoryData = null, bool? isAutoGetSerialName = null, string title = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPutWorksheetAddChart");
            // verify the required parameter 'chartType' is set
            if (chartType == null)
                throw new ApiException(400, "Missing required parameter 'chartType' when calling CellsChartsApi->CellsChartsPutWorksheetAddChart");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartType != null) localVarQueryParams.Add("chartType", Configuration.ApiClient.ParameterToString(chartType)); // query parameter
            if (upperLeftRow != null) localVarQueryParams.Add("upperLeftRow", Configuration.ApiClient.ParameterToString(upperLeftRow)); // query parameter
            if (upperLeftColumn != null) localVarQueryParams.Add("upperLeftColumn", Configuration.ApiClient.ParameterToString(upperLeftColumn)); // query parameter
            if (lowerRightRow != null) localVarQueryParams.Add("lowerRightRow", Configuration.ApiClient.ParameterToString(lowerRightRow)); // query parameter
            if (lowerRightColumn != null) localVarQueryParams.Add("lowerRightColumn", Configuration.ApiClient.ParameterToString(lowerRightColumn)); // query parameter
            if (area != null) localVarQueryParams.Add("area", Configuration.ApiClient.ParameterToString(area)); // query parameter
            if (isVertical != null) localVarQueryParams.Add("isVertical", Configuration.ApiClient.ParameterToString(isVertical)); // query parameter
            if (categoryData != null) localVarQueryParams.Add("categoryData", Configuration.ApiClient.ParameterToString(categoryData)); // query parameter
            if (isAutoGetSerialName != null) localVarQueryParams.Add("isAutoGetSerialName", Configuration.ApiClient.ParameterToString(isAutoGetSerialName)); // query parameter
            if (title != null) localVarQueryParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetAddChart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChartsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChartsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChartsResponse)));
        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsChartsPutWorksheetChartLegend (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsChartsPutWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsChartsPutWorksheetChartLegendWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPutWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsChartsPutWorksheetChartLegendAsync (string name, string sheetName, int? chartIndex, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsChartsPutWorksheetChartLegendAsyncWithHttpInfo(name, sheetName, chartIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show legend in chart 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsChartsPutWorksheetChartLegendAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPutWorksheetChartLegend");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPutWorksheetChartLegend");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartLegend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TitleResponse</returns>
        public TitleResponse CellsChartsPutWorksheetChartTitle (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
             ApiResponse<TitleResponse> localVarResponse = CellsChartsPutWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TitleResponse</returns>
        public ApiResponse< TitleResponse > CellsChartsPutWorksheetChartTitleWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPutWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TitleResponse</returns>
        public async System.Threading.Tasks.Task<TitleResponse> CellsChartsPutWorksheetChartTitleAsync (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
             ApiResponse<TitleResponse> localVarResponse = await CellsChartsPutWorksheetChartTitleAsyncWithHttpInfo(name, sheetName, chartIndex, title, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add chart title / Set chart title visible 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="chartIndex">The chart index.</param>
        /// <param name="title">Chart title. (optional)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TitleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TitleResponse>> CellsChartsPutWorksheetChartTitleAsyncWithHttpInfo (string name, string sheetName, int? chartIndex, Title title = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsChartsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsChartsApi->CellsChartsPutWorksheetChartTitle");
            // verify the required parameter 'chartIndex' is set
            if (chartIndex == null)
                throw new ApiException(400, "Missing required parameter 'chartIndex' when calling CellsChartsApi->CellsChartsPutWorksheetChartTitle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (chartIndex != null) localVarPathParams.Add("chartIndex", Configuration.ApiClient.ParameterToString(chartIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsChartsPutWorksheetChartTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TitleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TitleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TitleResponse)));
        }

    }
}
