/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsWorkbookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookDeleteDecryptDocument (string name, WorkbookEncryptionRequest encryption = null, string folder = null);

        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookDeleteDecryptDocumentWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null);
        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookDeleteDocumentUnprotectFromChanges (string name, string folder = null);

        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookDeleteUnprotectDocument (string name, WorkbookProtectionRequest protection = null, string folder = null);

        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookDeleteUnprotectDocumentWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookDeleteWorkbookName (string name, string nameName, string folder = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookDeleteWorkbookNameWithHttpInfo (string name, string nameName, string folder = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookDeleteWorkbookNames (string name, string folder = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookDeleteWorkbookNamesWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorkbookGetWorkbook (string name, string password = null, bool? isAutoFit = null, string folder = null);

        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorkbookGetWorkbookWithHttpInfo (string name, string password = null, bool? isAutoFit = null, string folder = null);
        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>StyleResponse</returns>
        StyleResponse CellsWorkbookGetWorkbookDefaultStyle (string name, string folder = null);

        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        ApiResponse<StyleResponse> CellsWorkbookGetWorkbookDefaultStyleWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>NameResponse</returns>
        NameResponse CellsWorkbookGetWorkbookName (string name, string nameName, string folder = null);

        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of NameResponse</returns>
        ApiResponse<NameResponse> CellsWorkbookGetWorkbookNameWithHttpInfo (string name, string nameName, string folder = null);
        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        RangeValueResponse CellsWorkbookGetWorkbookNameValue (string name, string nameName, string folder = null);

        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        ApiResponse<RangeValueResponse> CellsWorkbookGetWorkbookNameValueWithHttpInfo (string name, string nameName, string folder = null);
        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>NamesResponse</returns>
        NamesResponse CellsWorkbookGetWorkbookNames (string name, string folder = null);

        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of NamesResponse</returns>
        ApiResponse<NamesResponse> CellsWorkbookGetWorkbookNamesWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>WorkbookSettingsResponse</returns>
        WorkbookSettingsResponse CellsWorkbookGetWorkbookSettings (string name, string folder = null);

        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookSettingsResponse</returns>
        ApiResponse<WorkbookSettingsResponse> CellsWorkbookGetWorkbookSettingsWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse CellsWorkbookGetWorkbookTextItems (string name, string folder = null);

        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> CellsWorkbookGetWorkbookTextItemsWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPostAutofitWorkbookRows (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null);

        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPostAutofitWorkbookRowsWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null);
        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPostEncryptDocument (string name, WorkbookEncryptionRequest encryption = null, string folder = null);

        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPostEncryptDocumentWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPostImportData (string name, ImportOption importdata, string folder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPostImportDataWithHttpInfo (string name, ImportOption importdata, string folder = null);
        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPostProtectDocument (string name, WorkbookProtectionRequest protection = null, string folder = null);

        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPostProtectDocumentWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null);
        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPostWorkbookCalculateFormula (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null);

        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null);
        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorkbookPostWorkbookGetSmartMarkerResult (string name, string xmlFile = null, string folder = null, string outPath = null);

        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo (string name, string xmlFile = null, string folder = null, string outPath = null);
        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPostWorkbookSettings (string name, WorkbookSettings settings = null, string folder = null);

        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPostWorkbookSettingsWithHttpInfo (string name, WorkbookSettings settings = null, string folder = null);
        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        SplitResultResponse CellsWorkbookPostWorkbookSplit (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null);

        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        ApiResponse<SplitResultResponse> CellsWorkbookPostWorkbookSplitWithHttpInfo (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null);
        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        WorkbookResponse CellsWorkbookPostWorkbooksMerge (string name, string mergeWith, string folder = null);

        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        ApiResponse<WorkbookResponse> CellsWorkbookPostWorkbooksMergeWithHttpInfo (string name, string mergeWith, string folder = null);
        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>WorkbookReplaceResponse</returns>
        WorkbookReplaceResponse CellsWorkbookPostWorkbooksTextReplace (string name, string oldValue, string newValue, string folder = null);

        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookReplaceResponse</returns>
        ApiResponse<WorkbookReplaceResponse> CellsWorkbookPostWorkbooksTextReplaceWithHttpInfo (string name, string oldValue, string newValue, string folder = null);
        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        TextItemsResponse CellsWorkbookPostWorkbooksTextSearch (string name, string text, string folder = null);

        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        ApiResponse<TextItemsResponse> CellsWorkbookPostWorkbooksTextSearchWithHttpInfo (string name, string text, string folder = null);
        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CellsWorkbookPutConvertWorkbook (string format = null, string password = null, string outPath = null);

        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CellsWorkbookPutConvertWorkbookWithHttpInfo (string format = null, string password = null, string outPath = null);
        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsWorkbookPutDocumentProtectFromChanges (string name, PasswordRequest password = null, string folder = null);

        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsWorkbookPutDocumentProtectFromChangesWithHttpInfo (string name, PasswordRequest password = null, string folder = null);
        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        WorkbookResponse CellsWorkbookPutWorkbookCreate (string name, string templateFile = null, string dataFile = null, string folder = null);

        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        ApiResponse<WorkbookResponse> CellsWorkbookPutWorkbookCreateWithHttpInfo (string name, string templateFile = null, string dataFile = null, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteDecryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null);

        /// <summary>
        /// Decrypt document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null);
        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteDocumentUnprotectFromChangesAsync (string name, string folder = null);

        /// <summary>
        /// Unprotect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteUnprotectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null);

        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteWorkbookNameAsync (string name, string nameName, string folder = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null);
        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteWorkbookNamesAsync (string name, string folder = null);

        /// <summary>
        /// Clean workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookGetWorkbookAsync (string name, string password = null, bool? isAutoFit = null, string folder = null);

        /// <summary>
        /// Read workbook info or export.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookGetWorkbookAsyncWithHttpInfo (string name, string password = null, bool? isAutoFit = null, string folder = null);
        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        System.Threading.Tasks.Task<StyleResponse> CellsWorkbookGetWorkbookDefaultStyleAsync (string name, string folder = null);

        /// <summary>
        /// Read workbook default style info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of NameResponse</returns>
        System.Threading.Tasks.Task<NameResponse> CellsWorkbookGetWorkbookNameAsync (string name, string nameName, string folder = null);

        /// <summary>
        /// Read workbook&#39;s name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (NameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameResponse>> CellsWorkbookGetWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null);
        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        System.Threading.Tasks.Task<RangeValueResponse> CellsWorkbookGetWorkbookNameValueAsync (string name, string nameName, string folder = null);

        /// <summary>
        /// Get workbook&#39;s name value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo (string name, string nameName, string folder = null);
        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of NamesResponse</returns>
        System.Threading.Tasks.Task<NamesResponse> CellsWorkbookGetWorkbookNamesAsync (string name, string folder = null);

        /// <summary>
        /// Read workbook&#39;s names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (NamesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamesResponse>> CellsWorkbookGetWorkbookNamesAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of WorkbookSettingsResponse</returns>
        System.Threading.Tasks.Task<WorkbookSettingsResponse> CellsWorkbookGetWorkbookSettingsAsync (string name, string folder = null);

        /// <summary>
        /// Get Workbook Settings DTO
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookSettingsResponse>> CellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookGetWorkbookTextItemsAsync (string name, string folder = null);

        /// <summary>
        /// Read workbook&#39;s text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo (string name, string folder = null);
        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostAutofitWorkbookRowsAsync (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null);

        /// <summary>
        /// Autofit workbook rows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null);
        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostEncryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null);

        /// <summary>
        /// Encript document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostEncryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostImportDataAsync (string name, ImportOption importdata, string folder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostImportDataAsyncWithHttpInfo (string name, ImportOption importdata, string folder = null);
        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostProtectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null);

        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostProtectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null);
        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostWorkbookCalculateFormulaAsync (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null);

        /// <summary>
        /// Calculate all formulas in workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null);
        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPostWorkbookGetSmartMarkerResultAsync (string name, string xmlFile = null, string folder = null, string outPath = null);

        /// <summary>
        /// Smart marker processing result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo (string name, string xmlFile = null, string folder = null, string outPath = null);
        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostWorkbookSettingsAsync (string name, WorkbookSettings settings = null, string folder = null);

        /// <summary>
        /// Update Workbook setting 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo (string name, WorkbookSettings settings = null, string folder = null);
        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        System.Threading.Tasks.Task<SplitResultResponse> CellsWorkbookPostWorkbookSplitAsync (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null);

        /// <summary>
        /// Split workbook.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> CellsWorkbookPostWorkbookSplitAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null);
        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPostWorkbooksMergeAsync (string name, string mergeWith, string folder = null);

        /// <summary>
        /// Merge workbooks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo (string name, string mergeWith, string folder = null);
        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of WorkbookReplaceResponse</returns>
        System.Threading.Tasks.Task<WorkbookReplaceResponse> CellsWorkbookPostWorkbooksTextReplaceAsync (string name, string oldValue, string newValue, string folder = null);

        /// <summary>
        /// Replace text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookReplaceResponse>> CellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo (string name, string oldValue, string newValue, string folder = null);
        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookPostWorkbooksTextSearchAsync (string name, string text, string folder = null);

        /// <summary>
        /// Search text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo (string name, string text, string folder = null);
        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPutConvertWorkbookAsync (string format = null, string password = null, string outPath = null);

        /// <summary>
        /// Convert workbook from request content to some format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPutConvertWorkbookAsyncWithHttpInfo (string format = null, string password = null, string outPath = null);
        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPutDocumentProtectFromChangesAsync (string name, PasswordRequest password = null, string folder = null);

        /// <summary>
        /// Protect document from changes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo (string name, PasswordRequest password = null, string folder = null);
        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPutWorkbookCreateAsync (string name, string templateFile = null, string dataFile = null, string folder = null);

        /// <summary>
        /// Create new workbook using deferent methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPutWorkbookCreateAsyncWithHttpInfo (string name, string templateFile = null, string dataFile = null, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsWorkbookApi : ICellsWorkbookApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsWorkbookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsWorkbookApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsWorkbookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsWorkbookApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookDeleteDecryptDocument (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookDeleteDecryptDocumentWithHttpInfo(name, encryption, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookDeleteDecryptDocumentWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteDecryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDecryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteDecryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo(name, encryption, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrypt document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteDecryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteDecryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDecryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookDeleteDocumentUnprotectFromChanges (string name, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteDocumentUnprotectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDocumentUnprotectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteDocumentUnprotectFromChangesAsync (string name, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unprotect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteDocumentUnprotectFromChangesAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteDocumentUnprotectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteDocumentUnprotectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookDeleteUnprotectDocument (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookDeleteUnprotectDocumentWithHttpInfo(name, protection, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookDeleteUnprotectDocumentWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteUnprotectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteUnprotectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteUnprotectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo(name, protection, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">Protection settings, only password can be specified. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteUnprotectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteUnprotectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteUnprotectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookDeleteWorkbookName (string name, string nameName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookDeleteWorkbookNameWithHttpInfo(name, nameName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookDeleteWorkbookNameWithHttpInfo (string name, string nameName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsWorkbookApi->CellsWorkbookDeleteWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteWorkbookNameAsync (string name, string nameName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo(name, nameName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsWorkbookApi->CellsWorkbookDeleteWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookDeleteWorkbookNames (string name, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookDeleteWorkbookNamesWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookDeleteWorkbookNamesWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookDeleteWorkbookNamesAsync (string name, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clean workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookDeleteWorkbookNamesAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookDeleteWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookDeleteWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorkbookGetWorkbook (string name, string password = null, bool? isAutoFit = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorkbookGetWorkbookWithHttpInfo(name, password, isAutoFit, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorkbookGetWorkbookWithHttpInfo (string name, string password = null, bool? isAutoFit = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbook");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (isAutoFit != null) localVarQueryParams.Add("isAutoFit", Configuration.ApiClient.ParameterToString(isAutoFit)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookGetWorkbookAsync (string name, string password = null, bool? isAutoFit = null, string folder = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorkbookGetWorkbookAsyncWithHttpInfo(name, password, isAutoFit, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook info or export. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="password">The document password. (optional)</param>
        /// <param name="isAutoFit">Set document rows to be autofit. (optional, default to false)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookGetWorkbookAsyncWithHttpInfo (string name, string password = null, bool? isAutoFit = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbook");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (isAutoFit != null) localVarQueryParams.Add("isAutoFit", Configuration.ApiClient.ParameterToString(isAutoFit)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>StyleResponse</returns>
        public StyleResponse CellsWorkbookGetWorkbookDefaultStyle (string name, string folder = null)
        {
             ApiResponse<StyleResponse> localVarResponse = CellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of StyleResponse</returns>
        public ApiResponse< StyleResponse > CellsWorkbookGetWorkbookDefaultStyleWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookDefaultStyle");

            var localVarPath = "/cells/{name}/defaultstyle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookDefaultStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>Task of StyleResponse</returns>
        public async System.Threading.Tasks.Task<StyleResponse> CellsWorkbookGetWorkbookDefaultStyleAsync (string name, string folder = null)
        {
             ApiResponse<StyleResponse> localVarResponse = await CellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook default style info. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (StyleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StyleResponse>> CellsWorkbookGetWorkbookDefaultStyleAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookDefaultStyle");

            var localVarPath = "/cells/{name}/defaultstyle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookDefaultStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StyleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StyleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StyleResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>NameResponse</returns>
        public NameResponse CellsWorkbookGetWorkbookName (string name, string nameName, string folder = null)
        {
             ApiResponse<NameResponse> localVarResponse = CellsWorkbookGetWorkbookNameWithHttpInfo(name, nameName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of NameResponse</returns>
        public ApiResponse< NameResponse > CellsWorkbookGetWorkbookNameWithHttpInfo (string name, string nameName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NameResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NameResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NameResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of NameResponse</returns>
        public async System.Threading.Tasks.Task<NameResponse> CellsWorkbookGetWorkbookNameAsync (string name, string nameName, string folder = null)
        {
             ApiResponse<NameResponse> localVarResponse = await CellsWorkbookGetWorkbookNameAsyncWithHttpInfo(name, nameName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook&#39;s name. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (NameResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NameResponse>> CellsWorkbookGetWorkbookNameAsyncWithHttpInfo (string name, string nameName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookName");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookName");

            var localVarPath = "/cells/{name}/names/{nameName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NameResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NameResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NameResponse)));
        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        public RangeValueResponse CellsWorkbookGetWorkbookNameValue (string name, string nameName, string folder = null)
        {
             ApiResponse<RangeValueResponse> localVarResponse = CellsWorkbookGetWorkbookNameValueWithHttpInfo(name, nameName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        public ApiResponse< RangeValueResponse > CellsWorkbookGetWorkbookNameValueWithHttpInfo (string name, string nameName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookNameValue");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookNameValue");

            var localVarPath = "/cells/{name}/names/{nameName}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNameValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        public async System.Threading.Tasks.Task<RangeValueResponse> CellsWorkbookGetWorkbookNameValueAsync (string name, string nameName, string folder = null)
        {
             ApiResponse<RangeValueResponse> localVarResponse = await CellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo(name, nameName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get workbook&#39;s name value. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="nameName">The name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsWorkbookGetWorkbookNameValueAsyncWithHttpInfo (string name, string nameName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookNameValue");
            // verify the required parameter 'nameName' is set
            if (nameName == null)
                throw new ApiException(400, "Missing required parameter 'nameName' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookNameValue");

            var localVarPath = "/cells/{name}/names/{nameName}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nameName != null) localVarPathParams.Add("nameName", Configuration.ApiClient.ParameterToString(nameName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNameValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>NamesResponse</returns>
        public NamesResponse CellsWorkbookGetWorkbookNames (string name, string folder = null)
        {
             ApiResponse<NamesResponse> localVarResponse = CellsWorkbookGetWorkbookNamesWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of NamesResponse</returns>
        public ApiResponse< NamesResponse > CellsWorkbookGetWorkbookNamesWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamesResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of NamesResponse</returns>
        public async System.Threading.Tasks.Task<NamesResponse> CellsWorkbookGetWorkbookNamesAsync (string name, string folder = null)
        {
             ApiResponse<NamesResponse> localVarResponse = await CellsWorkbookGetWorkbookNamesAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook&#39;s names. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (NamesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NamesResponse>> CellsWorkbookGetWorkbookNamesAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookNames");

            var localVarPath = "/cells/{name}/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamesResponse)));
        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>WorkbookSettingsResponse</returns>
        public WorkbookSettingsResponse CellsWorkbookGetWorkbookSettings (string name, string folder = null)
        {
             ApiResponse<WorkbookSettingsResponse> localVarResponse = CellsWorkbookGetWorkbookSettingsWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookSettingsResponse</returns>
        public ApiResponse< WorkbookSettingsResponse > CellsWorkbookGetWorkbookSettingsWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookSettingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookSettingsResponse)));
        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of WorkbookSettingsResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookSettingsResponse> CellsWorkbookGetWorkbookSettingsAsync (string name, string folder = null)
        {
             ApiResponse<WorkbookSettingsResponse> localVarResponse = await CellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Workbook Settings DTO 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookSettingsResponse>> CellsWorkbookGetWorkbookSettingsAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookSettingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookSettingsResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse CellsWorkbookGetWorkbookTextItems (string name, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = CellsWorkbookGetWorkbookTextItemsWithHttpInfo(name, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > CellsWorkbookGetWorkbookTextItemsWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookTextItems");

            var localVarPath = "/cells/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookGetWorkbookTextItemsAsync (string name, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await CellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo(name, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read workbook&#39;s text items. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookGetWorkbookTextItemsAsyncWithHttpInfo (string name, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookGetWorkbookTextItems");

            var localVarPath = "/cells/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookGetWorkbookTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPostAutofitWorkbookRows (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(name, autoFitterOptions, startRow, endRow, onlyAuto, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPostAutofitWorkbookRowsWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostAutofitWorkbookRows");

            var localVarPath = "/cells/{name}/autofitrows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (onlyAuto != null) localVarQueryParams.Add("onlyAuto", Configuration.ApiClient.ParameterToString(onlyAuto)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostAutofitWorkbookRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostAutofitWorkbookRowsAsync (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo(name, autoFitterOptions, startRow, endRow, onlyAuto, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autofit workbook rows. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="autoFitterOptions">Auto Fitter Options. (optional)</param>
        /// <param name="startRow">Start row. (optional)</param>
        /// <param name="endRow">End row. (optional)</param>
        /// <param name="onlyAuto">Only auto. (optional, default to false)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostAutofitWorkbookRowsAsyncWithHttpInfo (string name, AutoFitterOptions autoFitterOptions = null, int? startRow = null, int? endRow = null, bool? onlyAuto = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostAutofitWorkbookRows");

            var localVarPath = "/cells/{name}/autofitrows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (startRow != null) localVarQueryParams.Add("startRow", Configuration.ApiClient.ParameterToString(startRow)); // query parameter
            if (endRow != null) localVarQueryParams.Add("endRow", Configuration.ApiClient.ParameterToString(endRow)); // query parameter
            if (onlyAuto != null) localVarQueryParams.Add("onlyAuto", Configuration.ApiClient.ParameterToString(onlyAuto)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (autoFitterOptions != null && autoFitterOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoFitterOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoFitterOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostAutofitWorkbookRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPostEncryptDocument (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPostEncryptDocumentWithHttpInfo(name, encryption, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPostEncryptDocumentWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostEncryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostEncryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostEncryptDocumentAsync (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPostEncryptDocumentAsyncWithHttpInfo(name, encryption, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encript document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="encryption">Encryption parameters. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostEncryptDocumentAsyncWithHttpInfo (string name, WorkbookEncryptionRequest encryption = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostEncryptDocument");

            var localVarPath = "/cells/{name}/encryption";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (encryption != null && encryption.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(encryption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryption; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostEncryptDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPostImportData (string name, ImportOption importdata, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPostImportDataWithHttpInfo(name, importdata, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPostImportDataWithHttpInfo (string name, ImportOption importdata, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostImportData");
            // verify the required parameter 'importdata' is set
            if (importdata == null)
                throw new ApiException(400, "Missing required parameter 'importdata' when calling CellsWorkbookApi->CellsWorkbookPostImportData");

            var localVarPath = "/cells/{name}/importdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (importdata != null && importdata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importdata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importdata; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostImportData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostImportDataAsync (string name, ImportOption importdata, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPostImportDataAsyncWithHttpInfo(name, importdata, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="importdata"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostImportDataAsyncWithHttpInfo (string name, ImportOption importdata, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostImportData");
            // verify the required parameter 'importdata' is set
            if (importdata == null)
                throw new ApiException(400, "Missing required parameter 'importdata' when calling CellsWorkbookApi->CellsWorkbookPostImportData");

            var localVarPath = "/cells/{name}/importdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (importdata != null && importdata.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importdata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importdata; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostImportData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPostProtectDocument (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPostProtectDocumentWithHttpInfo(name, protection, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPostProtectDocumentWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostProtectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostProtectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostProtectDocumentAsync (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPostProtectDocumentAsyncWithHttpInfo(name, protection, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The document name.</param>
        /// <param name="protection">The protection settings. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostProtectDocumentAsyncWithHttpInfo (string name, WorkbookProtectionRequest protection = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostProtectDocument");

            var localVarPath = "/cells/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (protection != null && protection.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protection; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostProtectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPostWorkbookCalculateFormula (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(name, options, ignoreError, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookCalculateFormula");

            var localVarPath = "/cells/{name}/calculateformula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (ignoreError != null) localVarQueryParams.Add("ignoreError", Configuration.ApiClient.ParameterToString(ignoreError)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookCalculateFormula", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostWorkbookCalculateFormulaAsync (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo(name, options, ignoreError, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate all formulas in workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="options">Calculation Options. (optional)</param>
        /// <param name="ignoreError">ignore Error. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostWorkbookCalculateFormulaAsyncWithHttpInfo (string name, CalculationOptions options = null, bool? ignoreError = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookCalculateFormula");

            var localVarPath = "/cells/{name}/calculateformula";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (ignoreError != null) localVarQueryParams.Add("ignoreError", Configuration.ApiClient.ParameterToString(ignoreError)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookCalculateFormula", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorkbookPostWorkbookGetSmartMarkerResult (string name, string xmlFile = null, string folder = null, string outPath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(name, xmlFile, folder, outPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo (string name, string xmlFile = null, string folder = null, string outPath = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookGetSmartMarkerResult");

            var localVarPath = "/cells/{name}/smartmarker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xmlFile != null) localVarQueryParams.Add("xmlFile", Configuration.ApiClient.ParameterToString(xmlFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookGetSmartMarkerResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPostWorkbookGetSmartMarkerResultAsync (string name, string xmlFile = null, string folder = null, string outPath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo(name, xmlFile, folder, outPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Smart marker processing result. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="xmlFile">The xml file full path, if empty the data is read from request body. (optional)</param>
        /// <param name="folder">The workbook folder full path. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPostWorkbookGetSmartMarkerResultAsyncWithHttpInfo (string name, string xmlFile = null, string folder = null, string outPath = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookGetSmartMarkerResult");

            var localVarPath = "/cells/{name}/smartmarker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (xmlFile != null) localVarQueryParams.Add("xmlFile", Configuration.ApiClient.ParameterToString(xmlFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookGetSmartMarkerResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPostWorkbookSettings (string name, WorkbookSettings settings = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPostWorkbookSettingsWithHttpInfo(name, settings, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPostWorkbookSettingsWithHttpInfo (string name, WorkbookSettings settings = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPostWorkbookSettingsAsync (string name, WorkbookSettings settings = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo(name, settings, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Workbook setting  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="settings">Workbook Setting DTO (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPostWorkbookSettingsAsyncWithHttpInfo (string name, WorkbookSettings settings = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookSettings");

            var localVarPath = "/cells/{name}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>SplitResultResponse</returns>
        public SplitResultResponse CellsWorkbookPostWorkbookSplit (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = CellsWorkbookPostWorkbookSplitWithHttpInfo(name, format, from, to, horizontalResolution, verticalResolution, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>ApiResponse of SplitResultResponse</returns>
        public ApiResponse< SplitResultResponse > CellsWorkbookPostWorkbookSplitWithHttpInfo (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookSplit");

            var localVarPath = "/cells/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (horizontalResolution != null) localVarQueryParams.Add("horizontalResolution", Configuration.ApiClient.ParameterToString(horizontalResolution)); // query parameter
            if (verticalResolution != null) localVarQueryParams.Add("verticalResolution", Configuration.ApiClient.ParameterToString(verticalResolution)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSplit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of SplitResultResponse</returns>
        public async System.Threading.Tasks.Task<SplitResultResponse> CellsWorkbookPostWorkbookSplitAsync (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null)
        {
             ApiResponse<SplitResultResponse> localVarResponse = await CellsWorkbookPostWorkbookSplitAsyncWithHttpInfo(name, format, from, to, horizontalResolution, verticalResolution, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Split workbook. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The workbook name.</param>
        /// <param name="format">Split format. (optional)</param>
        /// <param name="from">Start worksheet index. (optional, default to 0)</param>
        /// <param name="to">End worksheet index. (optional, default to 0)</param>
        /// <param name="horizontalResolution">Image horizontal resolution. (optional, default to 0)</param>
        /// <param name="verticalResolution">Image vertical resolution. (optional, default to 0)</param>
        /// <param name="folder">The workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SplitResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SplitResultResponse>> CellsWorkbookPostWorkbookSplitAsyncWithHttpInfo (string name, string format = null, int? from = null, int? to = null, int? horizontalResolution = null, int? verticalResolution = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbookSplit");

            var localVarPath = "/cells/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (horizontalResolution != null) localVarQueryParams.Add("horizontalResolution", Configuration.ApiClient.ParameterToString(horizontalResolution)); // query parameter
            if (verticalResolution != null) localVarQueryParams.Add("verticalResolution", Configuration.ApiClient.ParameterToString(verticalResolution)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbookSplit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SplitResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SplitResultResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SplitResultResponse)));
        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        public WorkbookResponse CellsWorkbookPostWorkbooksMerge (string name, string mergeWith, string folder = null)
        {
             ApiResponse<WorkbookResponse> localVarResponse = CellsWorkbookPostWorkbooksMergeWithHttpInfo(name, mergeWith, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        public ApiResponse< WorkbookResponse > CellsWorkbookPostWorkbooksMergeWithHttpInfo (string name, string mergeWith, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksMerge");
            // verify the required parameter 'mergeWith' is set
            if (mergeWith == null)
                throw new ApiException(400, "Missing required parameter 'mergeWith' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksMerge");

            var localVarPath = "/cells/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (mergeWith != null) localVarQueryParams.Add("mergeWith", Configuration.ApiClient.ParameterToString(mergeWith)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPostWorkbooksMergeAsync (string name, string mergeWith, string folder = null)
        {
             ApiResponse<WorkbookResponse> localVarResponse = await CellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo(name, mergeWith, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge workbooks. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Workbook name.</param>
        /// <param name="mergeWith">The workbook to merge with.</param>
        /// <param name="folder">Source workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPostWorkbooksMergeAsyncWithHttpInfo (string name, string mergeWith, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksMerge");
            // verify the required parameter 'mergeWith' is set
            if (mergeWith == null)
                throw new ApiException(400, "Missing required parameter 'mergeWith' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksMerge");

            var localVarPath = "/cells/{name}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (mergeWith != null) localVarQueryParams.Add("mergeWith", Configuration.ApiClient.ParameterToString(mergeWith)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>WorkbookReplaceResponse</returns>
        public WorkbookReplaceResponse CellsWorkbookPostWorkbooksTextReplace (string name, string oldValue, string newValue, string folder = null)
        {
             ApiResponse<WorkbookReplaceResponse> localVarResponse = CellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(name, oldValue, newValue, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookReplaceResponse</returns>
        public ApiResponse< WorkbookReplaceResponse > CellsWorkbookPostWorkbooksTextReplaceWithHttpInfo (string name, string oldValue, string newValue, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'oldValue' is set
            if (oldValue == null)
                throw new ApiException(400, "Missing required parameter 'oldValue' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'newValue' is set
            if (newValue == null)
                throw new ApiException(400, "Missing required parameter 'newValue' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextReplace");

            var localVarPath = "/cells/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (oldValue != null) localVarQueryParams.Add("oldValue", Configuration.ApiClient.ParameterToString(oldValue)); // query parameter
            if (newValue != null) localVarQueryParams.Add("newValue", Configuration.ApiClient.ParameterToString(newValue)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookReplaceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookReplaceResponse)));
        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of WorkbookReplaceResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookReplaceResponse> CellsWorkbookPostWorkbooksTextReplaceAsync (string name, string oldValue, string newValue, string folder = null)
        {
             ApiResponse<WorkbookReplaceResponse> localVarResponse = await CellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo(name, oldValue, newValue, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookReplaceResponse>> CellsWorkbookPostWorkbooksTextReplaceAsyncWithHttpInfo (string name, string oldValue, string newValue, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'oldValue' is set
            if (oldValue == null)
                throw new ApiException(400, "Missing required parameter 'oldValue' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextReplace");
            // verify the required parameter 'newValue' is set
            if (newValue == null)
                throw new ApiException(400, "Missing required parameter 'newValue' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextReplace");

            var localVarPath = "/cells/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (oldValue != null) localVarQueryParams.Add("oldValue", Configuration.ApiClient.ParameterToString(oldValue)); // query parameter
            if (newValue != null) localVarQueryParams.Add("newValue", Configuration.ApiClient.ParameterToString(newValue)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookReplaceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookReplaceResponse)));
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>TextItemsResponse</returns>
        public TextItemsResponse CellsWorkbookPostWorkbooksTextSearch (string name, string text, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = CellsWorkbookPostWorkbooksTextSearchWithHttpInfo(name, text, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of TextItemsResponse</returns>
        public ApiResponse< TextItemsResponse > CellsWorkbookPostWorkbooksTextSearchWithHttpInfo (string name, string text, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextSearch");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextSearch");

            var localVarPath = "/cells/{name}/findText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of TextItemsResponse</returns>
        public async System.Threading.Tasks.Task<TextItemsResponse> CellsWorkbookPostWorkbooksTextSearchAsync (string name, string text, string folder = null)
        {
             ApiResponse<TextItemsResponse> localVarResponse = await CellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo(name, text, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search text. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="text">Text sample.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (TextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextItemsResponse>> CellsWorkbookPostWorkbooksTextSearchAsyncWithHttpInfo (string name, string text, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextSearch");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling CellsWorkbookApi->CellsWorkbookPostWorkbooksTextSearch");

            var localVarPath = "/cells/{name}/findText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPostWorkbooksTextSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextItemsResponse)));
        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CellsWorkbookPutConvertWorkbook (string format = null, string password = null, string outPath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CellsWorkbookPutConvertWorkbookWithHttpInfo(format, password, outPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CellsWorkbookPutConvertWorkbookWithHttpInfo (string format = null, string password = null, string outPath = null)
        {

            var localVarPath = "/cells/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutConvertWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CellsWorkbookPutConvertWorkbookAsync (string format = null, string password = null, string outPath = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CellsWorkbookPutConvertWorkbookAsyncWithHttpInfo(format, password, outPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert workbook from request content to some format. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format to convert. (optional)</param>
        /// <param name="password">The workbook password. (optional)</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CellsWorkbookPutConvertWorkbookAsyncWithHttpInfo (string format = null, string password = null, string outPath = null)
        {

            var localVarPath = "/cells/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutConvertWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsWorkbookPutDocumentProtectFromChanges (string name, PasswordRequest password = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(name, password, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsWorkbookPutDocumentProtectFromChangesWithHttpInfo (string name, PasswordRequest password = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPutDocumentProtectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (password != null && password.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(password); // http body (model) parameter
            }
            else
            {
                localVarPostBody = password; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutDocumentProtectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsWorkbookPutDocumentProtectFromChangesAsync (string name, PasswordRequest password = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo(name, password, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect document from changes. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="password">Modification password. (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsWorkbookPutDocumentProtectFromChangesAsyncWithHttpInfo (string name, PasswordRequest password = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPutDocumentProtectFromChanges");

            var localVarPath = "/cells/{name}/writeProtection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (password != null && password.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(password); // http body (model) parameter
            }
            else
            {
                localVarPostBody = password; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutDocumentProtectFromChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>WorkbookResponse</returns>
        public WorkbookResponse CellsWorkbookPutWorkbookCreate (string name, string templateFile = null, string dataFile = null, string folder = null)
        {
             ApiResponse<WorkbookResponse> localVarResponse = CellsWorkbookPutWorkbookCreateWithHttpInfo(name, templateFile, dataFile, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>ApiResponse of WorkbookResponse</returns>
        public ApiResponse< WorkbookResponse > CellsWorkbookPutWorkbookCreateWithHttpInfo (string name, string templateFile = null, string dataFile = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPutWorkbookCreate");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (templateFile != null) localVarQueryParams.Add("templateFile", Configuration.ApiClient.ParameterToString(templateFile)); // query parameter
            if (dataFile != null) localVarQueryParams.Add("dataFile", Configuration.ApiClient.ParameterToString(dataFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of WorkbookResponse</returns>
        public async System.Threading.Tasks.Task<WorkbookResponse> CellsWorkbookPutWorkbookCreateAsync (string name, string templateFile = null, string dataFile = null, string folder = null)
        {
             ApiResponse<WorkbookResponse> localVarResponse = await CellsWorkbookPutWorkbookCreateAsyncWithHttpInfo(name, templateFile, dataFile, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new workbook using deferent methods. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The new document name.</param>
        /// <param name="templateFile">The template file, if the data not provided default workbook is created. (optional)</param>
        /// <param name="dataFile">Smart marker data file, if the data not provided the request content is checked for the data. (optional)</param>
        /// <param name="folder">The new document folder. (optional)</param>
        /// <returns>Task of ApiResponse (WorkbookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkbookResponse>> CellsWorkbookPutWorkbookCreateAsyncWithHttpInfo (string name, string templateFile = null, string dataFile = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorkbookApi->CellsWorkbookPutWorkbookCreate");

            var localVarPath = "/cells/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (templateFile != null) localVarQueryParams.Add("templateFile", Configuration.ApiClient.ParameterToString(templateFile)); // query parameter
            if (dataFile != null) localVarQueryParams.Add("dataFile", Configuration.ApiClient.ParameterToString(dataFile)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorkbookPutWorkbookCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkbookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkbookResponse)));
        }

    }
}
