/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsPageSetupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPageSetupDeleteHeaderFooter (string name, string sheetName, string folder = null);

        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPageSetupDeleteHeaderFooterWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        PageSectionsResponse CellsPageSetupGetFooter (string name, string sheetName, string folder = null);

        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        ApiResponse<PageSectionsResponse> CellsPageSetupGetFooterWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        PageSectionsResponse CellsPageSetupGetHeader (string name, string sheetName, string folder = null);

        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        ApiResponse<PageSectionsResponse> CellsPageSetupGetHeaderWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageSetupResponse</returns>
        PageSetupResponse CellsPageSetupGetPageSetup (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageSetupResponse</returns>
        ApiResponse<PageSetupResponse> CellsPageSetupGetPageSetupWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPageSetupPostFooter (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);

        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPageSetupPostFooterWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);
        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPageSetupPostHeader (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);

        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPageSetupPostHeaderWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);
        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsPageSetupPostPageSetup (string name, string sheetName, PageSetup pageSetup = null, string folder = null);

        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsPageSetupPostPageSetupWithHttpInfo (string name, string sheetName, PageSetup pageSetup = null, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupDeleteHeaderFooterAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// clear header footer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetFooterAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// get page footer information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetHeaderAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// get page header information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetHeaderAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageSetupResponse</returns>
        System.Threading.Tasks.Task<PageSetupResponse> CellsPageSetupGetPageSetupAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get Page Setup information.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageSetupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSetupResponse>> CellsPageSetupGetPageSetupAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupPostFooterAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);

        /// <summary>
        /// update  page footer information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupPostFooterAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);
        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupPostHeaderAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);

        /// <summary>
        /// update  page header information 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupPostHeaderAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null);
        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupPostPageSetupAsync (string name, string sheetName, PageSetup pageSetup = null, string folder = null);

        /// <summary>
        /// Update Page Setup information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupPostPageSetupAsyncWithHttpInfo (string name, string sheetName, PageSetup pageSetup = null, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsPageSetupApi : ICellsPageSetupApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPageSetupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsPageSetupApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsPageSetupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsPageSetupApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPageSetupDeleteHeaderFooter (string name, string sheetName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPageSetupDeleteHeaderFooterWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPageSetupDeleteHeaderFooterWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupDeleteHeaderFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupDeleteHeaderFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupDeleteHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupDeleteHeaderFooterAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// clear header footer 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupDeleteHeaderFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupDeleteHeaderFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupDeleteHeaderFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupDeleteHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        public PageSectionsResponse CellsPageSetupGetFooter (string name, string sheetName, string folder = null)
        {
             ApiResponse<PageSectionsResponse> localVarResponse = CellsPageSetupGetFooterWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        public ApiResponse< PageSectionsResponse > CellsPageSetupGetFooterWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupGetFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupGetFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        public async System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetFooterAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<PageSectionsResponse> localVarResponse = await CellsPageSetupGetFooterAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get page footer information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetFooterAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupGetFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupGetFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageSectionsResponse</returns>
        public PageSectionsResponse CellsPageSetupGetHeader (string name, string sheetName, string folder = null)
        {
             ApiResponse<PageSectionsResponse> localVarResponse = CellsPageSetupGetHeaderWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageSectionsResponse</returns>
        public ApiResponse< PageSectionsResponse > CellsPageSetupGetHeaderWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupGetHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupGetHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageSectionsResponse</returns>
        public async System.Threading.Tasks.Task<PageSectionsResponse> CellsPageSetupGetHeaderAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<PageSectionsResponse> localVarResponse = await CellsPageSetupGetHeaderAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get page header information 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageSectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSectionsResponse>> CellsPageSetupGetHeaderAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupGetHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupGetHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSectionsResponse)));
        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>PageSetupResponse</returns>
        public PageSetupResponse CellsPageSetupGetPageSetup (string name, string sheetName, string folder = null)
        {
             ApiResponse<PageSetupResponse> localVarResponse = CellsPageSetupGetPageSetupWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of PageSetupResponse</returns>
        public ApiResponse< PageSetupResponse > CellsPageSetupGetPageSetupWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupGetPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupGetPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSetupResponse)));
        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of PageSetupResponse</returns>
        public async System.Threading.Tasks.Task<PageSetupResponse> CellsPageSetupGetPageSetupAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<PageSetupResponse> localVarResponse = await CellsPageSetupGetPageSetupAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Page Setup information.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (PageSetupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSetupResponse>> CellsPageSetupGetPageSetupAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupGetPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupGetPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupGetPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSetupResponse)));
        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPageSetupPostFooter (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPageSetupPostFooterWithHttpInfo(name, sheetName, section, script, isFirstPage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPageSetupPostFooterWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsPageSetupApi->CellsPageSetupPostFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupPostFooterAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPageSetupPostFooterAsyncWithHttpInfo(name, sheetName, section, script, isFirstPage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update  page footer information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupPostFooterAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsPageSetupApi->CellsPageSetupPostFooter");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsPageSetupApi->CellsPageSetupPostFooter");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPageSetupPostHeader (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPageSetupPostHeaderWithHttpInfo(name, sheetName, section, script, isFirstPage, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPageSetupPostHeaderWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsPageSetupApi->CellsPageSetupPostHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupPostHeaderAsync (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPageSetupPostHeaderAsyncWithHttpInfo(name, sheetName, section, script, isFirstPage, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update  page header information  
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="section"></param>
        /// <param name="script"></param>
        /// <param name="isFirstPage"></param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupPostHeaderAsyncWithHttpInfo (string name, string sheetName, int? section, string script, bool? isFirstPage, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'section' is set
            if (section == null)
                throw new ApiException(400, "Missing required parameter 'section' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'script' is set
            if (script == null)
                throw new ApiException(400, "Missing required parameter 'script' when calling CellsPageSetupApi->CellsPageSetupPostHeader");
            // verify the required parameter 'isFirstPage' is set
            if (isFirstPage == null)
                throw new ApiException(400, "Missing required parameter 'isFirstPage' when calling CellsPageSetupApi->CellsPageSetupPostHeader");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (section != null) localVarQueryParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // query parameter
            if (script != null) localVarQueryParams.Add("script", Configuration.ApiClient.ParameterToString(script)); // query parameter
            if (isFirstPage != null) localVarQueryParams.Add("isFirstPage", Configuration.ApiClient.ParameterToString(isFirstPage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsPageSetupPostPageSetup (string name, string sheetName, PageSetup pageSetup = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsPageSetupPostPageSetupWithHttpInfo(name, sheetName, pageSetup, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsPageSetupPostPageSetupWithHttpInfo (string name, string sheetName, PageSetup pageSetup = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupPostPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupPostPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (pageSetup != null && pageSetup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageSetup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageSetup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsPageSetupPostPageSetupAsync (string name, string sheetName, PageSetup pageSetup = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsPageSetupPostPageSetupAsyncWithHttpInfo(name, sheetName, pageSetup, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Page Setup information. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="pageSetup"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsPageSetupPostPageSetupAsyncWithHttpInfo (string name, string sheetName, PageSetup pageSetup = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsPageSetupApi->CellsPageSetupPostPageSetup");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsPageSetupApi->CellsPageSetupPostPageSetup");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (pageSetup != null && pageSetup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageSetup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageSetup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsPageSetupPostPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
