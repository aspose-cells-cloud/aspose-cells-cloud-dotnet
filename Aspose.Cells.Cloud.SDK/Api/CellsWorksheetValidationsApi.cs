/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsWorksheetValidationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsDeleteWorksheetValidation (string name, string sheetName, int? validationIndex, string folder = null);

        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null);
        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsGetWorksheetValidation (string name, string sheetName, int? validationIndex, string folder = null);

        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsGetWorksheetValidationWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null);
        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ValidationsResponse</returns>
        ValidationsResponse CellsWorksheetValidationsGetWorksheetValidations (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ApiResponse of ValidationsResponse</returns>
        ApiResponse<ValidationsResponse> CellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsPostWorksheetValidation (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null);

        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsPostWorksheetValidationWithHttpInfo (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null);
        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        ValidationResponse CellsWorksheetValidationsPutWorksheetValidation (string name, string sheetName, string range = null, string folder = null);

        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        ApiResponse<ValidationResponse> CellsWorksheetValidationsPutWorksheetValidationWithHttpInfo (string name, string sheetName, string range = null, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsDeleteWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null);

        /// <summary>
        /// Delete worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null);
        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsGetWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null);

        /// <summary>
        /// Get worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null);
        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ValidationsResponse</returns>
        System.Threading.Tasks.Task<ValidationsResponse> CellsWorksheetValidationsGetWorksheetValidationsAsync (string name, string sheetName, string folder = null);

        /// <summary>
        /// Get worksheet validations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationsResponse>> CellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo (string name, string sheetName, string folder = null);
        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPostWorksheetValidationAsync (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null);

        /// <summary>
        /// Update worksheet validation by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null);
        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPutWorksheetValidationAsync (string name, string sheetName, string range = null, string folder = null);

        /// <summary>
        /// Add worksheet validation at index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, string range = null, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsWorksheetValidationsApi : ICellsWorksheetValidationsApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsWorksheetValidationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsWorksheetValidationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsWorksheetValidationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsWorksheetValidationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsDeleteWorksheetValidation (string name, string sheetName, int? validationIndex, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsDeleteWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsDeleteWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsDeleteWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo(name, sheetName, validationIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsDeleteWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsDeleteWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsDeleteWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsDeleteWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsGetWorksheetValidation (string name, string sheetName, int? validationIndex, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsGetWorksheetValidationWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsGetWorksheetValidationAsync (string name, string sheetName, int? validationIndex, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo(name, sheetName, validationIndex, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsGetWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ValidationsResponse</returns>
        public ValidationsResponse CellsWorksheetValidationsGetWorksheetValidations (string name, string sheetName, string folder = null)
        {
             ApiResponse<ValidationsResponse> localVarResponse = CellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>ApiResponse of ValidationsResponse</returns>
        public ApiResponse< ValidationsResponse > CellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidations");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidations");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationsResponse)));
        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ValidationsResponse</returns>
        public async System.Threading.Tasks.Task<ValidationsResponse> CellsWorksheetValidationsGetWorksheetValidationsAsync (string name, string sheetName, string folder = null)
        {
             ApiResponse<ValidationsResponse> localVarResponse = await CellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo(name, sheetName, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheet validations. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="folder">Document folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationsResponse>> CellsWorksheetValidationsGetWorksheetValidationsAsyncWithHttpInfo (string name, string sheetName, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidations");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsGetWorksheetValidations");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsGetWorksheetValidations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationsResponse)));
        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsPostWorksheetValidation (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, validation, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsPostWorksheetValidationWithHttpInfo (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPostWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (validation != null && validation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPostWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPostWorksheetValidationAsync (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo(name, sheetName, validationIndex, validation, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update worksheet validation by index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="validationIndex">The validation index.</param>
        /// <param name="validation"> (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPostWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, int? validationIndex, Validation validation = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPostWorksheetValidation");
            // verify the required parameter 'validationIndex' is set
            if (validationIndex == null)
                throw new ApiException(400, "Missing required parameter 'validationIndex' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPostWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (validationIndex != null) localVarPathParams.Add("validationIndex", Configuration.ApiClient.ParameterToString(validationIndex)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (validation != null && validation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPostWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ValidationResponse</returns>
        public ValidationResponse CellsWorksheetValidationsPutWorksheetValidation (string name, string sheetName, string range = null, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = CellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(name, sheetName, range, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>ApiResponse of ValidationResponse</returns>
        public ApiResponse< ValidationResponse > CellsWorksheetValidationsPutWorksheetValidationWithHttpInfo (string name, string sheetName, string range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPutWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPutWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPutWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ValidationResponse</returns>
        public async System.Threading.Tasks.Task<ValidationResponse> CellsWorksheetValidationsPutWorksheetValidationAsync (string name, string sheetName, string range = null, string folder = null)
        {
             ApiResponse<ValidationResponse> localVarResponse = await CellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo(name, sheetName, range, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add worksheet validation at index. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Document name.</param>
        /// <param name="sheetName">Worksheet name.</param>
        /// <param name="range">Specified cells area (optional)</param>
        /// <param name="folder">Document&#39;s folder. (optional)</param>
        /// <returns>Task of ApiResponse (ValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationResponse>> CellsWorksheetValidationsPutWorksheetValidationAsyncWithHttpInfo (string name, string sheetName, string range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPutWorksheetValidation");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsWorksheetValidationsApi->CellsWorksheetValidationsPutWorksheetValidation");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/validations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (range != null) localVarQueryParams.Add("range", Configuration.ApiClient.ParameterToString(range)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsWorksheetValidationsPutWorksheetValidation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationResponse)));
        }

    }
}
