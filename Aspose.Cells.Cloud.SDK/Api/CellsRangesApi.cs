/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsRangesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        RangeValueResponse CellsRangesGetWorksheetCellsRangeValue (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null);

        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        ApiResponse<RangeValueResponse> CellsRangesGetWorksheetCellsRangeValueWithHttpInfo (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null);
        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeColumnWidth (string name, string sheetName, double? value, Range range = null, string folder = null);

        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null);
        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeMerge (string name, string sheetName, Range range = null, string folder = null);

        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeMergeWithHttpInfo (string name, string sheetName, Range range = null, string folder = null);
        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeMoveTo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null);

        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null);
        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeOutlineBorder (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null);

        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null);
        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeRowHeight (string name, string sheetName, double? value, Range range = null, string folder = null);

        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null);
        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeStyle (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null);

        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeStyleWithHttpInfo (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null);
        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeUnmerge (string name, string sheetName, Range range = null, string folder = null);

        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo (string name, string sheetName, Range range = null, string folder = null);
        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRangeValue (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null);

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeValueWithHttpInfo (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null);
        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        SaaSposeResponse CellsRangesPostWorksheetCellsRanges (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null);

        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        ApiResponse<SaaSposeResponse> CellsRangesPostWorksheetCellsRangesWithHttpInfo (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        System.Threading.Tasks.Task<RangeValueResponse> CellsRangesGetWorksheetCellsRangeValueAsync (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null);

        /// <summary>
        /// Get cells list in a range by range name or row column indexes  
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null);
        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeColumnWidthAsync (string name, string sheetName, double? value, Range range = null, string folder = null);

        /// <summary>
        /// Set column width of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null);
        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeMergeAsync (string name, string sheetName, Range range = null, string folder = null);

        /// <summary>
        /// Combines a range of cells into a single cell.              
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null);
        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeMoveToAsync (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null);

        /// <summary>
        /// Move the current range to the dest range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null);
        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeOutlineBorderAsync (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null);

        /// <summary>
        /// Sets outline border around a range of cells.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null);
        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeRowHeightAsync (string name, string sheetName, double? value, Range range = null, string folder = null);

        /// <summary>
        /// set row height of range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null);
        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeStyleAsync (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null);

        /// <summary>
        /// Sets the style of the range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null);
        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeUnmergeAsync (string name, string sheetName, Range range = null, string folder = null);

        /// <summary>
        /// Unmerges merged cells of this range.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null);
        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeValueAsync (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null);

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null);
        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangesAsync (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null);

        /// <summary>
        /// copy range in the worksheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsRangesApi : ICellsRangesApi
    {
        private Aspose.Cells.Cloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsRangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsRangesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsRangesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsRangesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Aspose.Cells.Cloud.SDK.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aspose.Cells.Cloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>RangeValueResponse</returns>
        public RangeValueResponse CellsRangesGetWorksheetCellsRangeValue (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null)
        {
             ApiResponse<RangeValueResponse> localVarResponse = CellsRangesGetWorksheetCellsRangeValueWithHttpInfo(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of RangeValueResponse</returns>
        public ApiResponse< RangeValueResponse > CellsRangesGetWorksheetCellsRangeValueWithHttpInfo (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesGetWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesGetWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (namerange != null) localVarQueryParams.Add("namerange", Configuration.ApiClient.ParameterToString(namerange)); // query parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (rowCount != null) localVarQueryParams.Add("rowCount", Configuration.ApiClient.ParameterToString(rowCount)); // query parameter
            if (columnCount != null) localVarQueryParams.Add("columnCount", Configuration.ApiClient.ParameterToString(columnCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesGetWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of RangeValueResponse</returns>
        public async System.Threading.Tasks.Task<RangeValueResponse> CellsRangesGetWorksheetCellsRangeValueAsync (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null)
        {
             ApiResponse<RangeValueResponse> localVarResponse = await CellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cells list in a range by range name or row column indexes   
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="namerange">range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)</param>
        /// <param name="firstRow">the first row of the range (optional)</param>
        /// <param name="firstColumn">the first column of the range (optional)</param>
        /// <param name="rowCount">the count of rows in the range (optional)</param>
        /// <param name="columnCount">the count of columns in the range (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (RangeValueResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeValueResponse>> CellsRangesGetWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string namerange = null, int? firstRow = null, int? firstColumn = null, int? rowCount = null, int? columnCount = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesGetWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesGetWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (namerange != null) localVarQueryParams.Add("namerange", Configuration.ApiClient.ParameterToString(namerange)); // query parameter
            if (firstRow != null) localVarQueryParams.Add("firstRow", Configuration.ApiClient.ParameterToString(firstRow)); // query parameter
            if (firstColumn != null) localVarQueryParams.Add("firstColumn", Configuration.ApiClient.ParameterToString(firstColumn)); // query parameter
            if (rowCount != null) localVarQueryParams.Add("rowCount", Configuration.ApiClient.ParameterToString(rowCount)); // query parameter
            if (columnCount != null) localVarQueryParams.Add("columnCount", Configuration.ApiClient.ParameterToString(columnCount)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesGetWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeValueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeValueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeValueResponse)));
        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeColumnWidth (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(name, sheetName, value, range, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeColumnWidthAsync (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo(name, sheetName, value, range, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set column width of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeColumnWidthAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeColumnWidth");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeColumnWidth");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeColumnWidth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeMerge (string name, string sheetName, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(name, sheetName, range, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeMergeWithHttpInfo (string name, string sheetName, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeMergeAsync (string name, string sheetName, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo(name, sheetName, range, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Combines a range of cells into a single cell.               
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeMergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeMoveTo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(name, sheetName, destRow, destColumn, range, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destRow' is set
            if (destRow == null)
                throw new ApiException(400, "Missing required parameter 'destRow' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destColumn' is set
            if (destColumn == null)
                throw new ApiException(400, "Missing required parameter 'destColumn' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/moveto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (destRow != null) localVarQueryParams.Add("destRow", Configuration.ApiClient.ParameterToString(destRow)); // query parameter
            if (destColumn != null) localVarQueryParams.Add("destColumn", Configuration.ApiClient.ParameterToString(destColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeMoveToAsync (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo(name, sheetName, destRow, destColumn, range, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move the current range to the dest range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="destRow">The start row of the dest range.</param>
        /// <param name="destColumn">The start column of the dest range.</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeMoveToAsyncWithHttpInfo (string name, string sheetName, int? destRow, int? destColumn, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destRow' is set
            if (destRow == null)
                throw new ApiException(400, "Missing required parameter 'destRow' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");
            // verify the required parameter 'destColumn' is set
            if (destColumn == null)
                throw new ApiException(400, "Missing required parameter 'destColumn' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeMoveTo");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/moveto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (destRow != null) localVarQueryParams.Add("destRow", Configuration.ApiClient.ParameterToString(destRow)); // query parameter
            if (destColumn != null) localVarQueryParams.Add("destColumn", Configuration.ApiClient.ParameterToString(destColumn)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeMoveTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeOutlineBorder (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(name, sheetName, rangeOperate, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeOutlineBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeOutlineBorderAsync (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo(name, sheetName, rangeOperate, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets outline border around a range of cells. 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set OutlineBorder Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeOutlineBorderAsyncWithHttpInfo (string name, string sheetName, RangeSetOutlineBorderRequest rangeOperate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeOutlineBorder");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeOutlineBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeRowHeight (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(name, sheetName, value, range, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeRowHeight");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeRowHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeRowHeightAsync (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo(name, sheetName, value, range, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// set row height of range 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="sheetName"></param>
        /// <param name="value"></param>
        /// <param name="range"> (optional)</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeRowHeightAsyncWithHttpInfo (string name, string sheetName, double? value, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeRowHeight");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeRowHeight");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeRowHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeStyle (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(name, sheetName, rangeOperate, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeStyleWithHttpInfo (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeStyleAsync (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo(name, sheetName, rangeOperate, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the style of the range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">Range Set Style Request  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeStyleAsyncWithHttpInfo (string name, string sheetName, RangeSetStyleRequest rangeOperate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeStyle");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeStyle");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/style";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeStyle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeUnmerge (string name, string sheetName, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(name, sheetName, range, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo (string name, string sheetName, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeUnmergeAsync (string name, string sheetName, Range range = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo(name, sheetName, range, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmerges merged cells of this range.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeUnmergeAsyncWithHttpInfo (string name, string sheetName, Range range = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeUnmerge");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeUnmerge");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeUnmerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRangeValue (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangeValueWithHttpInfo(name, sheetName, value, range, isConverted, setStyle, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangeValueWithHttpInfo (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("Value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (isConverted != null) localVarQueryParams.Add("isConverted", Configuration.ApiClient.ParameterToString(isConverted)); // query parameter
            if (setStyle != null) localVarQueryParams.Add("setStyle", Configuration.ApiClient.ParameterToString(setStyle)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangeValueAsync (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo(name, sheetName, value, range, isConverted, setStyle, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="value">Input value</param>
        /// <param name="range">range in worksheet  (optional)</param>
        /// <param name="isConverted">True: converted to other data type if appropriate. (optional, default to false)</param>
        /// <param name="setStyle">True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangeValueAsyncWithHttpInfo (string name, string sheetName, string value, Range range = null, bool? isConverted = null, bool? setStyle = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeValue");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRangeValue");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (value != null) localVarQueryParams.Add("Value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (isConverted != null) localVarQueryParams.Add("isConverted", Configuration.ApiClient.ParameterToString(isConverted)); // query parameter
            if (setStyle != null) localVarQueryParams.Add("setStyle", Configuration.ApiClient.ParameterToString(setStyle)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (range != null && range.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(range); // http body (model) parameter
            }
            else
            {
                localVarPostBody = range; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRangeValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>SaaSposeResponse</returns>
        public SaaSposeResponse CellsRangesPostWorksheetCellsRanges (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = CellsRangesPostWorksheetCellsRangesWithHttpInfo(name, sheetName, rangeOperate, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>ApiResponse of SaaSposeResponse</returns>
        public ApiResponse< SaaSposeResponse > CellsRangesPostWorksheetCellsRangesWithHttpInfo (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRanges");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRanges");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of SaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<SaaSposeResponse> CellsRangesPostWorksheetCellsRangesAsync (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null)
        {
             ApiResponse<SaaSposeResponse> localVarResponse = await CellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo(name, sheetName, rangeOperate, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// copy range in the worksheet 
        /// </summary>
        /// <exception cref="Aspose.Cells.Cloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">workbook name</param>
        /// <param name="sheetName">worksheet name</param>
        /// <param name="rangeOperate">copydata,copystyle,copyto,copyvalue (optional)</param>
        /// <param name="folder">Workbook folder. (optional)</param>
        /// <returns>Task of ApiResponse (SaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaaSposeResponse>> CellsRangesPostWorksheetCellsRangesAsyncWithHttpInfo (string name, string sheetName, RangeCopyRequest rangeOperate = null, string folder = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRanges");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling CellsRangesApi->CellsRangesPostWorksheetCellsRanges");

            var localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (rangeOperate != null && rangeOperate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rangeOperate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rangeOperate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CellsRangesPostWorksheetCellsRanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaaSposeResponse)));
        }

    }
}
