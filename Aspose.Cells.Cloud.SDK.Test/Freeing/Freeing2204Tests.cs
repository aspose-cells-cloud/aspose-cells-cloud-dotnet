namespace Aspose.Cells.Cloud.SDK.Test
{
    using System.IO;
    using System.Collections.Generic;
    using NUnit.Framework;
    using Aspose.Cells.Cloud.SDK.Api;
    using Aspose.Cells.Cloud.SDK.Model;
    /// <summary>
    ///  Class for testing CellsWorkbookApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Freeing2204Tests : CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CellsApi(clientId, clientSecret, apiVersion, testbaseurl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }
        [Test]
        public void CellsCELLSCLOUD_Extand_GetWorkbook_Test()
        {
            UpdateDataFile(instance, TEMPFOLDER, BOOK1);
            var response = instance.CellsWorkbookGetWorkbook(BOOK1, null, "pdf", null, null, TEMPFOLDER, null, "Freeing/CellsCELLSCLOUD_Extand_GetWorkbook_Test.pdf", null, new Dictionary<string, string> { { "OnePagePerSheet", "false" } });
            Assert.IsInstanceOf<Stream>(response, "response is System.IO.Stream");
        }

        [Test]
        public void CellsCELLSCLOUD_Extand_Saveas_Test()
        {
            UpdateDataFile(instance, TEMPFOLDER, BOOK1);
            var response = instance.CellsSaveAsPostDocumentSaveAs(BOOK1, null, "Freeing/CellsCELLSCLOUD_Extand_Saveas_Test.pdf", null, null, TEMPFOLDER, null, null, new Dictionary<string, string> { { "OnePagePerSheet", "false" } });
            Assert.IsInstanceOf<SaveResponse>(response, "response is System.IO.Stream");
        }

        [Test]
        public void CellsCELLSCLOUD_Extand_Export_Test()
        {
            LightCellsApi lightCellsApi = new LightCellsApi(clientId, clientSecret, apiVersion, testbaseurl);
            IDictionary<string, Stream> files = new Dictionary<string, Stream>();
            files.Add(BOOK1, GetTestDataStream(BOOK1));
            files.Add(MYDOC, GetTestDataStream(MYDOC));
            var filesResult = lightCellsApi.PostExport(files, "workbook", "pdf", new Dictionary<string, string> { { "OnePagePerSheet", "false" } });
            Assert.IsInstanceOf<FilesResult>(filesResult, "response is AccessTokenResponse");
        }
        [Test]
        public void CellsCELLSCLOUD_Extand_Convert_Test()
        {
            UpdateDataFile(instance, TEMPFOLDER, BOOK1);
            string workbook = "customerOutput.xlsx";
            string format = "pdf";
            string password = null;
            string outPath = null;
            UpdateDataFile(instance, TEMPFOLDER, BOOK1);
            var response = instance.CellsWorkbookPutConvertWorkbook(GetTestDataStream(workbook), format, password, outPath, null, new Dictionary<string, string> { { "OnePagePerSheet", "false" } });
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");

            using (FileStream fileStream = File.Create("CellsCELLSCLOUD_Extand_Convert_Test.pdf"))
            {
                fileStream.Position = 0;
                response.CopyTo(fileStream);
                fileStream.Close();
            }

        }
        }
}
