/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Api;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing CellsChartsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CellsChartsAxisApiTests:CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CellsApi(clientId, clientSecret, apiVersion, testbaseurl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CellsChartsGetAxis
        /// </summary>
        [Test]        
        public void CellsChartsGetAxis()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET4;
            int? chartIndex = 0;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsChartsGetChartCategoryAxis(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<AxisResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsGetChartSecondCategoryAxis(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<AxisResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsGetChartSecondValueAxis(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<AxisResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsGetChartValueAxis(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<AxisResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsGetChartSeriesAxis(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<AxisResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            
        }
        [Test]
        public void CellsChartsUpdateAxis()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET4;
            int? chartIndex = 0;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance, folder, name);

            Axis axis = new Axis();
            axis.CrossType = "Minimum";
            axis.CategoryType = "CategoryScale";
            axis.MinValue = 10;
            var response = instance.CellsChartsPostChartCategoryAxis(name, sheetName, chartIndex, axis, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsPostChartSecondCategoryAxis(name, sheetName, chartIndex, axis, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsPostChartSecondValueAxis(name, sheetName, chartIndex, axis, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsPostChartValueAxis(name, sheetName, chartIndex, axis, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);
            response = instance.CellsChartsPostChartSeriesAxis(name, sheetName, chartIndex, axis, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is AxisResponse");
            Assert.AreEqual(response.Code, 200);

        }
    }

}
