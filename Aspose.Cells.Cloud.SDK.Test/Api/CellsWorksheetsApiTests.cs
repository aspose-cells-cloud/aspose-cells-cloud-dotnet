/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace Aspose.Cells.Cloud.SDK.Test
{
    using NUnit.Framework;
    using Aspose.Cells.Cloud.SDK.Api;
    using Aspose.Cells.Cloud.SDK.Model;
    using System.Collections.Generic;

    /// <summary>
    ///  Class for testing CellsWorksheetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CellsWorksheetsApiTests:CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CellsApi(clientId, clientSecret, apiVersion, testbaseurl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }
        
        /// <summary>
        /// Test CellsWorksheetsDeleteUnprotectWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteUnprotectWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            ProtectSheetParameter protectParameter = new ProtectSheetParameter ();
            protectParameter.Password = "12345";
            protectParameter.ProtectionType = "All";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsDeleteUnprotectWorksheet(name, sheetName, protectParameter, folder);
            Assert.IsInstanceOf<WorksheetResponse>(response, "response is WorksheetResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsDeleteWorkSheetBackground
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteWorkSheetBackgroundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsDeleteWorksheetBackground(name, sheetName, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsDeleteWorkSheetComment
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteWorkSheetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string cellName = "C1";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsDeleteWorksheetComment(name, sheetName, cellName, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsDeleteWorkSheetComments
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteWorkSheetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsDeleteWorksheetComments(name, sheetName, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsDeleteWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsDeleteWorksheet(name, sheetName, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is WorksheetsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsDeleteWorksheetFreezePanes
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteWorksheetFreezePanesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? row = 1;
            int? column = 1;
            int? freezedRows = 2;
            int? freezedColumns = 2;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsDeleteWorksheetFreezePanes(name, sheetName, row, column, freezedRows, freezedColumns, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetNamedRanges
        /// </summary>
        [Test]
        public void CellsWorksheetsGetNamedRangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetNamedRanges(name, folder);
            Assert.IsInstanceOf<RangesResponse>(response, "response is RangesResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheet
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? verticalResolution = 100;
            int? horizontalResolution = 90;
            string format = "png";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheet(name, sheetName, format, verticalResolution, horizontalResolution, null,null,folder);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");

        }
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheet
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetToPDFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? verticalResolution = 100;
            int? horizontalResolution = 90;
            string format = "pdf";
            string folder = TEMPFOLDER;
            //UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheet(name, sheetName, format, verticalResolution, horizontalResolution, null,null,folder);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");
            //FileStream stream = File.Create(@"d:\book1.pdf");
            //response.CopyTo(stream);
            //stream.Close();

        }
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheetCalculateFormula
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetCalculateFormulaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string formula = "=NOW()";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheetCalculateFormula(name, sheetName, formula, folder);
            Assert.IsInstanceOf<SingleValueResponse>(response, "response is SingleValueResponse");
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheetComment
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string cellName = "B3";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheetComment(name, sheetName, cellName, folder);
            Assert.IsInstanceOf<CommentResponse>(response, "response is CommentResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheetComments
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheetComments(name, sheetName, folder);
            Assert.IsInstanceOf<CommentsResponse>(response, "response is CommentsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheetMergedCell
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetMergedCellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? mergedCellIndex = 1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheetMergedCell(name, sheetName, mergedCellIndex, folder);
            Assert.IsInstanceOf<MergedCellResponse>(response, "response is MergedCellResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheetMergedCells
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetMergedCellsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheetMergedCells(name, sheetName, folder);
            Assert.IsInstanceOf<MergedCellsResponse>(response, "response is MergedCellsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheetTextItems
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetTextItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheetTextItems(name, sheetName, folder);
            Assert.IsInstanceOf<TextItemsResponse>(response, "response is TextItemsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheets
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsGetWorksheets(name, folder);
            Assert.IsInstanceOf<WorksheetsResponse>(response, "response is WorksheetsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostAutofitWorksheetColumns
        /// </summary>
        [Test]
        public void CellsWorksheetsPostAutofitWorksheetColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? firstColumn = 1;
            int? lastColumn = 10;
            AutoFitterOptions autoFitterOptions = new AutoFitterOptions();
            int? firstRow = 1;
            int? lastRow = 19;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostAutofitWorksheetColumns(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostAutofitWorksheetRow
        /// </summary>
        [Test]
        public void CellsWorksheetsPostAutofitWorksheetRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? rowIndex = 1;
            int? firstColumn = 1;
            int? lastColumn = 10;
            AutoFitterOptions autoFitterOptions = new AutoFitterOptions();
            autoFitterOptions.AutoFitMergedCells = true;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostAutofitWorksheetRow(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostAutofitWorksheetRows
        /// </summary>
        [Test]
        public void CellsWorksheetsPostAutofitWorksheetRowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            AutoFitterOptions autoFitterOptions = new AutoFitterOptions();
            autoFitterOptions.AutoFitMergedCells = true;
            int? startRow = 1;
            int? endRow = 10;
            bool? onlyAuto = true;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostAutofitWorksheetRows(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostCopyWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsPostCopyWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = "NewCopy.xlsx";
            string sheetName = SHEET5;
            string sourceSheet = SHEET6;
            CopyOptions options = new CopyOptions();
            options.ColumnCharacterWidth = true;
            string sourceWorkbook = BOOK1;
            string sourceFolder = TEMPFOLDER;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            UpdateDataFile(instance,folder, sourceWorkbook);
            var response = instance.CellsWorksheetsPostCopyWorksheet(name, sheetName, sourceSheet, options,  sourceWorkbook, sourceFolder, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostMoveWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsPostMoveWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            WorksheetMovingRequest moving = new WorksheetMovingRequest();//SHEET3, "after"
            moving.DestinationWorksheet = SHEET3;
            moving.Position = "after";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostMoveWorksheet(name, sheetName, moving, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is WorksheetsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostRenameWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsPostRenameWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string newname = "renametest";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostRenameWorksheet(name, sheetName, newname, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostUpdateWorksheetProperty
        /// </summary>
        [Test]
        public void CellsWorksheetsPostUpdateWorksheetPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            Worksheet sheet = new Worksheet();
            sheet.Index = 0;
            sheet.IsGridlinesVisible = true;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostUpdateWorksheetProperty(name, sheetName, sheet, folder);
            Assert.IsInstanceOf<WorksheetResponse>(response, "response is WorksheetResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostUpdateWorksheetZoom
        /// </summary>
        [Test]
        public void CellsWorksheetsPostUpdateWorksheetZoomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? value = 1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostUpdateWorksheetZoom(name, sheetName, value, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostWorkSheetComment
        /// </summary>
        [Test]
        public void CellsWorksheetsPostWorkSheetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string cellName = "B3";
            Comment comment = new Comment();
            comment.Author = "Roy";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostWorksheetComment(name, sheetName, cellName, comment, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostWorkSheetTextSearch
        /// </summary>
        [Test]
        public void CellsWorksheetsPostWorkSheetTextSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string text = "123456";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostWorksheetTextSearch(name, sheetName, text, folder);
            Assert.IsInstanceOf<TextItemsResponse>(response, "response is TextItemsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostWorksheetRangeSort
        /// </summary>
        [Test]
        public void CellsWorksheetsPostWorksheetRangeSortTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string cellArea = CELLAREA;
            DataSorter dataSorter = new DataSorter();
            dataSorter.CaseSensitive = true;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostWorksheetRangeSort(name, sheetName, cellArea, dataSorter, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPostWorsheetTextReplace
        /// </summary>
        [Test]
        public void CellsWorksheetsPostWorsheetTextReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string oldValue = "1234";
            string newValue = "56678";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPostWorsheetTextReplace(name, sheetName, oldValue, newValue, folder);
            Assert.IsInstanceOf<WorksheetReplaceResponse>(response, "response is WorksheetReplaceResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPutAddNewWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsPutAddNewWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? position = 1;
            string sheettype = "VB";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPutAddNewWorksheet(name, sheetName, position, sheettype, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is WorksheetsResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPutChangeVisibilityWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsPutChangeVisibilityWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            bool? isVisible = true;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPutChangeVisibilityWorksheet(name, sheetName, isVisible, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is WorksheetResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
  
        /// <summary>
        /// Test CellsWorksheetsPutProtectWorksheet
        /// </summary>
        [Test]
        public void CellsWorksheetsPutProtectWorksheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            ProtectSheetParameter protectParameter =  new ProtectSheetParameter();
            protectParameter.ProtectionType = "All";
            protectParameter.Password = "123";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPutProtectWorksheet(name, sheetName, protectParameter, folder);
            Assert.IsInstanceOf<WorksheetResponse>(response, "response is WorksheetResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPutWorkSheetBackground
        /// </summary>
        [Test]
        public void CellsWorksheetsPutWorkSheetBackgroundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            
            var response = instance.CellsWorksheetsPutWorksheetBackground(name, sheetName, GetTestDataByteArray("WaterMark.png"), folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPutWorkSheetComment
        /// </summary>
        [Test]
        public void CellsWorksheetsPutWorkSheetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string cellName = "C1";
            Comment comment = new Comment ();
            comment.Author = "roy";
            WorkbookEncryptionRequest encryption = new WorkbookEncryptionRequest();
            encryption.Password = "123456";
            encryption.KeyLength = 128;
            encryption.EncryptionType = "XOR";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPutWorksheetComment(name, sheetName, cellName, comment, folder);
            Assert.IsInstanceOf<CommentResponse>(response, "response is CommentResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsWorksheetsPutWorksheetFreezePanes
        /// </summary>
        [Test]
        public void CellsWorksheetsPutWorksheetFreezePanesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? row = 1;
            int? column = 1;
            int? freezedRows = 4;
            int? freezedColumns = 5;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsWorksheetsPutWorksheetFreezePanes(name, sheetName, row, column, freezedRows, freezedColumns, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is CellsCloudResponse");
            Assert.AreEqual(response.Code, 200);
        }
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheet
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetForAreaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? verticalResolution = 100;
            int? horizontalResolution = 90;
            string format = "png";
            string area = "B3:K8";
            string folder = TEMPFOLDER;
            UpdateDataFile(instance, folder, name);
            var response = instance.CellsWorksheetsGetWorksheet(name, sheetName, format, verticalResolution, horizontalResolution, area,null ,folder);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");

        }
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheet
        /// </summary>
        [Test]
        public void CellsWorksheetsGetWorkSheetForPageIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? verticalResolution = 100;
            int? horizontalResolution = 90;
            string format = "png";
            int? pageIndex =1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance, folder, name);
            var response = instance.CellsWorksheetsGetWorksheet(name, sheetName, format, verticalResolution, horizontalResolution, null, pageIndex, folder);
            Assert.IsInstanceOf<System.IO.Stream>(response, "response is System.IO.Stream");

        }
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheet
        /// </summary>
        [Test]
        public void CellsWorksheetsDeleteWorkSheetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            MatchConditionRequest matchConditionRequest = new MatchConditionRequest();
            matchConditionRequest.FullMatchConditions = new List<string>() { "Sheet1", "Sheet2", "Sheet3" }; ;
            var name = BOOK1;

            string folder = TEMPFOLDER;
            UpdateDataFile(instance, folder, BOOK1);

            var response = instance.CellsWorksheetsDeleteWorksheets(name, matchConditionRequest, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(response, "response is System.IO.Stream");

        }
        /// <summary>
        /// Test CellsWorksheetsGetWorkSheet
        /// </summary>
        [Test]
        public void CellsWorksheetsGetPageCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            MatchConditionRequest matchConditionRequest = new MatchConditionRequest();
            matchConditionRequest.FullMatchConditions = new List<string>() { "Sheet1", "Sheet2", "Sheet3" }; ;
            var name = BOOK1;

            string folder = TEMPFOLDER;
            UpdateDataFile(instance, folder, BOOK1);

            var response = instance.CellsWorksheetsGetPageCount(name, SHEET1, folder);
            Assert.IsInstanceOf<long>(response, "response is WorkbookResponse");
            Assert.Greater((long)response, 0);

        }
    }

}
