/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Api;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing CellsRangesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CellsRangesApiTests:CellsBaseTest
    {
        private CellsRangesApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CellsRangesApi(GetConfiguration());
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CellsRangesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CellsRangesApi
            Assert.IsInstanceOf(typeof(CellsRangesApi), instance, "instance is a CellsRangesApi");
        }
        
        /// <summary>
        /// Test CellsRangesGetWorksheetCellsRangeValue
        /// </summary>
        [Test]
        public void CellsRangesGetWorksheetCellsRangeValueTest()
        {
            string name = BOOK1;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            int? firstRow = 0;
            int? firstColumn = 0;
            int? rowCount = 3;
            int? columnCount = 2;
            var response = instance.CellsRangesGetWorksheetCellsRangeValue(name, sheetName, null, firstRow, firstColumn, rowCount, columnCount, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);

            var rangeName = "A1:B3";
            response = instance.CellsRangesGetWorksheetCellsRangeValue(name, sheetName, rangeName, null, null, null, null, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);

            rangeName = "Name_2";
            response = instance.CellsRangesGetWorksheetCellsRangeValue(name, sheetName, rangeName, null, null, null, null, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }

        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeColumnWidth
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeColumnWidthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            double? value = 10.01;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeColumnWidth(name, sheetName, value, range, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeMerge
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeMergeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeMerge(name, sheetName, range, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeMoveTo
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeMoveToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            int? destRow = 1;
            int? destColumn = 1;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeMoveTo(name, sheetName, destRow, destColumn, range, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeOutlineBorder
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeOutlineBorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            RangeSetOutlineBorderRequest rangeOperate = 
                new RangeSetOutlineBorderRequest();
            //new Range(10,10.1,1,1,null,null,2,16.8), "LeftBorder", "None"
            rangeOperate.BorderEdge = "LeftBorder";
            rangeOperate.BorderStyle = "Dotted";
            rangeOperate.BorderColor = new Color();
            rangeOperate.BorderColor.R = 255;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 10;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 2;
            range.RowHeight = 10;
            rangeOperate.Range = range;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeOutlineBorder(name, sheetName, rangeOperate, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeRowHeight
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeRowHeightTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            double? value = 10.99;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeRowHeight(name, sheetName, value, range, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeStyle
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeStyleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            RangeSetStyleRequest rangeOperate = new RangeSetStyleRequest();
            //new Range(10, 10.1, 1, 1, null, null, 2, 16.8), new Style (null ,new Font(null,19))
            rangeOperate.Style = new Style();
            rangeOperate.Style.Font = new Font();
            rangeOperate.Style.Font.IsBold = true;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            rangeOperate.Range = range;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeStyle(name, sheetName, rangeOperate, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeUnMerge
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeUnMergeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeUnmerge(name, sheetName, range, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }

        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRangeValue
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangeValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            string value = "null";
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            bool? isConverted =true;
            bool? setStyle = true;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRangeValue(name, sheetName, value, range, isConverted, setStyle, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsRangesPostWorksheetCellsRanges
        /// </summary>
        [Test]
        public void CellsRangesPostWorksheetCellsRangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string sheetName = SHEET1;
            RangeCopyRequest rangeOperate = new RangeCopyRequest();
            //"copydata", new Range(10, 10.1, 1, 1, null, null, 2, 16.8), new Range(20, 10.1, 1, 1, null, null, 2, 16.8), new PasteOptions(true)
            rangeOperate.Operate = "copydata";
            rangeOperate.PasteOptions = new PasteOptions();
            rangeOperate.PasteOptions.OnlyVisibleCells = true;
            Range range = new Range(); //10,10.1,1,1,null,null,2,16.8
            range.ColumnCount = 1;
            range.ColumnWidth = 10.1;
            range.FirstColumn = 1;
            range.FirstRow = 1;
            range.RowCount = 10;
            Range range2= new Range(); //10,10.1,1,1,null,null,2,16.8
            range2.ColumnCount = 1;
            range2.ColumnWidth = 10.1;
            range2.FirstColumn = 1;
            range2.FirstRow = 20;
            range2.RowCount = 10;
            rangeOperate.Source = range;
            rangeOperate.Target = range2;
            string folder = TEMPFOLDER;
            UpdateDataFile(folder, name);
            var response = instance.CellsRangesPostWorksheetCellsRanges(name, sheetName, rangeOperate, folder);
            Assert.IsInstanceOf<SaaSposeResponse>(response, "response is SaaSposeResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
    }

}
