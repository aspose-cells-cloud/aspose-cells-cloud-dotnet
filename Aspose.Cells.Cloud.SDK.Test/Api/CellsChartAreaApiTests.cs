/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Api;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing CellsChartAreaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CellsChartAreaApiTests : CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = IsDockerTest ? new CellsApi(testbaseurl) : new CellsApi(clientId, clientSecret, apiVersion, testbaseurl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        
        /// <summary>
        /// Test CellsChartAreaGetChartArea
        /// </summary>
        [Test]
        public void CellsChartAreaGetChartAreaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = MYDOC;
            string sheetName = SHEET3;
            int? chartIndex = 0;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsChartAreaGetChartArea(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<ChartAreaResponse>(response, "response is ChartAreaResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsChartAreaGetChartAreaBorder
        /// </summary>
        [Test]
        public void CellsChartAreaGetChartAreaBorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = MYDOC;
            string sheetName = SHEET3;
            int? chartIndex = 0;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsChartAreaGetChartAreaBorder(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<LineResponse>(response, "response is LineResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
        /// <summary>
        /// Test CellsChartAreaGetChartAreaFillFormat
        /// </summary>
        [Test]
        public void CellsChartAreaGetChartAreaFillFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = MYDOC;
            string sheetName = SHEET3;
            int? chartIndex = 0;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance,folder, name);
            var response = instance.CellsChartAreaGetChartAreaFillFormat(name, sheetName, chartIndex, folder);
            Assert.IsInstanceOf<FillFormatResponse>(response, "response is FillFormatResponse");
            Assert.AreEqual(response.Code, 200);
        }
        
    }

}
