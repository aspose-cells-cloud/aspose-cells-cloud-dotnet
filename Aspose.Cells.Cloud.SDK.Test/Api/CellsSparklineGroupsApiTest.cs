namespace Aspose.Cells.Cloud.SDK.Test
{
    using NUnit.Framework;
    using Aspose.Cells.Cloud.SDK.Api;
    using Aspose.Cells.Cloud.SDK.Model;

    /// <summary>
    ///  Class for testing CellsWorksheetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CellsSparklineGroupsApiTest : CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = IsDockerTest ? new CellsApi(testbaseurl) : new CellsApi(clientId, clientSecret, apiVersion, testbaseurl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CellsChartsDeleteWorksheetChartLegend
        /// </summary>
        [Test]
        public void CellsSparklineGroupsApiGPPDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = PivTestFile;
            string sheetName = SHEET1;
            string folder = TEMPFOLDER;
            UpdateDataFile(instance, folder, name);
            var getsResponse = instance.CellsSparklineGroupsGetWorksheetSparklineGroups(name, sheetName, folder);
            Assert.IsInstanceOf<SparklineGroupsResponse>(getsResponse, "response is SparklineGroupsResponse");
            Assert.AreEqual(getsResponse.Code, 200);

            var putResponse = instance.CellsSparklineGroupsPutWorksheetSparklineGroup(name, sheetName, "Line", "C6:E13", false, "G6:G13", folder);
            Assert.IsInstanceOf<CellsCloudResponse>(putResponse, "response is CellsCloudResponse");
            Assert.AreEqual(putResponse.Code, 200);

            var getResponse = instance.CellsSparklineGroupsGetWorksheetSparklineGroup(name, sheetName, 0,folder);
            Assert.IsInstanceOf<SparklineGroupResponse>(getResponse, "response is SparklineGroupsResponse");
            Assert.AreEqual(getResponse.Code, 200);

            SparklineGroup sparklineGroup = new SparklineGroup();
            sparklineGroup.DisplayHidden = true;
            var postResponse = instance.CellsSparklineGroupsPostWorksheetSparklineGroup(name, sheetName, 0, sparklineGroup, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(postResponse, "response is CellsCloudResponse");
            Assert.AreEqual(postResponse.Code, 200);

            var deleteResponse = instance.CellsSparklineGroupsDeleteWorksheetSparklineGroup(name, sheetName, 0, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(deleteResponse, "response is CellsCloudResponse");
            Assert.AreEqual(deleteResponse.Code, 200);


            var deletesResponse = instance.CellsSparklineGroupsDeleteWorksheetSparklineGroups(name, sheetName, folder);
            Assert.IsInstanceOf<CellsCloudResponse>(deletesResponse, "response is CellsCloudResponse");
            Assert.AreEqual(deletesResponse.Code, 200);
        }
    }
}
