namespace Aspose.Cells.Cloud.SDK.Test
{

    using System.IO;
    using NUnit.Framework;
    using Aspose.Cells.Cloud.SDK.Api;
    using Aspose.Cells.Cloud.SDK.Model;

    /// <summary>
    ///  Class for testing CellsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class  CellsStorageApiTests : CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CellsApi( clientId, clientSecret);;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CellsDownloadFileTest
        /// </summary>
        [Test]
        public void CellsDownloadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            Stream stream = GetTestDataStream(name);
            instance.UploadFile(folder + "\\" + name, stream);
            var response = instance.DownloadFile(folder + "\\" + name);
            Assert.IsInstanceOf<Stream>(response, "Download file.");
        }

        /// <summary>
        /// Test CellsUploadFileTest
        /// </summary>
        [Test]
        public void CellsStorageApiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            Stream stream = GetTestDataStream(name);
            var response = instance.UploadFile(folder + "\\"+name, stream);
            Assert.IsInstanceOf<FilesUploadResult>(response, "Upload file.");
            var responseObjectExists = instance.ObjectExists(name);
            Assert.IsInstanceOf<ObjectExist>(responseObjectExists, "StorageExist.");
            //create folder
            instance.CreateFolder(folder + "\\new");
            //copy name to 1+name
            instance.CopyFile(folder + "\\" + name, folder + @"\new"+ name);
            //rename
            instance.MoveFile(folder + "\\" + name, folder + @"\1" + name);
            //delete uploaded file
            instance.DeleteFile(folder + "\\1" + name);
            //create folder
            instance.CopyFolder(folder + "\\new", folder + "\\new2");
            instance.MoveFolder(folder + "\\new2", folder + "\\new3");
            //Get file list
            var responseList = instance.GetFilesList(folder);
            Assert.IsInstanceOf<FilesList>(responseList, "Get file list.");

            
            instance.CreateFolder(folder + "\\2");

            var responseStorageExists = instance.StorageExists("Default App");
            Assert.IsInstanceOf<StorageExist>(responseStorageExists, "StorageExist.");
        }

    }
}
