/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.IO;
using System.Collections.Generic;
using NUnit.Framework;
using Aspose.Cells.Cloud.SDK.Api;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Test
{
    /// <summary>
    ///  Class for testing CellsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class  CellsStorageApiTests : CellsBaseTest
    {
        private CellsApi instance;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CellsApi( clientId, clientSecret);;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test CellsDownloadFileTest
        /// </summary>
        [Test]
        public void CellsDownloadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            Stream stream = GetTestDataStream(name);
            instance.UploadFile(name, stream);
            var response = instance.DownloadFile(name);
            Assert.IsInstanceOf<Stream>(response, "Download file.");
        }

        /// <summary>
        /// Test CellsUploadFileTest
        /// </summary>
        [Test]
        public void CellsUploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            Stream stream = GetTestDataStream(name);
            var response = instance.UploadFile(TEMPFOLDER +"\\"+name, stream);
            Assert.IsInstanceOf<FilesUploadResult>(response, "Upload file.");
        }

        /// <summary>
        /// Test CellsDeleteFileTest
        /// </summary>
        [Test]
        public void CellsDeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            instance.DeleteFile(TEMPFOLDER + name);            
        }

        /// <summary>
        /// Test CellsCopyFileTest
        /// </summary>
        [Test]
        public void CellsCopyFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            Stream stream = GetTestDataStream(name);
            instance.UploadFile( name, stream);
            string folder = TEMPFOLDER;
            instance.CopyFile( name, TEMPFOLDER +@"\"+ name);
        }

        /// <summary>
        /// Test CellsMoveFileTest
        /// </summary>
        [Test]
        public void CellsMoveFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            Stream stream = GetTestDataStream(name);
            instance.UploadFile(name, stream);
            instance.DeleteFile(name + "2");
            instance.MoveFile( name,  name + "2");
        }

        /// <summary>
        /// Test CellsGetFilesListTest
        /// </summary>
        [Test]
        public void CellsGetFilesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            var response =  instance.GetFilesList(TEMPFOLDER );
            Assert.IsInstanceOf<FilesList>(response, "Upload file.");
        }

        /// <summary>
        /// Test CellsCreateAndDeleteFolderTest
        /// </summary>
        [Test]
        public void CellsCreateAndDeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            instance.CreateFolder(TEMPFOLDER+1);

            instance.DeleteFolder(TEMPFOLDER + 1);
            instance.DeleteFolder("ruby");
        }

        /// <summary>
        /// Test CellsCopyFolderTest
        /// </summary>
        [Test]
        public void CellsCopyFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            instance.CopyFolder(TEMPFOLDER, TEMPFOLDER + 2);
        }

        /// <summary>
        /// Test CellsMoveFolderTest
        /// </summary>
        [Test]
        public void CellsMoveFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            instance.MoveFolder(TEMPFOLDER +2 , TEMPFOLDER + 3);
        }

        /// <summary>
        /// Test CellsStorageExistsTest
        /// </summary>
        [Test]
        public void CellsStorageExistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            var response = instance.StorageExists("Default App");
            Assert.IsInstanceOf<StorageExist>(response, "StorageExist.");
        }

        /// <summary>
        /// Test CellsStorageExistsTest
        /// </summary>
        [Test]
        public void CellsObjectExistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = BOOK1;
            string folder = TEMPFOLDER;
            var response = instance.ObjectExists(name);
            Assert.IsInstanceOf<ObjectExist>(response, "StorageExist.");
        }
    }
}
