/* 
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.Cells.Cloud.SDK.Client;
using Aspose.Cells.Cloud.SDK.Api;
using Aspose.Cells.Cloud.SDK.Model;

namespace Aspose.Cells.Cloud.SDK.Test.LiteApi
{
    /// <summary>
    ///  Class for testing OAuthApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ExportTests : CellsBaseTest
    {
        private ILightCellsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LightCellsApi(clientId, clientSecret, apiVersion, testbaseurl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }
        
        [Test]
        public void PostExportApi_Chart_Test()
        {
            if(IsDockerTest)
            {
                Assert.IsTrue(true);
                return;
            }
            IDictionary<string, Stream> files = new Dictionary<string, Stream>();
            files.Add(BOOK1, GetTestDataStream( BOOK1));
            files.Add(MYDOC, GetTestDataStream(MYDOC));
            var filesResult = instance.PostExport(files,"chart","png");
            Assert.IsInstanceOf<FilesResult>(filesResult, "response is AccessTokenResponse");
        }

        [Test]
        public void PostExportApi_Workbook_Test()
        {
            if (IsDockerTest)
            {
                Assert.IsTrue(true);
                return;
            }
            IDictionary<string, Stream> files = new Dictionary<string, Stream>();
            files.Add(BOOK1, GetTestDataStream(BOOK1));
            files.Add(MYDOC, GetTestDataStream(MYDOC));
            var filesResult = instance.PostExport(files,"workbook", "png");
            Assert.IsInstanceOf<FilesResult>(filesResult, "response is AccessTokenResponse");
        }

        [Test]
        public void PostExportApi_Picture_Test()
        {
            if (IsDockerTest)
            {
                Assert.IsTrue(true);
                return;
            }
            IDictionary<string, Stream> files = new Dictionary<string, Stream>();
            files.Add(BOOK1, GetTestDataStream(BOOK1));
            files.Add(MYDOC, GetTestDataStream(MYDOC));
            var filesResult = instance.PostExport(files,"picture", "png");
            Assert.IsInstanceOf<FilesResult>(filesResult, "response is AccessTokenResponse");
        }
        [TestCase("worksheet", "png")]
        [TestCase("workbook", "png")]
        [TestCase("picture", "png")]
        [TestCase("shape", "png")]
        [TestCase("chart", "png")]
        [TestCase("listobject", "png")]
        [TestCase("worksheet", "pdf")]
        [TestCase("workbook", "pdf")]
        [TestCase("picture", "Tiff")]
        [TestCase("shape", "Tiff")]
        [TestCase("chart", "pdf")]
        [TestCase("listobject", "pdf")]
        [TestCase("worksheet", "xlsx")]
        [TestCase("workbook", "xlsx")]
        //[TestCase("picture", "Svg")]
        //[TestCase("shape", "Svg")]
        //[TestCase("chart", "Svg")]
        [TestCase("listobject", "xlsx")]
        //[TestCase("oleobject", "png")]
        public void PostExportApi_Test(string objecttype ,string format)
        {
            if (IsDockerTest)
            {
                Assert.IsTrue(true);
                return;
            }
            IDictionary<string, Stream> files = new Dictionary<string, Stream>();
            files.Add(BOOK1, GetTestDataStream(BOOK1));
            files.Add(MYDOC, GetTestDataStream(MYDOC));
            var filesResult = instance.PostExport(files, objecttype, format);
            Assert.IsInstanceOf<FilesResult>(filesResult, "response is AccessTokenResponse");
        }
    }

}
